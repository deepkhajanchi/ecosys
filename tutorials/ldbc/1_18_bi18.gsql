USE GRAPH ldbc_snb

/*
  Query Name: bi18

  Description:
  For a given tag, this query recommends new friends (person2) for each person1 interested in the tag. The recommended friends meet the following criteria:
    - They do not yet know person1.
    - They have at least one mutual friend with person1.
    - They are also interested in this tag.

  The Persons (person2) are ranked based on the number of mutual friends they have with person1.

  Reference:
  LDBC SNB Specification, Page 107: https://ldbcouncil.org/ldbc_snb_docs/ldbc-snb-specification.pdf
*/

CREATE OR REPLACE QUERY bi18(STRING tag) syntax v3{
  TYPEDEF TUPLE <UINT person1Id, UINT person2Id, UINT mutualFriendCount> RESULT;
  HeapAccum<RESULT>(20, mutualFriendCount DESC, person1Id ASC, person2Id ASC) @@result;
  SetAccum<VERTEX> @exclude;
  MapAccum<VERTEX<Person>, SumAccum<UINT>> @mutualFriendCount;
  OrAccum<BOOL> @hasInterest;
  person1 =
    SELECT p
    FROM (t:Tag {name: tag})<- [:HAS_INTEREST]- (p:Person)
    ACCUM p.@hasInterest += TRUE, p.@exclude += p;
  tmp =
    SELECT p2
    FROM (p1:person1) -[:KNOWS]- (p2:Person)
    WHERE p2.@hasInterest
    ACCUM p2.@exclude += p1;

  person2 =
    SELECT p2
    FROM (p1:person1) -[:KNOWS]- (:Person)- [:KNOWS] - (p2:Person)
    WHERE p2.@hasInterest AND NOT p2.@exclude.contains(p1)
    ACCUM p2.@mutualFriendCount += (p1 -> 1)
    POST-ACCUM
      FOREACH (p,num) IN p2.@mutualFriendCount DO
        @@result += RESULT(p.id, p2.id, num)
      END;

  PRINT @@result as result;
}

install query bi18

run query bi18("Elizabeth_Taylor")