USE GRAPH ldbc_snb

/*
  Query Name: bi14

  Description:
  For each City in $country1, this query finds the highest scoring pair of Persons (person1, person2) that:
    - Know each other,
    - Have one person located in a City of $country1 and the other in a City of $country2.

  The pair's score is computed by awarding:
    - +4 if person1 replied to at least one Message by person2,
    - +1 if person1 created a Message that person2 replied to,
    - +10 if person1 liked at least one Message by person2, and
    - +1 if person1 created a Message that was liked by person2.

  In case of ties, the pair with the smallest (person1.id, person2.id) (lexicographical order) is chosen.
  Only the top pair per City from $country1 is returned.

  Reference:
  LDBC SNB Specification, Page 103: https://ldbcouncil.org/ldbc_snb_docs/ldbc-snb-specification.pdf
*/

CREATE OR REPLACE QUERY bi14(STRING country1, STRING country2) syntax v3{
  TYPEDEF TUPLE<UINT person1Id, UINT person2Id, STRING city1Name, INT score> pairScore;
  TYPEDEF TUPLE <UINT pid, UINT score> ps;

  HeapAccum<ps>(1, score DESC, pid ASC) @pScore;
  MapAccum<VERTEX<Person>, UINT> @score;
  SetAccum<VERTEX<Person>> @person2, @p2s1, @p2s2, @p2s3, @p2s4, @p2s5;
  OrAccum @valid;
  HeapAccum<pairScore>(1, score DESC, person1Id ASC, person2Id ASC) @cityresults, @@result;
  MinAccum<UINT> @@min_pid2;

  P1 = SELECT p
    FROM (s:Country {name:country1}) <-[:IS_PART_OF]-()<-[:IS_LOCATED_IN]-(p:Person)
    ACCUM p.@valid += True;

  P2 =
    SELECT p
    FROM (s:Country {name:country2}) <-[:IS_PART_OF]-()<-[:IS_LOCATED_IN]-(p:Person)
    POST-ACCUM @@min_pid2 += p.id;

  M1 =
    SELECT m FROM (p:P1) <-[:HAS_CREATOR]- (m:Comment:Post)
    ACCUM m.@valid += True;

  M2 =
    SELECT m FROM (p:P2) <-[:HAS_CREATOR]- (m:Comment:Post)
    ACCUM m.@person2 += p;

  P = SELECT p1 FROM (m2:M2) <-[:REPLY_OF]- (c1:Comment) -[:HAS_CREATOR]-> (p1:Person)
    WHERE c1.@valid AND p1.@valid
    ACCUM p1.@p2s1 += m2.@person2;

  P = SELECT p1 FROM (m2:M2) -[:REPLY_OF]-> (m1) -[:HAS_CREATOR]-> (p1:Person)
    WHERE m1.@valid AND p1.@valid
    ACCUM p1.@p2s2 += m2.@person2;

  P = SELECT p1 FROM (p2:P2) -[:KNOWS]- (p1:Person)
    WHERE p1.@valid
    ACCUM p1.@p2s3 += p2;

  P = SELECT p1 FROM (m2:M2) <-[:LIKES]- (p1:Person)
    WHERE p1.@valid
    ACCUM p1.@p2s4 += m2.@person2;

  P = SELECT p1 FROM (p2:P2) -[:LIKES]-> (m1) -[:HAS_CREATOR]-> (p1:Person)
    WHERE m1.@valid AND p1.@valid
    ACCUM p1.@p2s5 += p2;

  P1 = SELECT p1 FROM (p1:P1)
    ACCUM
      FOREACH p2 IN p1.@p2s1 DO
        p1.@score += (p2 -> 4)
      END,
      FOREACH p2 IN p1.@p2s2 DO
        p1.@score += (p2 -> 1)
      END,
      FOREACH p2 IN p1.@p2s3 DO
        p1.@score += (p2 -> 15)
      END,
      FOREACH p2 IN p1.@p2s4 DO
        p1.@score += (p2 -> 10)
      END,
      FOREACH p2 IN p1.@p2s5 DO
        p1.@score += (p2 -> 1)
      END
    POST-ACCUM
      FOREACH (p2,score) IN p1.@score DO
        p1.@pScore += ps(p2.id,score)
      END;

  City1 = SELECT c1 FROM (p1:P1) -[:IS_LOCATED_IN]-> (c1:City)
    ACCUM c1.@cityresults += pairScore(p1.id, p1.@pScore.top().pid, c1.name, p1.@pScore.top().score);

  zeroCity1 = SELECT c1 FROM (c1:City1) <-[:IS_LOCATED_IN]- (p1:Person)
    WHERE c1.@cityresults.size() == 0
    ACCUM c1.@cityresults += pairScore(p1.id, @@min_pid2, c1.name, 0);

  @@result.resize(City1.size());
  City1 = SELECT c1 FROM (c1:City1)
    ACCUM @@result += c1.@cityresults.top();
  PRINT @@result;
}
