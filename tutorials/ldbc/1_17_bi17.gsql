USE GRAPH ldbc_snb

/*
  Query Name: bi17

  Description:
  This query identifies instances of "information propagation" based on a given tag and time window.
  It searches for cases where a Person (person1) posts a Message with the specified tag to a Forum (forum1).
  Later, in a different Forum (forum2) where person1 is not a member, two other members of forum1 (person2 and person3) have a discussion with the same tag.
  The discussion consists of person2 creating a Message and person3 replying directly to it. The reply must occur after a specified time window of `$delta` hours from the original post by person1.

  The query returns the top 10 person1 IDs along with the number of interactions their Messages may have caused.

  Reference:
  LDBC SNB Specification, Page 106: https://ldbcouncil.org/ldbc-snb_docs/ldbc-snb-specification.pdf
*/

CREATE OR REPLACE QUERY bi17(STRING tag, INT delta) syntax v3{
  TYPEDEF TUPLE <UINT messageCount, UINT person1Id> RESULT;
  HeapAccum<RESULT>(10, messageCount DESC, person1Id ASC) @@result;
  OrAccum<BOOL> @hasTag, @isCreator;
  # There is only one forum and creator for a message.
  MinAccum<VERTEX<Forum>> @forum;
  MinAccum<VERTEX<Person>> @creator;
  # On the other hand, creator and forum have many messages
  SetAccum<VERTEX> @messages;
  # forum1 Id -> (person1 Id -> smallest message1 creationdate)
  MapAccum<VERTEX<Forum>, MapAccum<VERTEX<Person>, MinAccum<DATETIME>>> @@Forum2Creator;
  # comment id -> creator forum id
  SetAccum<VERTEX<Forum>> @CreatorForums, @Forum1;
  # MapAccum<VERTEX<Forum>, SetAccum<VERTEX<Person>>> @@hasMember;
  SetAccum<VERTEX<Person>> @hasMember;
  # person1 id in message2
  SetAccum<UINT> @person1Id;
  MapAccum<UINT, SumAccum<UINT>> @@messageCount;

  T = {Tag.*};
  T = SELECT t FROM (t:Tag {name:tag});
  messagesWithTag =
    SELECT m
    FROM (:T) <-[:HAS_TAG]- (m:Comment:Post)
    ACCUM m.@hasTag = true;

  creators =
    SELECT p
    FROM (m:messagesWithTag) -[:HAS_CREATOR] -> (p:Person)
    ACCUM m.@creator = p, p.@isCreator = True;

  forum12 =
    SELECT f
    FROM (m:messagesWithTag) -[:REPLY_OF*0..]->()<-[:CONTAINER_OF]- (f:Forum)
    ACCUM
      m.@forum = f, f.@messages += m,
      @@Forum2Creator += (f -> (m.@creator-> m.creationDate));

  forum12 =
    SELECT f FROM (f:forum12) -[:HAS_MEMBER]-> (p:Person)
    ACCUM FOREACH m in f.@messages DO
      m.@hasMember += p
      END;

  messages2 =
    SELECT m
    FROM (f:forum12) -[:HAS_MEMBER]-> (p:Person) <-[:HAS_CREATOR]- (m:Comment:Post)
    WHERE p.@isCreator AND m.@hasTag
    ACCUM m.@CreatorForums += f;

  messages2 =
    SELECT m2
    FROM  (m:messages2) -[:REPLY_OF]-> (m2)
    WHERE m2.@hasTag AND m.@creator != m2.@creator
    ACCUM m2.@Forum1 += (m2.@CreatorForums INTERSECT m.@CreatorForums)
    POST-ACCUM m2.@Forum1.remove(m2.@forum)
    HAVING m2.@Forum1.size() > 0;

  message2 =
    SELECT m2 FROM (m2:messages2)
    ACCUM
      FOREACH f IN m2.@Forum1 DO
        FOREACH (p1,m1date) IN @@Forum2Creator.get(f) DO
          IF datetime_add(m1date, INTERVAL delta HOUR) < m2.creationDate
               AND (NOT m2.@hasMember.contains(p1))
              THEN
              m2.@person1Id += p1.id
          END
        END
      END
    HAVING m2.@person1Id.size() > 0;

  message2 =
    SELECT m2 FROM (m2:message2)
    ACCUM FOREACH c IN m2.@person1Id DO
      @@messageCount += (c -> 1)
    END;

  FOREACH (personId,num) IN @@messageCount DO
    @@result += RESULT(num, personId);
  END;

  PRINT @@result;
}
