{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/", "content": "GDS Functions\nGraph Data Science (GDS) functions perform machine learning tasks such as the following:\nLoading data from a TigerGraph database in batches\nData Loaders\nSplitting vertices into training, test, and validation sets\nData Splitting Functions\nGathering metrics for Graph Neural Network (GNN) predictions\npyTigerGraph GDS Metrics\nInstalling and running Graph Data Science algorithms\nFeaturizer", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/1.3/gds/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.4/gds/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1.2/gds/", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/1/gds/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/1.1/gds/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "content": "Getting Started\nThe Getting Started sequence walks you through the following:\nInstalling pyTigerGraph\nConnecting to TigerGraph\npyTigerGraph 101\nAt the conclusion of the Getting Started sequence, you\u2019ll have reached an excellent starting point for further, more detail-driven activities.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/1.4/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1.1/getting-started/", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/1.3/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/1.2/getting-started/", "https://docs.tigergraph.com/pytigergraph/1/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "content": "PyTorch Geometric Transforms\nTemporalPyGTransform\nThe TemporalPyGTransform creates a sequence of subgraph batches out of a single batch of data produced by a NeighborLoader or HGTLoader. It assumes that there are datetime attributes on vertices and edges. If vertex attributes change over time, children vertex attributes are moved to the appropriate parent, and then the children are removed from the graph.\n_init_\n()\ninit\n(vertex_start_attrs: dict, vertex_end_attrs: dict, edge_start_attrs: dict, edge_end_attrs: dict, start_dt: int, end_dt: int, feature_transforms: dict, timestep: int = 86400)\nInstantiate a TemporalPyGTransform.\nParameters:\nvertex_start_attrs (str, dict)\n: If using on a homogeneous graph, string of the attribute storing the timestamp of when a vertex becomes valid to include.\nIf using on a heterogenous graph, dictionary that describes the attribute storing the timestamp of when a vertex becomes a valid vertex to include in the graph.\nIn the format of {\"VERTEX_TYPE\": \"attribute_name\"}.\nvertex_end_attrs (str, dict)\n: If using on a homogeneous graph, string of the attribute storing the timestamp of when a vertex stops being valid to include.\nIf using on a heterogenous graph, dictionary that describes the attribute storing the timestamp of when a vertex stops being a valid vertex to include in the graph.\nIn the format of {\"VERTEX_TYPE\": \"attribute_name\"}\nedge_start_attrs (str, dict)\n: If using on a homogeneous graph, string of the attribute storing the timestamp of when an edge becomes valid to include.\nIf using on a heterogenous graph, dictionary that describes the attribute storing the timestamp of when an edge becomes a valid edge to include in the graph.\nUses the PyG edge format of (\"SourceVertexType\", \"EdgeName\", \"DestinationVertexType\").\nIn the format of {(\"SourceVertexType\", \"EdgeName\", \"DestinationVertexType\"): \"attribute_name\"}.\nedge_end_attrs (str, dict)\n: If using on a homogeneous graph, string of the attribute storing the timestamp of when an edge stops being valid to include.\nIf using on a heterogenous graph, dictionary that describes the attribute storing the timestamp of when an edge stops being a valid edge to include in the graph.\nUses the PyG edge format of (\"SourceVertexType\", \"EdgeName\", \"DestinationVertexType\").\nIn the format of {(\"SourceVertexType\", \"EdgeName\", \"DestinationVertexType\"): \"attribute_name\"}\nstart_dt (int)\n: The UNIX epoch time to start generating the sequence of subgraphs.\nend_dt (int)\n: The UNIX epoch time to stop generating the sequence of subgraphs.\nfeature_transforms (dict, optional)\n: Only available on heterogeneous graphs. Moves temporally dynamic features from \"children\" vertices to \"parent\" vertices when\nmodelling temporal attributes in TigerGraph.\nThe key of the dictionary is the edge to move the attributes from the child type to the parent type, and the value is a list of attributes to move.\nIn the fromat of {(\"ItemInstance\", \"reverse_DESCRIBED_BY\", \"Item\"): [\"x\"]}\ntimestep (int, optional)\n: The number of seconds to use in between timesteps. Defaults to 86400 seconds (1 day).\ncall\n()\ncall\n(data) \u2192 list\nPerform the transform. Returns a list of PyTorch Geometric data objects, a sequence of snapshots in time of the graph.\nEdges are removed between vertices that do not have connections at the given time. All vertices are in each snapshot, but are marked\nas present with the \"vertex_present\" attribute in the produced data objects.\nParameter:\ndata (pyg.data.HeteroData or pyg.data.Data)\n: Takes in a PyTorch Geometric data object, such as ones produced by the dataloaders.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms#_init", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/1.4/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms#_temporalpygtransform", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms#_call", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/contributing/tests", "content": "", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/1.2/contributing/tests", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/1.3/contributing/tests", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/1.4/contributing/tests", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1/contributing/tests", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/1.1/contributing/tests", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/contributing/tests", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_precision", "content": "pyTigerGraph GDS Metrics\nUtility for gathering metrics for GNN predictions.\nAccuracy\nAccuracy = \\(\\sum_{i=1}^n (predictions_i == labels_i)/n\\)\nUsage:\nCall the update function to add predictions and labels.\nGet accuracy score at any point by accessing the value property.\nupdate()\nupdate(preds: ndarray, labels: ndarray) \u2192 None\nAdd predictions and labels to be compared.\nParameters:\npreds (ndarray):\nArray of predicted labels.\nlabels (ndarray):\nArray of true labels.\nvalue()\nvalue() \u2192 float\nGet accuracy score.\nReturns:\nAccuracy score (float).\nBinaryRecall\nThis metric is deprecated. Use Recall instead.\nRecall = \\(\\sum(predictions * labels)/\\sum(labels)\\)\nThis metric is for binary classifications, i.e., both predictions and labels are arrays of 0\u2019s and 1\u2019s.\nUsage:\nCall the update function to add predictions and labels.\nGet recall score at any point by accessing the value property.\nupdate()\nupdate(preds: ndarray, labels: ndarray) \u2192 None\nAdd predictions and labels to be compared.\nParameters:\npreds (ndarray):\nArray of predicted labels.\nlabels (ndarray):\nArray of true labels.\nvalue()\nvalue() \u2192 float\nGet recall score.\nReturns:\nRecall score (float).\nConfusionMatrix\nUpdates a confusion matrix as new updates occur.\nParameters:\nnum_classes (int)\n: Number of classes in your classification task.\n_init_\n()\ninit\n(num_classes: int) \u2192 None\nInstantiate the Confusion Matrix metric.\nParameter:\nnum_classes (int)\n: Number of classes in the classification task.\nupdate()\nupdate(preds: ndarray, labels: ndarray) \u2192 None\nAdd predictions and labels to be compared.\nParameters:\npreds (ndarray):\nArray of predicted labels.\nlabels (ndarray):\nArray of true labels.\nvalue()\nvalue() \u2192 np.array\nGet the confusion matrix.\nReturns:\nConsfusion matrix in dataframe form.\nRecall\nRecall = stem:[true positives/\\sum(true positives + false negatives)}\nThis metric is for classification, i.e., both predictions and labels are arrays of multiple whole numbers.\nUsage:\nCall the update function to add predictions and labels.\nGet recall score at any point by accessing the value property.\nvalue()\nvalue() \u2192 Union[dict, float]\nGet recall score for each class.\nReturns:\nRecall score for each class or the average recall if\nnum_classes\n== 2.\nBinaryPrecision\nThis metric is deprecated. Use the Precision metric instead.\nPrecision = \\(\\sum(predictions * labels)/\\sum(predictions)\\)\nThis metric is for binary classifications, i.e., both predictions and labels are arrays of 0\u2019s and 1\u2019s.\nUsage:\nCall the update function to add predictions and labels.\nGet precision score at any point by accessing the value property.\nupdate()\nupdate(preds: ndarray, labels: ndarray) \u2192 None\nAdd predictions and labels to be compared.\nParameters:\npreds (ndarray):\nArray of predicted labels.\nlabels (ndarray):\nArray of true labels.\nvalue()\nvalue() \u2192 float\nGet precision score.\nReturns:\nPrecision score (float).\nPrecision\nRecall = stem:[true positives/\\sum(true positives + false positives)\nThis metric is for classification, i.e., both predictions and labels are arrays of multiple whole numbers.\nUsage:\nCall the update function to add predictions and labels.\nGet recall score at any point by accessing the value property.\nvalue()\nvalue() \u2192 Union[dict, float]\nGet precision score for each class.\nReturns:\nPrecision score for each class or the average precision if\nnum_classes\n== 2.\nMSE\nMSE = \\(\\sum(predicted-actual)^2/n\\)\nThis metric is for regression tasks, i.e. predicting a n-dimensional vector of float values.\nUsage:\nCall the update function to add predictions and labels.\nGet MSE value at any point by accessing the value property.\nupdate()\nupdate(preds: ndarray, labels: ndarray) \u2192 None\nAdd predictions and labels to be compared.\nParameters:\npreds (ndarray):\nArray of predicted labels.\nlabels (ndarray):\nArray of true labels.\nvalue()\nvalue() \u2192 float\nGet MSE score.\nReturns:\nMSE value (float).\nRMSE\nRMSE = \\(\\sqrt(\\sum(predicted-actual)^2/n)\\)\nThis metric is for regression tasks, i.e. predicting a n-dimensional vector of float values.\nUsage:\nCall the update function to add predictions and labels.\nGet RMSE score at any point by accessing the value property.\nvalue()\nvalue() \u2192 float\nGet RMSE value.\nReturns:\nRMSE value (float).\nMAE\nMAE = \\(\\sum(predicted-actual)/n\\)\nThis metric is for regression tasks, i.e. predicting a n-dimensional vector of float values.\nUsage:\nCall the update function to add predictions and labels.\nGet MAE value at any point by accessing the value property.\nupdate()\nupdate(preds: ndarray, labels: ndarray) \u2192 None\nAdd predictions and labels to be compared.\nParameters:\npreds (ndarray):\nArray of predicted labels.\nlabels (ndarray):\nArray of true labels.\nvalue()\nvalue() \u2192 float\nGet MAE score.\nReturns:\nMAE value (float).\nHitsAtK\nThis metric is used in link prediction tasks, i.e. determining if two vertices have an edge between them.\nAlso known as Precsion@K.\nUsage:\nCall the update function to add predictions and labels.\nGet Hits@K value at any point by accessing the value property.\nParameters:\nk (int)\n: Top k number of entities to compare.\n_init_\n()\ninit\n(k: int) \u2192 None\nInstantiate the Hits@K Metric\nParameter:\nk (int)\n: Top k number of entities to compare.\nupdate()\nupdate(preds: ndarray, labels: ndarray) \u2192 None\nAdd predictions and labels to be compared.\nParameters:\npreds (ndarray):\nArray of predicted labels.\nlabels (ndarray):\nArray of true labels.\nvalue()\nvalue() \u2192 float\nGet Hits@K score.\nReturns:\nHits@K value (float).\nRecallAtK\nThis metric is used in link prediction tasks, i.e. determining if two vertices have an edge between them\nUsage:\nCall the update function to add predictions and labels.\nGet Recall@K value at any point by accessing the value property.\nParameters:\nk (int)\n: Top k number of entities to compare.\n_init_\n()\ninit\n(k: int) \u2192 None\nInstantiate the Recall@K Metric\nParameter:\nk (int)\n: Top k number of entities to compare.\nupdate()\nupdate(preds: ndarray, labels: ndarray) \u2192 None\nAdd predictions and labels to be compared.\nParameters:\npreds (ndarray):\nArray of predicted labels.\nlabels (ndarray):\nArray of true labels.\nvalue()\nvalue() \u2192 float\nGet Recall@K score.\nReturns:\nRecall@K value (float).\nClassificationMetrics\nCollects Loss, Accuracy, Precision, Recall, and Confusion Matrix Metrics.\n_init_\n()\ninit\n(num_classes: int = 2)\nInstantiate the Classification Metrics collection.\nParameter:\nnum_classes (int)\n: Number of classes in the classification task.\nreset_metrics()\nreset_metrics()\nReset the collection of metrics.\nupdate_metrics()\nupdate_metrics(loss, out, batch, target_type = None)\nUpdate the metrics collected.\nParameters:\nloss (float): loss value to update\nout (ndarray): the predictions of the model\nbatch (dict): the batch to calculate metrics on\ntarget_type (str, optional): the type of schema element to calculate the metrics for\nget_metrics()\nget_metrics()\nGet the metrics collected.\nReturns:\nDictionary of Accuracy, Precision, Recall, and Confusion Matrix\nRegressionMetrics\nCollects Loss, MSE, RMSE, and MAE metrics.\n_init_\n()\ninit\n()\nInstantiate the Regression Metrics collection.\nreset_metrics()\nreset_metrics()\nReset the collection of metrics.\nupdate_metrics()\nupdate_metrics(loss, out, batch, target_type = None)\nUpdate the metrics collected.\nParameters:\nloss (float): loss value to update\nout (ndarray): the predictions of the model\nbatch (dict): the batch to calculate metrics on\ntarget_type (str, optional): the type of schema element to calculate the metrics for\nget_metrics()\nget_metrics()\nGet the metrics collected.\nReturns:\nDictionary of MSE, RMSE, and MAE.\nLinkPredictionMetrics\nCollects Loss, Recall@K, and Hits@K metrics.\n_init_\n()\ninit\n(k)\nInstantiate the Classification Metrics collection.\nParameter:\nk (int)\n: The number of results to look at when calculating metrics.\nreset_metrics()\nreset_metrics()\nReset the collection of metrics.\nupdate_metrics()\nupdate_metrics(loss, out, batch, target_type = None)\nUpdate the metrics collected.\nParameters:\nloss (float): loss value to update\nout (ndarray): the predictions of the model\nbatch (dict): the batch to calculate metrics on\ntarget_type (str, optional): the type of schema element to calculate the metrics for\nget_metrics()\nget_metrics()\nGet the metrics collected.\nReturns:\nDictionary of Recall@K, Hits@K, and K.", "links": ["https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_mse", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_metrics_2", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_reset_metrics_3", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_5", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_7", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_binaryrecall", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_11", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_2", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_init_5", "https://docs.tigergraph.com/pytigergraph/1.2/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_8", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_6", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_linkpredictionmetrics", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_accuracy", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_confusionmatrix", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_3", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_mae", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_hitsatk", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_init_3", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_binaryprecision", "https://docs.tigergraph.com/pytigergraph/1.1/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_metrics", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_get_metrics_3", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_5", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_rmse", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_get_metrics", "https://docs.tigergraph.com/pytigergraph/1.3/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_9", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_classificationmetrics", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_4", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_10", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_get_metrics_2", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_4", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_2", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_reset_metrics_2", "https://docs.tigergraph.com/pytigergraph/1/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_3", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_7", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_init", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_init_2", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_recallatk", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_regressionmetrics", "https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_init_4", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/1.4/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_metrics_3", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_value_6", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_reset_metrics", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_init_6", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_update_8", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_recall", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics#_precision", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "content": "Query Functions\nThe functions on this page run installed or interpret queries in TigerGraph.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\nshowQuery()\nshowQuery(queryName: str) \u2192 str\nReturns the string of the given GSQL query.\nParameter:\nqueryName (str)\n: Name of the query to get metadata of.\ngetQueryMetadata()\ngetQueryMetadata(queryName: str) \u2192 dict\nReturns metadata details about a query.\nSpecifically, it lists the input parameters in the same order as they exist in the query\nand outputs\nPRINT\nstatement syntax.\nParameter:\nqueryName (str)\n: Name of the query to get metadata of.\ngetInstalledQueries()\ngetInstalledQueries(fmt: str = \"py\") \u2192 Union[dict, str, pd.DataFrame]\nReturns a list of installed queries.\nParameter:\nfmt\n: Format of the results:\n\"py\":   Python objects (default)\n\"json\": JSON document\n\"df\":   pandas DataFrame\nReturns:\nThe names of the installed queries.\nrunInstalledQuery()\nrunInstalledQuery(queryName: str, params: Union[str, dict] = None, timeout: int = None, sizeLimit: int = None, usePost: bool = False, runAsync: bool = False, replica: int = None, threadLimit: int = None, memoryLimit: int = None) \u2192 list\nRuns an installed query.\nThe query must be already created and installed in the graph.\nUse\ngetEndpoints(dynamic=True)\nor GraphStudio to find out the generated endpoint URL of\nthe query. Only the query name needs to be specified here.\nParameters:\nqueryName\n: The name of the query to be executed.\nparams\n: Query parameters. A string of param1=value1&param2=value2 format or a dictionary.\nSee below for special rules for dictionaries.\ntimeout\n: Maximum duration for successful query execution (in milliseconds).\nSee\nGSQL query timeout\nsizeLimit\n: Maximum size of response (in bytes).\nSee\nResponse size\nusePost\n: Defaults to False. The RESTPP accepts a maximum URL length of 8192 characters. Use POST if additional parameters cause\nyou to exceed this limit, or if you choose to pass an empty set into a query for database versions >= 3.8\nrunAsync\n: Run the query in asynchronous mode.\nSee\nAsync operation\nreplica\n: If your TigerGraph instance is an HA cluster, specify which replica to run the query on. Must be a\nvalue between [1, (cluster replication factor)].\nSee\nSpecify replica\nthreadLimit\n: Specify a limit of the number of threads the query is allowed to use on each node of the TigerGraph cluster.\nSee\nThread limit\nmemoryLimit\n: Specify a limit to the amount of memory consumed by the query (in MB). If the limit is exceeded, the query will abort automatically.\nSupported in database versions >= 3.8.\nSee\nMemory limit\nReturns:\nThe output of the query, a list of output elements (vertex sets, edge sets, variables,\naccumulators, etc.\nNotes:\nWhen specifying parameter values in a dictionary:\nFor primitive parameter types use\n\"key\": value\nFor\nSET\nand\nBAG\nparameter types with primitive values, use\n\"key\": [value1, value2, \u2026\u200b]\nFor\nVERTEX<type>\nuse\n\"key\": primary_id\nFor\nVERTEX\n(no vertex type specified) use\n\"key\": (primary_id, \"vertex_type\")\nFor\nSET<VERTEX<type>>\nuse\n\"key\": [primary_id1, primary_id2, \u2026\u200b]\nFor\nSET<VERTEX>\n(no vertex type specified) use\n\"key\": [(primary_id1, \"vertex_type1\"), (primary_id2, \"vertex_type2\"), \u2026\u200b]\nEndpoints:\nGET /query/{graph_name}/{query_name}\nSee\nRun an installed query (GET)\nPOST /query/{graph_name}/{query_name}\nSee\nRun an installed query (POST)\ncheckQueryStatus()\ncheckQueryStatus(requestId: str = \"\")\nChecks the status of the queries running on the graph specified in the connection.\nParameter:\nrequestId (str, optional)\n: String ID of the request. If empty, returns all running requests.\nSee\nCheck query status (detached mode)\nEndpoint:\nGET /query_status/{graph_name}\nSee\nCheck query status (detached mode)\ngetQueryResult()\ngetQueryResult(requestId: str = \"\")\nGets the result of a detached query.\nParameter:\nrequestId (str)\n: String ID of the request.\nSee\nCheck query results (detached mode)\nrunInterpretedQuery()\nrunInterpretedQuery(queryText: str, params: Union[str, dict] = None) \u2192 list\nRuns an interpreted query.\nUse\n$graphname\nor\n@graphname@\nin the\nFOR GRAPH\nclause to avoid hardcoding the\nname of the graph in your app. It will be replaced by the actual graph name.\nParameters:\nqueryText\n: The text of the GSQL query that must be provided in this format:\nINTERPRET QUERY (<params>) FOR GRAPH <graph_name> {\n<statements>\n}\nparams\n: A string of\nparam1=value1&param2=value2\u2026\u200b\nformat or a dictionary.\nSee below for special rules for dictionaries.\nReturns:\nThe output of the query, a list of output elements such as vertex sets, edge sets, variables and\naccumulators.\nNotes:\nWhen specifying parameter values in a dictionary:\nFor primitive parameter types use\n\"key\": value\nFor\nSET\nand\nBAG\nparameter types with primitive values, use\n\"key\": [value1, value2, \u2026\u200b]\nFor\nVERTEX<type>\nuse\n\"key\": primary_id\nFor\nVERTEX\n(no vertex type specified) use\n\"key\": (primary_id, \"vertex_type\")\nFor\nSET<VERTEX<type>>\nuse\n\"key\": [primary_id1, primary_id2, \u2026\u200b]\nFor\nSET<VERTEX>\n(no vertex type specified) use\n\"key\": [(primary_id1, \"vertex_type1\"), (primary_id2, \"vertex_type2\"), \u2026\u200b]\nEndpoint:\nPOST /gsqlserver/interpreted_query\nSee\nRun an interpreted query\ngetRunningQueries()\ngetRunningQueries() \u2192 dict\nReports the statistics of currently running queries on the graph.\nabortQuery()\nabortQuery(request_id: Union[str, list] = None, url: str = None)\nThis function safely abortsa a selected query by ID or all queries of an endpoint by endpoint URL of a graph.\nIf neither\nrequest_id\nor\nurl\nare specified, all queries currently running on the graph are aborted.\nParameters:\nrequest_id (str, list, optional)\n: The ID(s) of the query(s) to abort. If set to \"all\", it will abort all running queries.\nurl\nparseQueryOutput()\nparseQueryOutput(output: list, graphOnly: bool = True) \u2192 dict\nParses query output and separates vertex and edge data (and optionally other output) for\neasier use.\nParameters:\noutput\n: The data structure returned by\nrunInstalledQuery()\nor\nrunInterpretedQuery()\n.\ngraphOnly\n: If\nTrue\n(the default setting), restricts captured output to vertices and edges.\nIf\nFalse\n, captures values of variables and accumulators and any other plain text printed.\nReturns:\nA dictionary with two (or three) keys:\n\"vertices\"\n,\n\"edges\"\nand optionally\n\"output\"\n.\nThe first two refer to another dictionary containing keys for each vertex and edge types\nfound and the instances of those vertex and edge types.\n\"output\"\nis a list of\ndictionaries containing the key/value pairs of any other output.\nThe JSON output from a query can contain a mixture of results: vertex sets (the output of a\nSELECT statement), edge sets (e.g. collected in a global accumulator), printout of\nglobal and local variables and accumulators, including complex types (LIST, MAP, etc.).\nThe type of the various output entries is not explicit and requires manual inspection to determine the type.\nThis function \"cleans\" this output, separating and collecting vertices and edges in an easy\nto access way. It can also collect other output or ignore it.\nThe output of this function can be used e.g. with the\nvertexSetToDataFrame()\nand\nedgeSetToDataFrame()\nfunctions or (after some transformation) to pass a subgraph to a\nvisualization component.\ngetStatistics()\ngetStatistics(seconds: int = 10, segments: int = 10) \u2192 dict\nRetrieves real-time query performance statistics over the given time period.\nParameters:\nseconds\n: The duration of statistic collection period (the last\nn\nseconds before the function\ncall).\nsegments\n: The number of segments of the latency distribution (shown in results as\nLatencyPercentile\n). By default, segments is\n10\n, meaning the percentile range 0-100%\nwill be divided into ten equal segments: 0%-10%, 11%-20%, etc.\nThis argument must be an integer between 1 and 100.\nEndpoint:\nGET /statistics/{graph_name}\nSee\nShow query performance", "links": ["https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_checkquerystatus", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_run_an_installed_query_post", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/tigergraph-server/current/system-management/memory-management#_by_http_header", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_abortquery", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_getquerymetadata", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_getstatistics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_specify_thread_limit", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_runinstalledquery", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_getrunningqueries", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_getqueryresult", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_run_an_installed_query_get", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_check_query_results_detached_mode", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_check_query_status_detached_mode", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_show_query_performance", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/gsql-ref/current/querying/query-operations#_detached_mode_async_option", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_parsequeryoutput", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_runinterpretedquery", "https://docs.tigergraph.com/pytigergraph/1/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_getinstalledqueries", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_run_an_interpreted_query", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/tigergraph-server/current/API/#_gsql_query_timeout", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_showquery", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/tigergraph-server/current/API/#_response_size", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_specify_replica", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/query", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "content": "Vertex Functions\nFunctions to upsert, retrieve and delete vertices.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\ngetVertexTypes()\ngetVertexTypes(force: bool = False) \u2192 list\nReturns the list of vertex type names of the graph.\nParameter:\nforce\n: If\nTrue\n, forces the retrieval the schema metadata again, otherwise returns a\ncached copy of vertex type metadata (if they were already fetched previously).\nReturns:\nThe list of vertex types defined in the current graph.\ngetVertexAttrs()\ngetVertexAttrs(vertexType: str) \u2192 list\nReturns the names and types of the attributes of the vertex type.\nParameter:\nvertexType\n: The name of the vertex type.\nReturns:\nA list of (attribute_name, attribute_type) tuples.\nThe format of attribute_type is one of\n- \"scalar_type\"\n- \"complex_type(scalar_type)\"\n- \"map_type(key_type,value_type)\"\nand it is a string.\ngetVertexType()\ngetVertexType(vertexType: str, force: bool = False) \u2192 dict\nReturns the details of the specified vertex type.\nParameters:\nvertexType\n: The name of the vertex type.\nforce\n: If\nTrue\n, forces the retrieval the schema metadata again, otherwise returns a\ncached copy of vertex type details (if they were already fetched previously).\nReturns:\nThe metadata of the vertex type.\ngetVertexCount()\ngetVertexCount(vertexType: Union[str, list] = \"*\", where: str = \"\", realtime: bool = False) \u2192 Union[int, dict]\nReturns the number of vertices of the specified type.\nParameters:\nvertexType (Union[str, list], optional)\n: The name of the vertex type. If\nvertexType\n== \"*\", then count the instances of all\nvertex types (\nwhere\ncannot be specified in this case). Defaults to \"*\".\nwhere (str, optional)\n: A comma separated list of conditions that are all applied on each vertex\u2019s\nattributes. The conditions are in logical conjunction (i.e. they are \"AND\u2019ed\"\ntogether). Defaults to \"\".\nrealtime (bool, optional)\n: Whether to get the most up-to-date number by force. When there are frequent updates happening,\na slightly outdated number (up to 30 seconds delay) might be fetched. Set\nrealtime=True\nto\nforce the system to recount the vertices, which will get a more up-to-date result but will\nalso take more time. This parameter only works with TigerGraph DB 3.6 and above.\nDefaults to False.\nReturns:\nA dictionary of <vertex_type>: <vertex_count> pairs if\nvertexType\nis a list or \"*\".\nAn integer of vertex count if\nvertexType\nis a single vertex type.\nUses:\nIf\nvertexType\nis specified only: count of the instances of the given vertex type(s).\nIf\nvertexType\nand\nwhere\nare specified: count of the instances of the given vertex\ntype after being filtered by\nwhere\ncondition(s).\nRaises:\nTigerGraphException\nwhen \"*\" is specified as vertex type and a\nwhere\ncondition is\nprovided; or when invalid vertex type name is specified.\nEndpoints:\nGET /graph/{graph_name}/vertices\nSee\nList vertices\nPOST /builtins\nSee\nRun built-in functions\nupsertVertex()\nupsertVertex(vertexType: str, vertexId: str, attributes: dict = None) \u2192 int\nUpserts a vertex.\nData is upserted:\nIf vertex is not yet present in graph, it will be created.\nIf it\u2019s already in the graph, its attributes are updated with the values specified in\nthe request. An optional operator controls how the attributes are updated.\nParameters:\nvertexType\n: The name of the vertex type.\nvertexId\n: The primary ID of the vertex to be upserted.\nattributes\n: The attributes of the vertex to be upserted; a dictionary in this format:\n{<attribute_name>: <attribute_value>|(<attribute_name>, <operator>), \u2026}\nExample:\n{\"name\": \"Thorin\", points: (10, \"+\"), \"bestScore\": (67, \"max\")}\nFor valid values of\n<operator>\nsee\nOperation codes\n.\nReturns:\nA single number of accepted (successfully upserted) vertices (0 or 1).\nEndpoint:\nPOST /graph/{graph_name}\nSee\nUpsert data to graph\nupsertVertices()\nupsertVertices(vertexType: str, vertices: list) \u2192 int\nUpserts multiple vertices (of the same type).\nSee the description of\nupsertVertex\nfor generic information.\nParameters:\nvertexType\n: The name of the vertex type.\nvertices\n: A list of tuples in this format:\n[\n(<vertex_id>, {<attribute_name>: <attribute_value>, \u2026}),\n(<vertex_id>, {<attribute_name>: (<attribute_value>, <operator>), \u2026}),\n\u22ee\n]\n+\nExample:\n[\n(2, {\"name\": \"Balin\", \"points\": (10, \"+\"), \"bestScore\": (67, \"max\")}),\n(3, {\"name\": \"Dwalin\", \"points\": (7, \"+\"), \"bestScore\": (35, \"max\")})\n]\nFor valid values of\n<operator>\nsee\nOperation codes\n.\nReturns:\nA single number of accepted (successfully upserted) vertices (0 or positive integer).\nEndpoint:\nPOST /graph/{graph_name}\nSee\nUpsert data to graph\nupsertVertexDataFrame()\nupsertVertexDataFrame(df: pd.DataFrame, vertexType: str, v_id: bool = None, attributes: dict = None) \u2192 int\nUpserts vertices from a Pandas DataFrame.\nParameters:\ndf\n: The DataFrame to upsert.\nvertexType\n: The type of vertex to upsert data to.\nv_id\n: The field name where the vertex primary id is given. If omitted the dataframe index\nwould be used instead.\nattributes\n: A dictionary in the form of\n{target: source}\nwhere source is the column name in\nthe dataframe and target is the attribute name in the graph vertex. When omitted,\nall columns would be upserted with their current names. In this case column names\nmust match the vertex\u2019s attribute names.\nReturns:\nThe number of vertices upserted.\ngetVertices()\ngetVertices(vertexType: str, select: str = \"\", where: str = \"\", limit: Union[int, str] = None, sort: str = \"\", fmt: str = \"py\", withId: bool = True, withType: bool = False, timeout: int = 0) \u2192 Union[dict, str, pd.DataFrame]\nRetrieves vertices of the given vertex type.\nNote\n:\nThe primary ID of a vertex instance is NOT an attribute, thus cannot be used in\nselect\n,\nwhere\nor\nsort\nparameters (unless the\nWITH primary_id_as_attribute\nclause\nwas used when the vertex type was created).\nUse\ngetVerticesById()\nif you need to retrieve vertices by their primary ID.\nParameters:\nvertexType\n: The name of the vertex type.\nselect\n: Comma separated list of vertex attributes to be retrieved.\nwhere\n: Comma separated list of conditions that are all applied on each vertex' attributes.\nThe conditions are in logical conjunction (i.e. they are \"AND\u2019ed\" together).\nsort\n: Comma separated list of attributes the results should be sorted by.\nMust be used with\nlimit\n.\nlimit\n: Maximum number of vertex instances to be returned (after sorting).\nMust be used with\nsort\n.\nfmt\n: Format of the results:\n\"py\":   Python objects\n\"json\": JSON document\n\"df\":   pandas DataFrame\nwithId\n: (When the output format is \"df\") should the vertex ID be included in the dataframe?\nwithType\n: (When the output format is \"df\") should the vertex type be included in the dataframe?\ntimeout\n: Time allowed for successful execution (0 = no limit, default).\nReturns:\nThe (selected) details of the (matching) vertex instances (sorted, limited) as\ndictionary, JSON or pandas DataFrame.\nEndpoint:\nGET /graph/{graph_name}/vertices/{vertex_type}\nSee\nList vertices\ngetVertexDataFrame()\ngetVertexDataFrame(vertexType: str, select: str = \"\", where: str = \"\", limit: Union[int, str] = None, sort: str = \"\", timeout: int = 0) \u2192 pd.DataFrame\nRetrieves vertices of the given vertex type and returns them as pandas DataFrame.\nThis is a shortcut to\ngetVertices(\u2026\u200b, fmt=\"df\", withId=True, withType=False)\n.\nNote\n:\nThe primary ID of a vertex instance is NOT an attribute, thus cannot be used in\nselect\n,\nwhere\nor\nsort\nparameters (unless the\nWITH primary_id_as_attribute\nclause\nwas used when the vertex type was created).\nUse\ngetVerticesById()\nif you need to retrieve vertices by their primary ID.\nParameters:\nvertexType\n: The name of the vertex type.\nselect\n: Comma separated list of vertex attributes to be retrieved.\nwhere\n: Comma separated list of conditions that are all applied on each vertex' attributes.\nThe conditions are in logical conjunction (i.e. they are \"AND\u2019ed\" together).\nsort\n: Comma separated list of attributes the results should be sorted by.\nMust be used with 'limit'.\nlimit\n: Maximum number of vertex instances to be returned (after sorting).\nMust be used with\nsort\n.\ntimeout\n: Time allowed for successful execution (0 = no limit, default).\nReturns:\nThe (selected) details of the (matching) vertex instances (sorted, limited) as pandas\nDataFrame.\ngetVertexDataframe()\ngetVertexDataframe(vertexType: str, select: str = \"\", where: str = \"\", limit: Union[int, str] = None, sort: str = \"\", timeout: int = 0) \u2192 pd.DataFrame\nDEPRECATED\nUse\ngetVertexDataFrame()\ninstead.\ngetVerticesById()\ngetVerticesById(vertexType: str, vertexIds: Union[int, str, list], select: str = \"\", fmt: str = \"py\", withId: bool = True, withType: bool = False, timeout: int = 0) \u2192 Union[list, str, pd.DataFrame]\nRetrieves vertices of the given vertex type, identified by their ID.\nParameters:\nvertexType\n: The name of the vertex type.\nvertexIds\n: A single vertex ID or a list of vertex IDs.\nselect\n: Comma separated list of vertex attributes to be retrieved.\nfmt\n: Format of the results:\n\"py\":   Python objects (in a list)\n\"json\": JSON document\n\"df\":   pandas DataFrame\nwithId\n: (If the output format is \"df\") should the vertex ID be included in the dataframe?\nwithType\n: (If the output format is \"df\") should the vertex type be included in the dataframe?\ntimeout\n: Time allowed for successful execution (0 = no limit, default).\nReturns:\nThe (selected) details of the (matching) vertex instances as dictionary, JSON or pandas\nDataFrame.\nEndpoint:\nGET /graph/{graph_name}/vertices/{vertex_type}/{vertex_id}\nSee\nRetrieve a vertex\ngetVertexDataFrameById()\ngetVertexDataFrameById(vertexType: str, vertexIds: Union[int, str, list], select: str = \"\") \u2192 pd.DataFrame\nRetrieves vertices of the given vertex type, identified by their ID.\nThis is a shortcut to\ngetVerticesById(\u2026\u200b, fmt=\"df\", withId=True, withType=False)\n.\nParameters:\nvertexType\n: The name of the vertex type.\nvertexIds\n: A single vertex ID or a list of vertex IDs.\nselect\n: Comma separated list of vertex attributes to be retrieved.\nReturns:\nThe (selected) details of the (matching) vertex instances as pandas DataFrame.\ngetVertexDataframeById()\ngetVertexDataframeById(vertexType: str, vertexIds: Union[int, str, list], select: str = \"\") \u2192 pd.DataFrame\nDEPRECATED\nUse\ngetVertexDataFrameById()\ninstead.\ngetVertexStats()\ngetVertexStats(vertexTypes: Union[str, list], skipNA: bool = False) \u2192 dict\nReturns vertex attribute statistics.\nParameters:\nvertexTypes\n: A single vertex type name or a list of vertex types names or \"*\" for all vertex\ntypes.\nskipNA\n: Skip those non-applicable vertices that do not have attributes or none of their\nattributes have statistics gathered.\nReturns:\nA dictionary of various vertex stats for each vertex type specified.\nEndpoint:\nPOST /builtins/{graph_name}\nSee\nRun built-in functions\ndelVertices()\ndelVertices(vertexType: str, where: str = \"\", limit: str = \"\", sort: str = \"\", permanent: bool = False, timeout: int = 0) \u2192 int\nDeletes vertices from graph.\nNote\n:\nThe primary ID of a vertex instance is not an attribute. A primary ID cannot be used in\nselect\n,\nwhere\nor\nsort\nparameters (unless the\nWITH primary_id_as_attribute\nclause\nwas used when the vertex type was created).\nUse\ndelVerticesById()\nif you need to retrieve vertices by their primary ID.\nParameters:\nvertexType\n: The name of the vertex type.\nwhere\n: Comma separated list of conditions that are all applied on each vertex' attributes.\nThe conditions are in logical conjunction (i.e. they are \"AND\u2019ed\" together).\nsort\n: Comma separated list of attributes the results should be sorted by.\nMust be used with\nlimit\n.\nlimit\n: Maximum number of vertex instances to be returned (after sorting).\nMust be used with\nsort\n.\npermanent\n: If true, the deleted vertex IDs can never be inserted back, unless the graph is\ndropped or the graph store is cleared.\ntimeout:\nTime allowed for successful execution (0 = no limit, default).\nReturns:\nA single number of vertices deleted.\nThe primary ID of a vertex instance is NOT an attribute, thus cannot be used in above\narguments.\nEndpoint:\nDELETE /graph/{graph_name}/vertices/{vertex_type}\nSee\nDelete vertices\ndelVerticesById()\ndelVerticesById(vertexType: str, vertexIds: Union[int, str, list], permanent: bool = False, timeout: int = 0) \u2192 int\nDeletes vertices from graph identified by their ID.\nParameters:\nvertexType\n: The name of the vertex type.\nvertexIds\n: A single vertex ID or a list of vertex IDs.\npermanent\n: If true, the deleted vertex IDs can never be inserted back, unless the graph is\ndropped or the graph store is cleared.\ntimeout\n: Time allowed for successful execution (0 = no limit, default).\nReturns:\nA single number of vertices deleted.\nEndpoint:\nDELETE /graph/{graph_name}/vertices/{vertex_type}/{vertex_id}\nSee\nDelete a vertex\nvertexSetToDataFrame()\nvertexSetToDataFrame(vertexSet: list, withId: bool = True, withType: bool = False) \u2192 pd.DataFrame\nConverts a vertex set to Pandas DataFrame.\nVertex sets are used for both the input and output of\nSELECT\nstatements. They contain\ninstances of vertices of the same type.\nFor each vertex instance, the vertex ID, the vertex type and the (optional) attributes are\npresent under the\nv_id\n,\nv_type\nand\nattributes\nkeys, respectively.\nSee an example in\nedgeSetToDataFrame()\n.\nA vertex set has this structure (when serialised as JSON):\n[\n{\n\"v_id\": <vertex_id>,\n\"v_type\": <vertex_type_name>,\n\"attributes\":\n{\n\"attr1\": <value1>,\n\"attr2\": <value2>,\n\u22ee\n}\n},\n\u22ee\n]\nFor more information on vertex sets see\nVertex set variables\n.\nParameters:\nvertexSet\n: A JSON array containing a vertex set in the format returned by queries (see below).\nwithId\n: Whether to include vertex primary ID as a column.\nwithType\n: Whether to include vertex type info as a column.\nReturns:\nA pandas DataFrame containing the vertex attributes (and optionally the vertex primary\nID and type).", "links": ["https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertexattrs", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertexcount", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_delvertices", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertextypes", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_upsertvertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertices", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertexdataframebyid_2", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertexdataframebyid", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/vertex", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_delete_vertices", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getverticesbyid", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_retrieve_a_vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertexdataframe", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_upsertvertices", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertextype", "https://docs.tigergraph.com/pytigergraph/1/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertexstats", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/gsql-ref/current/querying/declaration-and-assignment-statements#_vertex_set_variables", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_getvertexdataframe_2", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_upsertvertexdataframe", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_list_vertices", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_upsert_data_to_graph", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_operation_codes", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_vertexsettodataframe", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex#_delverticesbyid", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_delete_a_vertex", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_run_built_in_functions_on_graph", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "content": "Schema Functions\nThe functions in this page retrieve information about the graph schema.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\ngetSchema()\ngetSchema(udts: bool = True, force: bool = False) \u2192 dict\nRetrieves the schema metadata (of all vertex and edge type and, if not disabled, the\nUser-Defined Type details) of the graph.\nParameters:\nudts\n: If\nTrue\n, the output includes User-Defined Types in the schema details.\nforce\n: If\nTrue\n, retrieves the schema metadata again, otherwise returns a cached copy of\nthe schema metadata (if they were already fetched previously).\nReturns:\nThe schema metadata.\nEndpoint:\nGET /gsqlserver/gsql/schema\nSee\nShow graph schema metadata\nupsertData()\nupsertData(data: Union[str, object], atomic: bool = False, ackAll: bool = False, newVertexOnly: bool = False, vertexMustExist: bool = False, updateVertexOnly: bool = False) \u2192 dict\nUpserts data (vertices and edges) from a JSON file or a file with equivalent object structure.\nParameters:\ndata\n: The data of vertex and edge instances, in a specific format.\natomic\n: The request is an atomic transaction. An atomic transaction means that updates to\nthe database contained in the request are all-or-nothing: either all changes are\nsuccessful, or none are successful.\nackAll\n: If\nTrue\n, the request will return after all GPE instances have acknowledged the\nPOST. Otherwise, the request will return immediately after RESTPP processes the POST.\nnewVertexOnly\n: If\nTrue\n, the request will only insert new vertices and not update existing ones.\nvertexMustExist\n: If\nTrue\n, the request will only insert an edge if both the\nFROM\nand\nTO\nvertices\nof the edge already exist. If the value is\nFalse\n, the request will always insert new\nedges and create the necessary vertices with default values for their attributes.\nNote that this parameter does not affect vertices.\nupdateVertexOnly\n: If\nTrue\n, the request will only update existing vertices and not insert new\nvertices.\nReturns:\nThe result of upsert (number of vertices and edges accepted/upserted).\nEndpoint:\nPOST /graph/{graph_name}\nSee\nUpsert data to graph\ngetEndpoints()\ngetEndpoints(builtin: bool = False, dynamic: bool = False, static: bool = False) \u2192 dict\nLists the REST++ endpoints and their parameters.\nParameters:\nbuiltin\n: List the TigerGraph-provided REST++ endpoints.\ndynamic\n: List endpoints for user-installed queries.\nstatic\n: List static endpoints.\nIf none of the above arguments are specified, all endpoints are listed.\nEndpoint:\nGET /endpoints/{graph_name}\nSee\nList all endpoints", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/schema", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_show_graph_schema_metadata", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_upsert_data_to_graph", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_list_all_endpoints", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/schema", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema#_getschema", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema#_getendpoints", "https://docs.tigergraph.com/pytigergraph/1/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema#_upsertdata", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/schema", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "content": "Datasets Object\nStock datasets that can be ingested into a TigerGraph database through the\ningestDataset\nfunction in pyTigerGraph.\n_init_\n()\ninit\n(name: str = None, tmp_dir: str = \"./tmp\") \u2192 None\nStock datasets.\nPlease see\nthis link\nfor datasets that are currently available. The files for the dataset with\nname\nwill be\ndownloaded to local\ntmp_dir\nautomatically when this class is instantiated.\nParameters:\nname\n(str, optional):\nName of the dataset to get. Defaults to\nNone\n.\ntmp_dir\n(str, optional):\nWhere to store the artifacts of this dataset. Defaults to\n\"./tmp\"\n.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object#_init", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/1.3/datasets/datasets_object", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/1.2/datasets/datasets_object", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.4/datasets/datasets_object", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "content": "Factory Functions\nFactory Functions are a special collection of functions that return an instance of a class.\nAll factory functions are methods of the\nGDS\nclass.\nYou can call a factory function after instantiating a TigerGraph Connection.\nFor example:\nconn = TigerGraphConnection(\n    host=\"http://127.0.0.1\",\n    graphname=\"Cora\",\n    username=\"tigergraph\",\n    password=\"tigergraph\",\n)\nedge_loader = conn.gds.edgeLoader(\n    num_batches=1,\n    attributes=[\"time\", \"is_train\"])\nThe object returned has access to instance methods of the class.\nYou can find the reference for those classes on the following pages:\nData loaders\nFeaturizer\nMetrics\nSplitters\nconfigureKafka()\nconfigureKafka(kafka_address: str = None, kafka_max_msg_size: int = 104857600, kafka_num_partitions: int = 1, kafka_replica_factor: int = 1, kafka_retention_ms: int = 60000, kafka_auto_del_topic: bool = None, kafka_address_consumer: str = None, kafka_address_producer: str = None, kafka_security_protocol: str = \"PLAINTEXT\", kafka_sasl_mechanism: str = None, kafka_sasl_plain_username: str = None, kafka_sasl_plain_password: str = None, kafka_sasl_kerberos_service_name: str = None, kafka_sasl_kerberos_keytab: str = None, kafka_sasl_kerberos_principal: str = None, kafka_sasl_kerberos_domain_name: str = None, kafka_ssl_check_hostname: bool = None, kafka_producer_ca_location: str = None, kafka_producer_certificate_location: str = None, kafka_producer_key_location: str = None, kafka_producer_key_password: str = None, kafka_consumer_ca_location: str = None, kafka_consumer_certificate_location: str = None, kafka_consumer_key_location: str = None, kafka_consumer_key_password: str = None, kafka_skip_produce: bool = False, kafka_auto_offset_reset: str = \"earliest\", kafka_del_topic_per_epoch: bool = False, kafka_add_topic_per_epoch: bool = False, kafka_group_id: str = None, kafka_topic: str = None) \u2192 None\nConfigure the Kafka connection.\nParameters:\nkafka_address (str, optional)\n: Address of the Kafka broker. Defaults to None.\nkafka_max_msg_size (int, optional)\n: Maximum size of a Kafka message in bytes.\nDefaults to 104857600.\nkafka_num_partitions (int, optional)\n: Number of partitions for the topic created by this loader.\nDefaults to 1.\nkafka_replica_factor (int, optional)\n: Number of replications for the topic created by this\nloader. Defaults to 1.\nkafka_retention_ms (int, optional)\n: Retention time for messages in the topic created by this\nloader in milliseconds. Defaults to 60000.\nkafka_auto_del_topic (bool, optional)\n: Whether to delete the Kafka topics created by this loader when\nit is destroyed. Defaults to True.\nkafka_address_consumer (str, optional)\n: Address of the Kafka broker that a consumer\nshould use. Defaults to be the same as\nkafkaAddress\n.\nkafka_address_producer (str, optional)\n: Address of the Kafka broker that a producer\nshould use. Defaults to be the same as\nkafkaAddress\n.\nkafka_security_protocol (str, optional)\n: Security prototol for Kafka. Defaults to None.\nkafka_sasl_mechanism (str, optional)\n: Authentication mechanism for Kafka. Defaults to None.\nkafka_sasl_plain_username (str, optional)\n: SASL username for Kafka. Defaults to None.\nkafka_sasl_plain_password (str, optional)\n: SASL password for Kafka. Defaults to None.\nkafka_sasl_kerberos_service_name (str, optional)\n: Kerberos principal name that Kafka runs as. Defaults to None.\nkafka_sasl_kerberos_keytab (str, optional)\n: Path to Kerberos keytab file. Defaults to None.\nkafka_sasl_kerberos_principal (str, optional)\n: This client\u2019s Kerberos principal name. Defaults to None.\nkafka_sasl_kerberos_domain_name (str, optional)\n: Kerberos domain name to use in GSSAPI mechanism handshake. Defaults to None.\nkafka_ssl_check_hostname (bool, optional):\nWhether SSL handshake should verify that the certificate matches\nthe brokers hostname. Defaults to None,\nkafka_producer_ca_location (str, optional)\n: Path to CA certificate on TigerGraph DB server for verifying the broker.\nkafka_producer_certificate_location (str, optional)\n: Path to client\u2019s certificate (PEM) on TigerGraph DB server used for authentication.\nkafka_producer_key_location (str, optional)\n: Path to client\u2019s private key (PEM) on TigerGraph DB server used for authentication.\nkafka_producer_key_password (str, optional)\n: Private key passphrase for use with\nkafka_producer_key_location\n.\nkafka_consumer_ca_location (str, optional)\n: Path to CA certificate on client machine for verifying the broker.\nkafka_consumer_certificate_location (str, optional)\n: Path to client\u2019s certificate (PEM) used for authentication.\nkafka_consumer_key_location (str, optional)\n: Path to client\u2019s private key (PEM) used for authentication.\nkafka_consumer_key_password (str, optional)\n: Private key passphrase for use with\nkafka_consumer_key_password\n.\nkafka_skip_produce (bool, optional)\n: Whether or not to skip calling the producer. Defaults to False.\nkafka_auto_offset_reset (str, optional)\n: Where to start for a new consumer. \"earliest\" will move to the oldest available message,\n\"latest\" will move to the most recent. Any other value will raise the exception.\nDefaults to \"earliest\".\nkafka_del_topic_per_epoch (bool, optional):\nWhether to delete the topic after each epoch. It is effective only when\nkafka_add_topic_per_epoch\nis True. Defaults to False.\nkafka_add_topic_per_epoch (bool, optional):\nWhether to add a topic for each epoch. Defaults to False.\nkafka_group_id (str, optional)\n: Consumer group ID if joining a consumer group for dynamic partition assignment and offset commits. Defaults to None.\nkafka_topic (str, optional)\n: Name of the Kafka topic to stream data with.\nneighborLoader()\nneighborLoader(v_in_feats: Union[list, dict] = None, v_out_labels: Union[list, dict] = None, v_extra_feats: Union[list, dict] = None, v_seed_types: Union[str, list] = None, e_in_feats: Union[list, dict] = None, e_out_labels: Union[list, dict] = None, e_extra_feats: Union[list, dict] = None, batch_size: int = None, num_batches: int = 1, num_neighbors: int = 10, num_hops: int = 2, shuffle: bool = False, filter_by: str = None, output_format: str = \"PyG\", add_self_loop: bool = False, loader_id: str = None, buffer_size: int = 4, reverse_edge: bool = False, delimiter: str = \"|\", timeout: int = 300000, callback_fn: Callable = None, reinstall_query: bool = False, distributed_query: bool = False) \u2192 NeighborLoader\nReturns a\nNeighborLoader\ninstance.\nA\nNeighborLoader\ninstance performs neighbor sampling from vertices in the graph in batches in the following manner:\nIt chooses a specified number (\nbatch_size\n) of vertices as seeds.\nThe number of batches is the total number of vertices divided by the batch size.\nIf you specify the number of batches (\nnum_batches\n) instead,\nbatch_size\nis calculated by dividing the total number of vertices by the number of batches.\nIf specify both parameters,\nbatch_size\ntakes priority.\nIt picks a specified number (\nnum_neighbors\n) of neighbors of each seed at random.\nIt picks the same number of neighbors for each neighbor, and repeats this process until it finished performing a specified number of hops (\nnum_hops\n).\nThis generates one subgraph.\nAs you loop through this data loader, every vertex will at some point be chosen as a seed and you will get the subgraph\nexpanded from the seeds.\nIf you want to limit seeds to certain vertices, the boolean\nattribute provided to\nfilter_by\nwill be used to indicate which vertices can be\nincluded as seeds.\nIf you want to load from certain types of vertices and edges,\nuse the\ndict\ninput for\nv_in_feats\n,\nv_out_labels\n,\nv_extra_feats\n,\ne_in_feats\n,\ne_out_labels\n,\ne_extra_feats\nwhere keys of the dict are vertex\nor edge types to be selected and values are lists of attributes to collect from the\nvertex or edge types.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nSee\nthe ML Workbench tutorial notebook\nfor examples.\nParameters:\nv_in_feats (list or dict, optional)\n: Vertex attributes to be used as input features.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\nv_out_labels (list or dict, optional)\n: Vertex attributes to be used as labels for prediction.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nOnly numeric and boolean attributes are allowed. Defaults to None.\nv_extra_feats (list or dict, optional)\n: Other attributes to get such as indicators of train/test data.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nNumeric, boolean and string attributes are allowed. Defaults to None.\nv_seed_types (str or list, optional)\n: Directly specify the vertex types to use as seeds. If not specified, defaults to\nthe vertex types used in filter_by. If not specified there, uses all vertex types.\nDefaults to None.\ne_in_feats (list or dict, optional)\n: Edge attributes to be used as input features.\nIf it is a list, then the attributes\nin the list from all edge types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all edge types. If it is a dict, keys of the\ndict are edge types to be selected, and values are lists of attributes to be\nselected for each edge type.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\ne_out_labels (list or dict, optional)\n: Edge attributes to be used as labels for prediction.\nIf it is a list, then the attributes in the list from all edge types will be\nselected. An error will be thrown if certain attribute doesn\u2019t exist in all\nedge types. If it is a dict, keys of the dict are edge types to be selected,\nand values are lists of attributes to be selected for each edge type.\nOnly numeric and boolean attributes are allowed. Defaults to None.\ne_extra_feats (list or dict, optional)\n: Other edge attributes to get such as indicators of train/test data.\nIf it is a list, then the attributes in the list from all edge types will be\nselected. An error will be thrown if certain attribute doesn\u2019t exist in all\nedge types. If it is a dict, keys of the dict are edge types to be selected,\nand values are lists of attributes to be selected for each edge type.\nNumeric, boolean and string attributes are allowed. Defaults to None.\nbatch_size (int, optional)\n: Number of vertices as seeds in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the vertices into as seeds.\nIf both\nbatch_size\nand\nnum_batches\nare provided,\nbatch_size\ntakes higher\npriority. Defaults to 1.\nnum_neighbors (int, optional)\n: Number of neighbors to sample for each vertex.\nDefaults to 10.\nnum_hops (int, optional)\n: Number of hops to traverse when sampling neighbors.\nDefaults to 2.\nshuffle (bool, optional)\n: Whether to shuffle the vertices before loading data.\nDefaults to False.\nfilter_by (str, dict, list, optional)\n: Denotes the name of a boolean attribute used to indicate which vertices\ncan be included as seeds. If a dictionary is provided, must be in the form of:\n{\"vertex_type\": \"attribute\"}. If a list, must contain multiple filters and an\nunique loader will be returned for each list element. Defaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader. Only\n\"PyG\", \"DGL\", \"spektral\", and \"dataframe\" are supported. Defaults to \"PyG\".\nadd_self_loop (bool, optional)\n: Whether to add self-loops to the graph. Defaults to False.\ndelimiter (str, optional)\n: What character (or combination of characters) to use to separate attributes as batches are being created.\nDefaults to \"|\".\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name if Kafka topic is not given. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nreverse_edge (bool, optional)\n: Whether to traverse along reverse edge types. Defaults to False.\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\ncallback_fn (callable, optional)\n: A callable function to apply to each batch in the dataloader. Defaults to None.\nreinstall_query (bool, optional)\n: Whether to reinstall the queries associated with this loader at instantiation. One can also call the member function\nreinstall_query()\non a loader instance to reinstall the queries at any time.\nDefaults to False.\ndistributed_query (bool, optional)\n: Whether to install the query in distributed mode. Defaults to False.\nedgeLoader()\nedgeLoader(attributes: Union[list, dict] = None, batch_size: int = None, num_batches: int = 1, shuffle: bool = False, filter_by: str = None, output_format: str = \"dataframe\", loader_id: str = None, buffer_size: int = 4, reverse_edge: bool = False, delimiter: str = \"|\", timeout: int = 300000, callback_fn: Callable = None, reinstall_query: bool = False, distributed_query: bool = False) \u2192 EdgeLoader\nReturns an\nEdgeLoader\ninstance.\nAn\nEdgeLoader\ninstance loads all edges in the graph in batches.\nIt divides all edges into\nnum_batches\nand returns each batch separately.\nYou can also specify the size of each batch, and the number of batches is calculated accordingly.\nIf you provide both parameters,\nbatch_size\ntake priority.\nThe boolean attribute provided to\nfilter_by\nindicates which edges are included.\nIf you want to load from certain types of edges,\nuse the\ndict\ninput for\nattributes\nwhere keys of the dict are edge types to be\nselected and values are lists of attributes to collect from the edge types.\nIf you need random batches, set\nshuffle\nto True.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nThere are two ways to use the data loader.\nIt can be used as an iterable, which means you can loop through\nit to get every batch of data. If you load all edges at once (\nnum_batches=1\n),\nthere will be only one batch (of all the edges) in the iterator.\nYou can access the\ndata\nproperty of the class directly. If there is\nonly one batch of data to load, it will give you the batch directly instead\nof an iterator. If there are\nmultiple batches of data to load, it returns the loader itself.\nParameters:\nattributes (list or dict, optional)\n: Edge attributes to be included. If it is a list, then the attributes\nin the list from all edge types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all edge types. If it is a dict, keys of the\ndict are edge types to be selected, and values are lists of attributes to be\nselected for each edge type. Numeric, boolean and string attributes are allowed.\nDefaults to None.\nbatch_size (int, optional)\n: Number of edges in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the edges.\nDefaults to 1.\nshuffle (bool, optional)\n: Whether to shuffle the edges before loading data.\nDefaults to False.\nfilter_by (str, dict, list, optional)\n: Denotes the name of a boolean attribute used to indicate which vertices\ncan be included as seeds. If a dictionary is provided, must be in the form of:\n{\"vertex_type\": \"attribute\"}. If a list, must contain multiple filters and an\nunique loader will be returned for each list element. Defaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader. Only\n\"dataframe\" is supported. Defaults to \"dataframe\".\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name if Kafka topic is not given. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nreverse_edge (bool, optional)\n: Whether to traverse along reverse edge types. Defaults to False.\ndelimiter (str, optional)\n: What character (or combination of characters) to use to separate attributes as batches are being created.\nDefaults to \"|\".\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\ncallback_fn (callable, optional)\n: A callable function to apply to each batch in the dataloader. Defaults to None.\nreinstall_query (bool, optional)\n: Whether to reinstall the queries associated with this loader at instantiation. One can also call the member function\nreinstall_query()\non a loader instance to reinstall the queries at any time.\nDefaults to False.\ndistributed_query (bool, optional)\n: Whether to install the query in distributed mode. Defaults to False.\nSee\nthe ML Workbench edge loader tutorial notebook\nfor examples.\nvertexLoader()\nvertexLoader(attributes: Union[list, dict] = None, batch_size: int = None, num_batches: int = 1, shuffle: bool = False, filter_by: str = None, output_format: str = \"dataframe\", loader_id: str = None, buffer_size: int = 4, reverse_edge: bool = False, delimiter: str = \"|\", timeout: int = 300000, callback_fn: Callable = None, reinstall_query: bool = False, distributed_query: bool = False) \u2192 VertexLoader\nReturns a\nVertexLoader\ninstance.\nA\nVertexLoader\ncan load all vertices of a graph in batches.\nIt divides vertices into\nnum_batches\nand returns each batch separately.\nThe boolean attribute provided to\nfilter_by\nindicates which vertices are included.\nIf you want to load from certain types of vertices,\nuse the\ndict\ninput for\nattributes\nwhere keys of the dict are vertex\ntypes to be selected and values are lists of attributes to collect from the\nvertex types.\nIf you need random batches, set\nshuffle\nto True.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nThere are two ways to use the data loader:\nIt can be used as an iterable, which means you can loop through\nit to get every batch of data. If you load all vertices at once (\nnum_batches=1\n),\nthere will be only one batch (of all the vertices) in the iterator.\nYou can access the\ndata\nproperty of the class directly. If there is\nonly one batch of data to load, it will give you the batch directly instead\nof an iterator, which might make more sense in that case. If there are\nmultiple batches of data to load, it will return the loader again.\nParameters:\nattributes (list or dict, optional)\n: Vertex attributes to be included. If it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type. Numeric, boolean and string attributes are allowed.\nDefaults to None.\nbatch_size (int, optional)\n: Number of vertices in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the vertices.\nDefaults to 1.\nshuffle (bool, optional)\n: Whether to shuffle the vertices before loading data.\nDefaults to False.\nfilter_by (str, dict, list, optional)\n: Denotes the name of a boolean attribute used to indicate which vertices\ncan be included as seeds. If a dictionary is provided, must be in the form of:\n{\"vertex_type\": \"attribute\"}. If a list, must contain multiple filters and an\nunique loader will be returned for each list element. Defaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader. Only\n\"dataframe\" is supported. Defaults to \"dataframe\".\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nreverse_edge (bool, optional)\n: Whether to traverse along reverse edge types. Defaults to False.\ndelimiter (str, optional)\n: What character (or combination of characters) to use to separate attributes as batches are being created.\nDefaults to \"|\".\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\ncallback_fn (callable, optional)\n: A callable function to apply to each batch in the dataloader. Defaults to None.\nreinstall_query (bool, optional)\n: Whether to reinstall the queries associated with this loader at instantiation. One can also call the member function\nreinstall_query()\non a loader instance to reinstall the queries at any time.\nDefaults to False.\ndistributed_query (bool, optional)\n: Whether to install the query in distributed mode. Defaults to False.\nSee\nthe ML Workbench tutorial notebook\nfor examples.\ngraphLoader()\ngraphLoader(v_in_feats: Union[list, dict] = None, v_out_labels: Union[list, dict] = None, v_extra_feats: Union[list, dict] = None, e_in_feats: Union[list, dict] = None, e_out_labels: Union[list, dict] = None, e_extra_feats: Union[list, dict] = None, batch_size: int = None, num_batches: int = 1, shuffle: bool = False, filter_by: str = None, output_format: str = \"PyG\", add_self_loop: bool = False, loader_id: str = None, buffer_size: int = 4, reverse_edge: bool = False, delimiter: str = \"|\", timeout: int = 300000, callback_fn: Callable = None, reinstall_query: bool = False, distributed_query: bool = False) \u2192 GraphLoader\nReturns a\nGraphLoader`instance.\nA `GraphLoader\ninstance loads all edges from the graph in batches, along with the vertices that are connected with each edge.\nDifferent from NeighborLoader which produces connected subgraphs, this loader\ngenerates (random) batches of edges and vertices attached to those edges.\nIf you want to load from certain types of vertices and edges,\nuse the\ndict\ninput for\nv_in_feats\n,\nv_out_labels\n,\nv_extra_feats\n,\ne_in_feats\n,\ne_out_labels\n,\ne_extra_feats\nwhere keys of the dict are vertex\nor edge types to be selected and values are lists of attributes to collect from the\nvertex or edge types.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nThere are two ways to use the data loader:\nIt can be used as an iterable, which means you can loop through\nit to get every batch of data. If you load all data at once (\nnum_batches=1\n),\nthere will be only one batch (of all the data) in the iterator.\nYou can access the\ndata\nproperty of the class directly. If there is\nonly one batch of data to load, it will give you the batch directly instead\nof an iterator, which might make more sense in that case. If there are\nmultiple batches of data to load, it will return the loader itself.\nParameters:\nv_in_feats (list or dict, optional)\n: Vertex attributes to be used as input features.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\nv_out_labels (list or dict, optional)\n: Vertex attributes to be used as labels for prediction.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nOnly numeric and boolean attributes are allowed. Defaults to None.\nv_extra_feats (list or dict, optional)\n: Other attributes to get such as indicators of train/test data.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nNumeric, boolean and string attributes are allowed. Defaults to None.\ne_in_feats (list or dict, optional)\n: Edge attributes to be used as input features.\nIf it is a list, then the attributes\nin the list from all edge types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all edge types. If it is a dict, keys of the\ndict are edge types to be selected, and values are lists of attributes to be\nselected for each edge type.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\ne_out_labels (list or dict, optional)\n: Edge attributes to be used as labels for prediction.\nIf it is a list, then the attributes in the list from all edge types will be\nselected. An error will be thrown if certain attribute doesn\u2019t exist in all\nedge types. If it is a dict, keys of the dict are edge types to be selected,\nand values are lists of attributes to be selected for each edge type.\nOnly numeric and boolean attributes are allowed. Defaults to None.\ne_extra_feats (list or dict, optional)\n: Other edge attributes to get such as indicators of train/test data.\nIf it is a list, then the attributes in the list from all edge types will be\nselected. An error will be thrown if certain attribute doesn\u2019t exist in all\nedge types. If it is a dict, keys of the dict are edge types to be selected,\nand values are lists of attributes to be selected for each edge type.\nNumeric, boolean and string attributes are allowed. Defaults to None.\nbatch_size (int, optional)\n: Number of edges in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the edges.\nDefaults to 1.\nshuffle (bool, optional)\n: Whether to shuffle the data before loading.\nDefaults to False.\nfilter_by (str, dict, list, optional)\n: Denotes the name of a boolean attribute used to indicate which vertices\ncan be included as seeds. If a dictionary is provided, must be in the form of:\n{\"vertex_type\": \"attribute\"}. If a list, must contain multiple filters and an\nunique loader will be returned for each list element. Defaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader.\nOnly \"PyG\", \"DGL\", \"spektral\", and \"dataframe\" are supported. Defaults to \"PyG\".\nadd_self_loop (bool, optional)\n: Whether to add self-loops to the graph. Defaults to False.\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name if Kafka topic is not given. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nreverse_edge (bool, optional)\n: Whether to traverse along reverse edge types. Defaults to False.\ndelimiter (str, optional)\n: What character (or combination of characters) to use to separate attributes as batches are being created.\nDefaults to \"|\".\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\ncallback_fn (callable, optional)\n: A callable function to apply to each batch in the dataloader. Defaults to None.\nreinstall_query (bool, optional)\n: Whether to reinstall the queries associated with this loader at instantiation. One can also call the member function\nreinstall_query()\non a loader instance to reinstall the queries at any time.\nDefaults to False.\ndistributed_query (bool, optional)\n: Whether to install the query in distributed mode. Defaults to False.\nSee\nthe ML Workbench tutorial notebook for graph loaders\nfor examples.\nedgeNeighborLoader()\nedgeNeighborLoader(v_in_feats: Union[list, dict] = None, v_out_labels: Union[list, dict] = None, v_extra_feats: Union[list, dict] = None, e_in_feats: Union[list, dict] = None, e_out_labels: Union[list, dict] = None, e_extra_feats: Union[list, dict] = None, e_seed_types: Union[str, list] = None, batch_size: int = None, num_batches: int = 1, num_neighbors: int = 10, num_hops: int = 2, shuffle: bool = False, filter_by: str = None, output_format: str = \"PyG\", add_self_loop: bool = False, loader_id: str = None, buffer_size: int = 4, reverse_edge: bool = False, delimiter: str = \"|\", timeout: int = 300000, callback_fn: Callable = None, reinstall_query: bool = False, distributed_query: bool = False) \u2192 EdgeNeighborLoader\nReturns an\nEdgeNeighborLoader\ninstance.\nAn\nEdgeNeighborLoader\ninstance performs neighbor sampling from all edges in the graph in batches in the following manner:\nIt chooses a specified number (\nbatch_size\n) of edges as seeds.\nThe number of batches is the total number of edges divided by the batch size.\nIf you specify the number of batches (\nnum_batches\n) instead,\nbatch_size\nis calculated by dividing the total number of vertices by the number of batches.\nIf specify both parameters,\nbatch_size\ntakes priority.\nStarting from the vertices attached to the seed edges, it picks a specified number (\nnum_neighbors\n) of neighbors of each vertex at random.\nIt picks the same number of neighbors for each neighbor, and repeats this process until it finished performing a specified number of hops (\nnum_hops\n).\nThis generates one subgraph.\nAs you loop through this data loader, every edge will at some point be chosen as a seed and you will get the subgraph\nexpanded from the seeds.\nIf you want to limit seeds to certain edges, the boolean\nattribute provided to\nfilter_by\nwill be used to indicate which edges can be\nincluded as seeds.\nIf you want to load from certain types of vertices and edges,\nuse the\ndict\ninput for\nv_in_feats\n,\nv_out_labels\n,\nv_extra_feats\n,\ne_in_feats\n,\ne_out_labels\n,\ne_extra_feats\nwhere keys of the dict are vertex\nor edge types to be selected and values are lists of attributes to collect from the\nvertex or edge types.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nSee\nthe ML Workbench tutorial notebook\nfor examples.\nParameters:\nv_in_feats (list or dict, optional)\n: Vertex attributes to be used as input features.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\nv_out_labels (list or dict, optional)\n: Vertex attributes to be used as labels for prediction.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nOnly numeric and boolean attributes are allowed. Defaults to None.\nv_extra_feats (list or dict, optional)\n: Other attributes to get such as indicators of train/test data.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nNumeric, boolean and string attributes are allowed. Defaults to None.\ne_in_feats (list or dict, optional)\n: Edge attributes to be used as input features.\nIf it is a list, then the attributes\nin the list from all edge types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all edge types. If it is a dict, keys of the\ndict are edge types to be selected, and values are lists of attributes to be\nselected for each edge type.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\ne_out_labels (list or dict, optional)\n: Edge attributes to be used as labels for prediction.\nIf it is a list, then the attributes in the list from all edge types will be\nselected. An error will be thrown if certain attribute doesn\u2019t exist in all\nedge types. If it is a dict, keys of the dict are edge types to be selected,\nand values are lists of attributes to be selected for each edge type.\nOnly numeric and boolean attributes are allowed. Defaults to None.\ne_extra_feats (list or dict, optional)\n: Other edge attributes to get such as indicators of train/test data.\nIf it is a list, then the attributes in the list from all edge types will be\nselected. An error will be thrown if certain attribute doesn\u2019t exist in all\nedge types. If it is a dict, keys of the dict are edge types to be selected,\nand values are lists of attributes to be selected for each edge type.\nNumeric, boolean and string attributes are allowed. Defaults to None.\ne_seed_types (str or list, optional)\n: Directly specify the edge types to use as seeds. If not specified, defaults to\nthe edge types used in filter_by. If not specified there, uses all edge types.\nDefaults to None.\nbatch_size (int, optional)\n: Number of vertices as seeds in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the vertices into as seeds.\nIf both\nbatch_size\nand\nnum_batches\nare provided,\nbatch_size\ntakes higher\npriority. Defaults to 1.\nnum_neighbors (int, optional)\n: Number of neighbors to sample for each vertex.\nDefaults to 10.\nnum_hops (int, optional)\n: Number of hops to traverse when sampling neighbors.\nDefaults to 2.\nshuffle (bool, optional)\n: Whether to shuffle the vertices before loading data.\nDefaults to False.\nfilter_by (str, dict, list, optional)\n: Denotes the name of a boolean attribute used to indicate which vertices\ncan be included as seeds. If a dictionary is provided, must be in the form of:\n{\"vertex_type\": \"attribute\"}. If a list, must contain multiple filters and an\nunique loader will be returned for each list element. Defaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader. Only\n\"PyG\", \"DGL\", \"Spektral\", and \"dataframe\" are supported. Defaults to \"PyG\".\nadd_self_loop (bool, optional)\n: Whether to add self-loops to the graph. Defaults to False.\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name if Kafka topic is not given. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nreverse_edge (bool, optional)\n: Whether to traverse along reverse edge types. Defaults to False.\ndelimiter (str, optional)\n: What character (or combination of characters) to use to separate attributes as batches are being created.\nDefaults to \"|\".\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\ncallback_fn (callable, optional)\n: A callable function to apply to each batch in the dataloader. Defaults to None.\nreinstall_query (bool, optional)\n: Whether to reinstall the queries associated with this loader at instantiation. One can also call the member function\nreinstall_query()\non a loader instance to reinstall the queries at any time.\nDefaults to False.\ndistributed_query (bool, optional)\n: Whether to install the query in distributed mode. Defaults to False.\nnodepieceLoader()\nnodepieceLoader(v_feats: Union[list, dict] = None, target_vertex_types: Union[str, list] = None, compute_anchors: bool = False, use_cache: bool = False, clear_cache: bool = False, anchor_method: str = \"random\", anchor_cache_attr: str = \"anchors\", max_distance: int = 5, max_anchors: int = 10, max_relational_context: int = 10, anchor_percentage: float = 0.01, anchor_attribute: str = \"is_anchor\", e_types: list = None, global_schema_change: bool = False, tokenMap: Union[dict, str] = None, batch_size: int = None, num_batches: int = 1, shuffle: bool = False, filter_by: str = None, loader_id: str = None, buffer_size: int = 4, reverse_edge: bool = False, delimiter: str = \"|\", timeout: int = 300000, callback_fn: Callable = None, reinstall_query: bool = False, distributed_query: bool = False) \u2192 NodePieceLoader\nReturns a\nNodePieceLoader\ninstance.\nA\nNodePieceLoader\ninstance loads all edges from the graph in batches, along with the vertices that are connected with each edge.\nThe NodePiece algorithm borrows the idea of \"tokenization\" from Natural Language Processing. The dataloader offers the functionality\nto \"tokenize\" the graph in the form of randomly selecting \"anchor vertices\". If you are running NodePiece for the first time,\nanchors have to be created.\nThe first time you initialize the loader on a graph, it must first install the corresponding query to the database.\nHowever, the query installation only needs to be done once, so you will not need to wait when you initialize the loader on the same graph again.\nThere are two ways to use the data loader:\nIt can be used as an iterable, which means you can loop through\nit to get every batch of data. If you load all data at once (\nnum_batches=1\n),\nthere will be only one batch (of all the data) in the iterator.\nYou can access the\ndata\nproperty of the class directly. If there is\nonly one batch of data to load, it will give you the batch directly instead\nof an iterator, which might make more sense in that case. If there are\nmultiple batches of data to load, it will return the loader itself.\nParameters:\nv_feats (list or dict, optional)\n: If a heterogenous graph, dictionary of the form {\"VERTEX_TYPE\": [\"vertex_attribute1\", \u2026\u200b]}.\nIf a homogeneous graph, list of the form [\"vertex_attribute1\", \u2026\u200b].\nIf None, all vertex types will be used, but no vertex attributes will be loaded.\nIf not None, only vertex types specified will be used.\ntarget_vertex_types (str or list, optional)\n: A list or string of vertex types that are going to be used for training the model.\nIf None, the vertex types specified in v_feats will be used.\ncompute_anchors (bool, optional)\n: False by default. If set to True, the dataloader will compute anchors and store them in the attribute\ndefined by\nanchor_attribute\n.\nuse_cache (bool, optional)\n: False by default. If True, will cache the result of the anchor search process onto the attribute\ndefined by\nanchor_cache_attr\n. Must define\nanchor_cache_attr\nif True.\nclear_cache (bool, optional)\n: False by default. If True, the cache of the anchor search process will be cleared for the attribute\ndefined by\nanchor_cache_attr\n.\nanchor_method (str, optional)\n: \"random\" by default. Currently, \"random\" anchor selection strategy is the only strategy supported.\nanchor_cache_attr (str, optional)\n: Defines the attribute name to store the cached anchor search results in. By default, the attribute is \"anchors\".\nmax_distance (int, optional)\n: The max number of hops away in the graph to search for anchors. Defaults to 5.\nmax_anchors (int, optional)\n: The max number of anchors used to generate representation of target vertex. Defaults to 10.\nmax_relational_context (int, optional)\n: The max number of edge types to collect to generate representation of target vertex. Defaults to 10.\nanchor_percentage (float, optional)\n: The percentage of vertices to use as anchors. Defaults to 0.01 (1%).\nanchor_attribute (str, optional)\n: Attribute to store if a vertex is an anchor. Defaults to \"is_anchor\".\ne_types (list, optional)\n: List of edge types to use in traversing the graph. Defaults to all edge types.\nglobal_schema_change (bool, optional)\n: By default False. Must be True if altering the schema of global namespace graphs.\ntokenMap (dict or str, optional)\n: Optional, for use when wanting to transfer the token \u2192 index map from one NodePiece dataloader instance to another.\nTakes in a dictonary of token \u2192 index, or a filepath to a pickle file containing the map. This map can be produced using the\nsaveTokens()\nmethod of the NodePiece loader.\nbatch_size (int, optional)\n: The batch size to iterate through. Defaults to None.\nnum_batches (int, optional)\n: The number of batches to produce. Defaults to 1.\nshuffle (bool, optional)\n: Whether to shuffle the vertices before loading data.\nDefaults to False.\nfilter_by (str, dict, list, optional)\n: Denotes the name of a boolean attribute used to indicate which vertices\ncan be included as seeds. If a dictionary is provided, must be in the form of:\n{\"vertex_type\": \"attribute\"}. If a list, must contain multiple filters and an\nunique loader will be returned for each list element. Defaults to None.\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name if Kafka topic is not given. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nreverse_edge (bool, optional)\n: Whether to traverse along reverse edge types. Defaults to False.\ndelimiter (str, optional)\n: What character (or combination of characters) to use to separate attributes as batches are being created.\nDefaults to \"|\".\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\ncallback_fn (callable, optional)\n: A callable function to apply to each batch in the dataloader. Defaults to None.\nreinstall_query (bool, optional)\n: Whether to reinstall the queries associated with this loader at instantiation. One can also call the member function\nreinstall_query()\non a loader instance to reinstall the queries at any time.\nDefaults to False.\ndistributed_query (bool, optional)\n: Whether to install the query in distributed mode. Defaults to False.\nSee\nthe ML Workbench tutorial notebook for nodepiece loaders\nfor examples.\nhgtLoader()\nhgtLoader(num_neighbors: dict, v_in_feats: Union[list, dict] = None, v_out_labels: Union[list, dict] = None, v_extra_feats: Union[list, dict] = None, v_seed_types: Union[str, list] = None, e_in_feats: Union[list, dict] = None, e_out_labels: Union[list, dict] = None, e_extra_feats: Union[list, dict] = None, batch_size: int = None, num_batches: int = 1, num_hops: int = 2, shuffle: bool = False, filter_by: str = None, output_format: str = \"PyG\", add_self_loop: bool = False, loader_id: str = None, buffer_size: int = 4, reverse_edge: bool = False, delimiter: str = \"|\", timeout: int = 300000, callback_fn: Callable = None, reinstall_query: bool = False, distributed_query: bool = False) \u2192 HGTLoader\nReturns a\nHGTLoader\ninstance.\nA\nHGTLoader\ninstance performs stratified neighbor sampling from vertices in the graph in batches in the following manner:\nIt chooses a specified number (\nbatch_size\n) of vertices as seeds.\nThe number of batches is the total number of vertices divided by the batch size.\nIf you specify the number of batches (\nnum_batches\n) instead,\nbatch_size\nis calculated by dividing the total number of vertices by the number of batches.\nIf specify both parameters,\nbatch_size\ntakes priority.\nIt picks a specified number of neighbors of each type (as specified by the dict\nnum_neighbors\n) of each seed at random.\nIt picks the specified number of neighbors of every type for each neighbor, and repeats this process until it finished performing a specified number of hops (\nnum_hops\n).\nThis generates one subgraph.\nAs you loop through this data loader, every vertex will at some point be chosen as a seed and you will get the subgraph\nexpanded from the seeds.\nIf you want to limit seeds to certain vertices, the boolean\nattribute provided to\nfilter_by\nwill be used to indicate which vertices can be\nincluded as seeds.\nIf you want to load from certain types of vertices and edges,\nuse the\ndict\ninput for\nv_in_feats\n,\nv_out_labels\n,\nv_extra_feats\n,\ne_in_feats\n,\ne_out_labels\n,\ne_extra_feats\nwhere keys of the dict are vertex\nor edge types to be selected and values are lists of attributes to collect from the\nvertex or edge types.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nParameters:\nnum_neighbors (dict)\n: Number of neighbors of each type to sample. Keys are vertex types and values\nare the number of neighbors to sample for each type.\nv_in_feats (list or dict, optional)\n: Vertex attributes to be used as input features.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\nv_out_labels (list or dict, optional)\n: Vertex attributes to be used as labels for prediction.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nOnly numeric and boolean attributes are allowed. Defaults to None.\nv_extra_feats (list or dict, optional)\n: Other attributes to get such as indicators of train/test data.\nIf it is a list, then the attributes\nin the list from all vertex types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all vertex types. If it is a dict, keys of the\ndict are vertex types to be selected, and values are lists of attributes to be\nselected for each vertex type.\nNumeric, boolean and string attributes are allowed. Defaults to None.\nv_seed_types (str or list, optional)\n: Directly specify the vertex types to use as seeds. If not specified, defaults to\nthe vertex types used in filter_by. If not specified there, uses all vertex types.\nDefaults to None.\ne_in_feats (list or dict, optional)\n: Edge attributes to be used as input features.\nIf it is a list, then the attributes\nin the list from all edge types will be selected. An error will be thrown if\ncertain attribute doesn\u2019t exist in all edge types. If it is a dict, keys of the\ndict are edge types to be selected, and values are lists of attributes to be\nselected for each edge type.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\ne_out_labels (list or dict, optional)\n: Edge attributes to be used as labels for prediction.\nIf it is a list, then the attributes in the list from all edge types will be\nselected. An error will be thrown if certain attribute doesn\u2019t exist in all\nedge types. If it is a dict, keys of the dict are edge types to be selected,\nand values are lists of attributes to be selected for each edge type.\nOnly numeric and boolean attributes are allowed. Defaults to None.\ne_extra_feats (list or dict, optional)\n: Other edge attributes to get such as indicators of train/test data.\nIf it is a list, then the attributes in the list from all edge types will be\nselected. An error will be thrown if certain attribute doesn\u2019t exist in all\nedge types. If it is a dict, keys of the dict are edge types to be selected,\nand values are lists of attributes to be selected for each edge type.\nNumeric, boolean and string attributes are allowed. Defaults to None.\nbatch_size (int, optional)\n: Number of vertices as seeds in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the vertices into as seeds.\nIf both\nbatch_size\nand\nnum_batches\nare provided,\nbatch_size\ntakes higher\npriority. Defaults to 1.\nnum_hops (int, optional)\n: Number of hops to traverse when sampling neighbors.\nDefaults to 2.\nshuffle (bool, optional)\n: Whether to shuffle the vertices before loading data.\nDefaults to False.\nfilter_by (str, dict, list, optional)\n: Denotes the name of a boolean attribute used to indicate which vertices\ncan be included as seeds. If a dictionary is provided, must be in the form of:\n{\"vertex_type\": \"attribute\"}. If a list, must contain multiple filters and an\nunique loader will be returned for each list element. Defaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader. Only\n\"PyG\", \"DGL\", \"spektral\", and \"dataframe\" are supported. Defaults to \"PyG\".\nadd_self_loop (bool, optional)\n: Whether to add self-loops to the graph. Defaults to False.\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name if Kafka topic is not given. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nreverse_edge (bool, optional)\n: Whether to traverse along reverse edge types. Defaults to False.\ndelimiter (str, optional)\n: What character (or combination of characters) to use to separate attributes as batches are being created.\nDefaults to \"|\".\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\ncallback_fn (callable, optional)\n: A callable function to apply to each batch in the dataloader. Defaults to None.\nreinstall_query (bool, optional)\n: Whether to reinstall the queries associated with this loader at instantiation. One can also call the member function\nreinstall_query()\non a loader instance to reinstall the queries at any time.\nDefaults to False.\ndistributed_query (bool, optional)\n: Whether to install the query in distributed mode. Defaults to False.\nfeaturizer()\nfeaturizer(repo: str = None, algo_version: str = None) \u2192 Featurizer\nGet a featurizer. The Featurizer enables installation and execution of algorithms in the Graph Data Science (GDS) libarary.\nThe Featurizer pulls the most up-to-date version of the algorithm available in our public GitHub repository that is\ncompatible with your database version.\nNote: In environments not connected to the public internet, you can download the repository manually and use the featurizer\nlike this:\nimport pyTigerGraph as tg\nfrom pyTigerGraph.gds.featurizer import Featurizer\n\nconn = tg.TigerGraphConnection(host=\"HOSTNAME_HERE\", username=\"USERNAME_HERE\", password=\"PASSWORD_HERE\", graphname=\"GRAPHNAME_HERE\")\nconn.getToken(conn.createSecret())\nfeat = conn.gds.featurizer(repo=\"PATH/TO/MANUALLY_DOWNLOADED_REPOSITORY\")\n\nres = feat.runAlgorithm(\"tg_pagerank\", params={\"v_type\": \"Paper\", \"e_type\": \"CITES\"})\n\nprint(res)\nReturns:\nFeaturizer\nvertexSplitter()\nvertexSplitter(v_types = None, timeout: int = 600000)\nGet a vertex splitter that splits vertices into at most 3 parts randomly.\nThe split results are stored in the provided vertex attributes. Each boolean attribute\nindicates which part a vertex belongs to.\nMake sure to create the appropriate attributes in the graph before using these functions.\nUsage:\nA random 60% of vertices will have their attribute\nattr_name\nset to True, and\nothers False.\nattr_name\ncan be any attribute that exists in the database (same below).\nExample:\nconn = TigerGraphConnection(...)\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6)\nsplitter.run()\nA random 60% of vertices will have their attribute \"attr_name\" set to True, and a\nrandom 20% of vertices will have their attribute \"attr_name2\" set to True. The two\nparts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6, attr_name2=0.2)\nsplitter.run()\nA random 60% of vertices will have their attribute \"attr_name\" set to True, a\nrandom 20% of vertices will have their attribute \"attr_name2\" set to True, and\nanother random 20% of vertices will have their attribute \"attr_name3\" set to True.\nThe three parts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6, attr_name2=0.2, attr_name3=0.2)\nsplitter.run()\nParameters:\nv_types (List[str], optional)\n: Types of vertex the split will work on. Defaults to None (all types).\ntimeout (int, optional)\n: Timeout value for the operation. Defaults to 600000.\nedgeSplitter()\nedgeSplitter(e_types = None, timeout: int = 600000)\nGet an edge splitter that splits edges into at most 3 parts randomly.\nThe split results are stored in the provided edge attributes. Each boolean attribute\nindicates which part an edge belongs to.\nMake sure to create the appropriate attributes in the graph before using these functions.\nUsage:\nA random 60% of edges will have their attribute \"attr_name\" set to True, and\nothers False.\nattr_name\ncan be any attribute that exists in the database (same below).\nExample:\nconn = TigerGraphConnection(...)\nsplitter = conn.gds.edgeSplitter(timeout, attr_name=0.6)\nsplitter.run()\nA random 60% of edges will have their attribute \"attr_name\" set to True, and a\nrandom 20% of edges will have their attribute \"attr_name2\" set to True. The two\nparts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = conn.gds.edgeSplitter(timeout, attr_name=0.6, attr_name2=0.2)\nsplitter.run()\nA random 60% of edges will have their attribute \"attr_name\" set to True, a\nrandom 20% of edges will have their attribute \"attr_name2\" set to True, and\nanother random 20% of edges will have their attribute \"attr_name3\" set to True.\nThe three parts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = conn.gds.edgeSplitter(timeout, attr_name=0.6, attr_name2=0.2, attr_name3=0.2)\nsplitter.run()\nParameters:\ne_types (List[str], optional)\n: Types of edges the split will work on. Defaults to None (all types).\ntimeout (int, optional):\nTimeout value for the operation. Defaults to 600000.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_nodepieceloader", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_vertexsplitter", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_vertexloader", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_hgtloader", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/1.3/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_graphloader", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_edgeneighborloader", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_featurizer", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_neighborloader", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/1.1/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_configurekafka", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/1.4/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/1/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_edgesplitter", "https://docs.tigergraph.com/pytigergraph/1.2/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/gds/gds#_edgeloader", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "content": "GraphSAGE Models\nGraphSAGEForVertexClassification\nUse a GraphSAGE model to classify vertices. By default, this model collects\nClassficiationMetrics\n, and uses cross entropy as its loss function.\n_init_\n()\ninit\n(num_layers: int, out_dim: int, hidden_dim: int, dropout = 0.0, heterogeneous = None, class_weights = None)\nInitialize the GraphSAGE Vertex Classification Model.\nParameters:\nnum_layers (int)\n: The number of layers in the model. Typically corresponds to\nnum_hops\nin the dataloader.\nout_dim (int)\n: The number of output dimensions. Corresponds to the number of classes in the classification task.\nhidden_dim (int)\n: The hidden dimension to use.\ndropout (float, optional)\n: The amount of dropout to apply between the layers. Defaults to 0.\nheterogeneous (tuple, optional)\n: If set, use the graph metadata in the PyG heterogeneous metadata format.\nCan also retrieve this from the dataloader by calling\nloader.metadata()\n. Defaults to None.\nclass_weights (torch.Tensor, optional)\n: If set, weight the different classes in the loss function. Used in imbalanced classification tasks.\nforward()\nforward(batch, get_probs = False, target_type = None)\nMake a forward pass.\nParameters:\nbatch (torch_geometric.Data or torch_geometric.HeteroData)\n: The PyTorch Geometric data object to classify.\nget_probs (bool, optional)\n: Return the softmax scores of the raw logits, which can be interpreted as probabilities. Defaults to false.\ntarget_type (str, optional)\n: Name of the vertex type to get the logits of. Defaults to None, and will return logits for all vertex types.\ncompute_loss()\ncompute_loss(logits, batch, target_type = None, loss_fn = None)\nCompute loss.\nParameters:\nlogits (torch.Tensor or dict of torch.Tensor)\n: The output of the forward pass.\nbatch (torch_geometric.Data or torch_geometric.HeteroData)\n: The PyTorch Geometric data object to classify. Assumes the target is represented in the\n\"y\"\ndata object.\ntarget_type (str, optional)\n: The string of the vertex type to compute the loss on.\nloss_fn (callable, optional)\n: The function to compute the loss with. Uses cross entropy loss if not defined.\nGraphSAGEForVertexRegression\nUse GraphSAGE for vertex regression tasks. By default, this model collects\nRegressionMetrics\n, and uses MSE as its loss function.\n_init_\n()\ninit\n(num_layers: int, out_dim: int, hidden_dim: int, dropout = 0.0, heterogeneous = None)\nInitialize the GraphSAGE Vertex Regression Model.\nParameters:\nnum_layers (int)\n: The number of layers in the model. Typically corresponds to\nnum_hops\nin the dataloader.\nout_dim (int)\n: The dimension of the output. Corresponds to the size of vector to perform the regression of.\nhidden_dim (int)\n: The hidden dimension to use.\ndropout (float, optional)\n: The amount of dropout to apply between layers. Defaults to 0.0.\nheterogeneous (tuple, optional)\n: If set, use the graph metadata in the PyG heterogeneous metadata format.\nCan also retrieve this from the dataloader by calling\nloader.metadata()\n. Defaults to None.\nforward()\nforward(batch, target_type = None)\nMake a forward pass.\nParameters:\nbatch (torch_geometric.Data or torch_geometric.HeteroData)\n: The PyTorch Geometric data object to classify.\ntarget_type (str, optional)\n: Name of the vertex type to get the logits of. Defaults to None, and will return logits for all vertex types.\ncompute_loss()\ncompute_loss(logits, batch, target_type = None, loss_fn = None)\nCompute loss.\nParameters:\nlogits (torch.Tensor or dict of torch.Tensor)\n: The output of the forward pass.\nbatch (torch_geometric.Data or torch_geometric.HeteroData)\n: The PyTorch Geometric data object to classify. Assumes the target is represented in the\n\"y\"\ndata object.\ntarget_type (str, optional)\n: The string of the vertex type to compute the loss on.\nloss_fn (callable, optional)\n: The function to compute the loss with. Uses MSE loss if not defined.\nGraphSAGEForLinkPrediction\nBy default, this model collects\nLinkPredictionMetrics\nwith k = 10, and uses binary cross entropy as its loss function.\n_init_\n()\ninit\n(num_layers, embedding_dim, hidden_dim, dropout = 0.0, heterogeneous = None)\nInitialize the GraphSAGE Link Prediction Model.\nParameters:\nnum_layers (int)\n: The number of layers in the model. Typically corresponds to\nnum_hops\nin the dataloader.\nembedding_dim (int)\n: The dimension of the embedding generated.\nThis embedding is then used for cosine similarity between a pair of vertices to generate the prediction for the edge.\nhidden_dim (int)\n: The hidden dimension to use.\ndropout (float, optional)\n: The amount of dropout to apply between layers. Defaults to 0.0.\nheterogeneous (tuple, optional)\n: If set, use the graph metadata in the PyG heterogeneous metadata format.\nCan also retrieve this from the dataloader by calling\nloader.metadata()\n. Defaults to None.\nforward()\nforward(batch, target_type = None)\nMake a forward pass.\nParameters:\nbatch (torch_geometric.Data or torch_geometric.HeteroData)\n: The PyTorch Geometric data object to classify.\ntarget_type (str, optional)\n: Name of the vertex type to get the logits of. Defaults to None, and will return logits for all vertex types.\ncompute_loss()\ncompute_loss(logits, batch, target_type = None, loss_fn = None)\nCompute loss.\nParameters:\nlogits (torch.Tensor or dict of torch.Tensor)\n: The output of the forward pass.\nbatch (torch_geometric.Data or torch_geometric.HeteroData)\n: The PyTorch Geometric data object to classify. Assumes the target is represented in the\n\"y\"\ndata object.\ntarget_type (str, optional)\n: The string of the edge type to compute the loss on.\nloss_fn (callable, optional)\n: The function to compute the loss with. Uses binary cross entropy loss if not defined.\nget_embeddings()\nget_embeddings(batch)\nGet embeddings.\nParameter:\nbatch (torch_geometric.Data or torch_geometric.HeteroData)\n: Get the embeddings for all vertices in a batch.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_forward_3", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/1.4/gds/graphsage", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_compute_loss_2", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_forward", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_graphsageforvertexregression", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_graphsageforlinkprediction", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_get_embeddings", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_init_2", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_init_3", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_compute_loss_3", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_graphsageforvertexclassification", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_compute_loss", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_init", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage#_forward_2", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/models", "content": "Using Built-In Models\nThe built-in models of pyTigerGraph aim to enable developers to quickly get a graph machine learning model training using the data hosted in the TigerGraph database.\nThere are two ways to train models, using the model\u2019s\nfit()\nfunction, or using the\nTrainer\n. Both will be shown in the examples below. The\n.fit()\nmethod is less flexible, but easier to use, while the\nTrainer\nallows for more flexibility.\nHomogeneous Vertex Classification using GraphSAGE and\n.fit()\nIn this example, we are going use the\nGraphSAGEForVertexClassification\nmodel and it\u2019s\n.fit()\nfunction.\nThe dataloader definition takes advantage of the factory function producing multiple dataloaders when multiple filters are defined.\nAfter training for 5 epochs, we also get a batch for inference and use the\n.predict()\nfunction of the model to perform the inference.\nfrom pyTigerGraph.gds.models.GraphSAGE import GraphSAGEForVertexClassification\nfrom pyTigerGraph import TigerGraphConnection\nimport torch\n\nconn = TigerGraphConnection(\"https://your_domain.i.tgcloud.io\", \"Ethereum\", username=\"user_1\", password=\"MyPassword1!\")\nconn.getToken(conn.createSecret())\nprint(\"Connected!\")\ntrain_loader, valid_loader, infer_loader = conn.gds.neighborLoader(\n    v_in_feats=[\"in_degree\",\"out_degree\",\"send_amount\",\"send_min\",\"recv_amount\",\"recv_min\",\"pagerank\"],\n    v_out_labels=[\"is_fraud\"],\n    v_extra_feats=[\"is_training\", \"is_validation\"],\n    output_format=\"PyG\",\n    batch_size=512,\n    num_neighbors=10,\n    num_hops=2,\n    filter_by = [\"is_training\", \"is_validation\", \"\"],\n    shuffle=True,\n    timeout=600000\n)\n\ngs = GraphSAGEForVertexClassification(num_layers=2,\n                                        out_dim=2,\n                                        dropout=.2,\n                                        hidden_dim=128,\n                                        class_weights=torch.FloatTensor([1.0, 15.0]))\n\ngs.fit(train_loader, valid_loader, number_epochs=5)\n\ninference_batch = infer_loader.fetch([{\"type\": \"Account\", \"primary_id\": \"0x4579ed7fefb118026040a6f94dcce4a0091c7199\"},\n                                      {\"type\": \"Account\", \"primary_id\": \"0xdf9e9c6f8a3d4bc2989e722d4ad526e98f56a429\"}])\n\nprint(gs.predict(inference_batch))\nHeterogeneous Vertex Classification using GraphSAGE and the Trainer\nThis time, we will use the\nTrainer\nto train our model on a heterogeneous dataset.\nfrom pyTigerGraph.gds.models.GraphSAGE import GraphSAGEForVertexClassification\nfrom pyTigerGraph.gds import Trainer\nfrom pyTigerGraph import TigerGraphConnection\n\nconn = TigerGraphConnection(\"https://your_domain.i.tgcloud.io\", \"imdb\", username=\"user_1\", password=\"MyPassword1!\")\nconn.getToken(conn.createSecret())\n\ntrain_loader, valid_loader, test_loader = conn.gds.neighborLoader(\n    v_in_feats={\"Movie\": [\"x\"], \"Actor\": [\"x\"], \"Director\": [\"x\"]},\n    v_out_labels={\"Movie\": [\"y\"]},\n    v_extra_feats={\"Movie\": [\"train_mask\", \"val_mask\", \"test_mask\"]},\n    output_format=\"PyG\",\n    batch_size=256,\n    num_neighbors=10,\n    num_hops=2,\n    shuffle=True,\n    filter_by=[{\"Movie\":\"train_mask\"}, {\"Movie\": \"val_mask\"}, {\"Movie\": \"test_mask\"}]\n)\n\nprint(train_loader.metadata())\n\ngs = GraphSAGEForVertexClassification(2, 3, 256, .2, train_loader.metadata())\ntrainer = Trainer(gs, train_loader, valid_loader)\ntrainer.train(5)\nLink Prediction with GraphSAGE and the Trainer\nNow, we are going to train a link prediction model using GraphSAGE and the Trainer.\nfrom pyTigerGraph.gds.models.GraphSAGE import GraphSAGEForLinkPrediction\nfrom pyTigerGraph.gds import Trainer\nfrom pyTigerGraph import TigerGraphConnection\n\nconn = TigerGraphConnection(\"https://your_domain.i.tgcloud.io\", \"Cora\", username=\"user_1\", password=\"MyPassword1!\")\nconn.getToken(conn.createSecret())\n\ntrain_edge_neighbor_loader, val_edge_neighbor_loader = conn.gds.edgeNeighborLoader(\n    v_in_feats=[\"x\"],\n    v_out_labels=[\"y\"],\n    num_batches=5,\n    e_extra_feats=[\"is_train\",\"is_val\"],\n    output_format=\"PyG\",\n    num_neighbors=10,\n    num_hops=2,\n    filter_by=[\"is_train\", \"is_val\"],\n    shuffle=False,\n)\n\ngs = GraphSAGEForLinkPrediction(2, 256, 256, 0.2)\ntrainer = Trainer(gs, train_edge_neighbor_loader, val_edge_neighbor_loader, target_type=\"Cite\")\ntrainer.train(5)\nVertex Classification with NodePiece and\n.fit()\nWe are going to train a NodePiece MLP model using the\n.fit()\nfunction and the NodePieceMLP built-in model.\nfrom pyTigerGraph import TigerGraphConnection\nfrom pyTigerGraph.gds.models.NodePieceMLP import NodePieceMLPForVertexClassification\nfrom pyTigerGraph.gds.transforms.nodepiece_transforms import NodePieceMLPTransform\nimport torch\n\nconn = TigerGraphConnection(\"https://your_domain.i.tgcloud.io\", \"Ethereum\", username=\"user_1\", password=\"MyPassword1!\")\nconn.getToken(conn.createSecret())\nprint(\"Connected!\")\n\nt = NodePieceMLPTransform([\"in_degree\",\"out_degree\",\"send_amount\",\"send_min\",\n                            \"recv_amount\",\"recv_min\",\"pagerank\", \"betweenness\"],\n                            label = \"is_fraud\"\n                        )\ntrain_loader, valid_loader = conn.gds.nodepieceLoader(\n                                    v_feats=[\"in_degree\",\"out_degree\",\"send_amount\",\"send_min\",\n                                            \"recv_amount\",\"recv_min\",\"pagerank\", \"is_fraud\",\"betweenness\"],\n                                    target_vertex_types=\"Account\",\n                                    clear_cache=True,\n                                    compute_anchors=True,\n                                    filter_by=[\"is_training\", \"is_validation\"],\n                                    anchor_percentage=0.1,\n                                    max_anchors=10,\n                                    max_distance=10,\n                                    batch_size=2048,\n                                    use_cache=False,\n                                    shuffle=False,\n                                    reverse_edge=True,\n                                    callback_fn = lambda x: t(x),\n                                    timeout=600_000)\n\nmodel = NodePieceMLPForVertexClassification(num_layers=4,\n                     hidden_dim=128,\n                     out_dim=2,\n                     dropout=0.5,\n                     vocab_size=train_loader.num_tokens,\n                     sequence_length=20,\n                     class_weights=torch.FloatTensor([1, 15]))\n\nmodel.fit(train_loader, valid_loader, 5)\nprint(model.trainer.get_eval_metrics())", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/gds/models#_vertex_classification_with_nodepiece_and_fit", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/gds/models#_link_prediction_with_graphsage_and_the_trainer", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/gds/models#_heterogeneous_vertex_classification_using_graphsage_and_the_trainer", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/models#_homogeneous_vertex_classification_using_graphsage_and_fit", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/1.4/gds/models", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions", "content": "Factory Functions\nFactory Functions are a special collection of functions that return an instance of a class.\nAll factory functions are methods of the\nGDS\nclass.\nYou can call a factory function after instantiating a TigerGraph Connection.\nFor example:\nconn = TigerGraphConnection(\n    host=\"http://127.0.0.1\",\n    graphname=\"Cora\",\n    username=\"tigergraph\",\n    password=\"tigergraph\",\n    useCert=False\n)\nedge_loader = conn.gds.edgeLoader(\n    num_batches=1,\n    attributes=[\"time\", \"is_train\"])\nThe object returned has access to instance methods of the class.\nYou can find the reference for those classes on the following pages:\nData loaders\nFeaturizer\nMetrics\nSplitters\nIf you are not sure how to configure the optional arguments related to Kafka, leave them blank.\nMore detailed instructions on how to use them will be provided in a future release.\nneighborLoader()\nneighborLoader(v_in_feats: Union[list, dict] = None, v_out_labels: Union[list, dict] = None, v_extra_feats: Union[list, dict] = None, e_in_feats: Union[list, dict] = None, e_out_labels: Union[list, dict] = None, e_extra_feats: Union[list, dict] = None, batch_size: int = None, num_batches: int = 1, num_neighbors: int = 10, num_hops: int = 2, shuffle: bool = False, filter_by: str = None, output_format: str = \"PyG\", add_self_loop: bool = False, loader_id: str = None, buffer_size: int = 4, kafka_address: str = None, kafka_max_msg_size: int = 104857600, kafka_num_partitions: int = 1, kafka_replica_factor: int = 1, kafka_retention_ms: int = 60000, kafka_auto_del_topic: bool = True, kafka_address_consumer: str = None, kafka_address_producer: str = None, timeout: int = 300000) \u2192 NeighborLoader\nReturns a\nNeighborLoader\ninstance.\nA\nNeighborLoader\ninstance performs neighbor sampling from all vertices in the graph in batches in the following manner:\nIt chooses a specified number (\nbatch_size\n) of vertices as seeds.\nThe number of batches is the total number of vertices divided by the batch size.\nIf you specify the number of batches (\nnum_batches\n) instead,\nbatch_size\nis calculated by dividing the total number of vertices by the number of batches.\nIf specify both parameters,\nbatch_size\ntakes priority.\nIt picks a specified number (\nnum_neighbors\n) of neighbors of each seed at random.\nIt picks the same number of neighbors for each neighbor, and repeats this process until it finished performing a specified number of hops (\nnum_hops\n).\nThis generates one subgraph.\nAs you loop through this data loader, every vertex will at some point be chosen as a seed and you will get the subgraph\nexpanded from the seeds.\nIf you want to limit seeds to certain vertices, the boolean\nattribute provided to\nfilter_by\nwill be used to indicate which vertices can be\nincluded as seeds.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nSee\nthe ML Workbench tutorial notebook\nfor examples.\nParameters:\nv_in_feats (list, optional)\n: Vertex attributes to be used as input features.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\nv_out_labels (list, optional)\n: Vertex attributes to be used as labels for\nprediction. Only numeric and boolean attributes are allowed. Defaults to None.\nv_extra_feats (list, optional)\n: Other attributes to get such as indicators of\ntrain/test data. All types of attributes are allowed. Defaults to None.\ne_in_feats (list, optional)\n: Edge attributes to be used as input features.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\ne_out_labels (list, optional)\n: Edge attributes to be used as labels for\nprediction. Only numeric and boolean attributes are allowed. Defaults to None.\ne_extra_feats (list, optional)\n: Other edge attributes to get such as indicators of\ntrain/test data. All types of attributes are allowed. Defaults to None.\nbatch_size (int, optional)\n: Number of vertices as seeds in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the vertices into as seeds.\nIf both\nbatch_size\nand\nnum_batches\nare provided,\nbatch_size\ntakes higher\npriority. Defaults to 1.\nnum_neighbors (int, optional)\n: Number of neighbors to sample for each vertex.\nDefaults to 10.\nnum_hops (int, optional)\n: Number of hops to traverse when sampling neighbors.\nDefaults to 2.\nshuffle (bool, optional)\n: Whether to shuffle the vertices before loading data.\nDefaults to False.\nfilter_by (str, optional)\n: A boolean attribute used to indicate which vertices\ncan be included as seeds. Defaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader. Only\n\"PyG\", \"DGL\" and \"dataframe\" are supported. Defaults to \"PyG\".\nadd_self_loop (bool, optional)\n: Whether to add self-loops to the graph. Defaults to False.\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nkafka_address (str, optional)\n: Address of the kafka broker. Defaults to None.\nkafka_max_msg_size (int, optional)\n: Maximum size of a Kafka message in bytes.\nDefaults to 104857600.\nkafka_num_partitions (int, optional)\n: Number of partitions for the topic created by this loader.\nDefaults to 1.\nkafka_replica_factor (int, optional)\n: Number of replications for the topic created by this\nloader. Defaults to 1.\nkafka_retention_ms (int, optional)\n: Retention time for messages in the topic created by this\nloader in milliseconds. Defaults to 60000.\nkafka_auto_del_topic (bool, optional)\n: Whether to delete the Kafka topic once the\nloader finishes pulling data. Defaults to True.\nkafka_address_consumer (str, optional)\n: Address of the kafka broker that a consumer\nshould use. Defaults to be the same as\nkafkaAddress\n.\nkafka_address_producer (str, optional)\n: Address of the kafka broker that a producer\nshould use. Defaults to be the same as\nkafkaAddress\n.\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\nedgeLoader()\nedgeLoader(attributes: Union[list, dict] = None, batch_size: int = None, num_batches: int = 1, shuffle: bool = False, filter_by: str = None, output_format: str = \"dataframe\", loader_id: str = None, buffer_size: int = 4, kafka_address: str = None, kafka_max_msg_size: int = 104857600, kafka_num_partitions: int = 1, kafka_replica_factor: int = 1, kafka_retention_ms: int = 60000, kafka_auto_del_topic: bool = True, kafka_address_consumer: str = None, kafka_address_producer: str = None, timeout: int = 300000) \u2192 EdgeLoader\nReturns an\nEdgeLoader\ninstance.\nAn\nEdgeLoader\ninstance loads all edges in the graph in batches.\nIt divides all edges into\nnum_batches\nand returns each batch separately.\nYou can also specify the size of each batch, and the number of batched is calculated accordingly.\nIf you provide both parameters,\nbatch_size\ntake priority.\nThe boolean attribute provided to\nfilter_by\nindicates which edges are included.\nIf you need random batches, set\nshuffle\nto True.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nThere are two ways to use the data loader.\nIt can be used as an iterable, which means you can loop through\nit to get every batch of data. If you load all edges at once (\nnum_batches=1\n),\nthere will be only one batch (of all the edges) in the iterator.\nYou can access the\ndata\nproperty of the class directly. If there is\nonly one batch of data to load, it will give you the batch directly instead\nof an iterator. If there are\nmultiple batches of data to load, it returns the loader itself.\nParameters:\nattributes (list, optional)\n: Edge attributes to be included. Defaults to None.\nbatch_size (int, optional)\n: Number of edges in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the edges.\nDefaults to 1.\nshuffle (bool, optional)\n: Whether to shuffle the edges before loading data.\nDefaults to False.\nfilter_by (str, optional)\n: A boolean attribute used to indicate which edges are included. Defaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader. Only\n\"dataframe\" is supported. Defaults to \"dataframe\".\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nkafka_address (str, optional)\n: Address of the kafka broker. Defaults to None.\nkafka_max_msg_size (int, optional)\n: Maximum size of a Kafka message in bytes.\nDefaults to 104857600.\nkafka_num_partitions (int, optional)\n: Number of partitions for the topic created by this loader.\nDefaults to 1.\nkafka_replica_factor (int, optional)\n: Number of replications for the topic created by this\nloader. Defaults to 1.\nkafka_retention_ms (int, optional)\n: Retention time for messages in the topic created by this\nloader in milliseconds. Defaults to 60000.\nkafka_auto_del_topic (bool, optional)\n: Whether to delete the Kafka topic once the\nloader finishes pulling data. Defaults to True.\nkafka_address_consumer (str, optional)\n: Address of the kafka broker that a consumer\nshould use. Defaults to be the same as\nkafkaAddress\n.\nkafka_address_producer (str, optional)\n: Address of the kafka broker that a producer\nshould use. Defaults to be the same as\nkafkaAddress\n.\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\nSee\nthe ML Workbench edge loader tutorial notebook\nfor examples.\nvertexLoader()\nvertexLoader(attributes: Union[list, dict] = None, batch_size: int = None, num_batches: int = 1, shuffle: bool = False, filter_by: str = None, output_format: str = \"dataframe\", loader_id: str = None, buffer_size: int = 4, kafka_address: str = None, kafka_max_msg_size: int = 104857600, kafka_num_partitions: int = 1, kafka_replica_factor: int = 1, kafka_retention_ms: int = 60000, kafka_auto_del_topic: bool = True, kafka_address_consumer: str = None, kafka_address_producer: str = None, timeout: int = 300000) \u2192 VertexLoader\nReturns a\nVertexLoader\ninstance.\nA\nVertexLoader\ncan load all vertices of a graph in batches.\nIt divides vertices into\nnum_batches\nand returns each batch separately.\nThe boolean attribute provided to\nfilter_by\nindicates which vertices are included.\nIf you need random batches, set\nshuffle\nto True.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nThere are two ways to use the data loader:\nIt can be used as an iterable, which means you can loop through\nit to get every batch of data. If you load all vertices at once (\nnum_batches=1\n),\nthere will be only one batch (of all the vertices) in the iterator.\nYou can access the\ndata\nproperty of the class directly. If there is\nonly one batch of data to load, it will give you the batch directly instead\nof an iterator, which might make more sense in that case. If there are\nmultiple batches of data to load, it will return the loader again.\nParameters:\nattributes (list, optional)\n: Vertex attributes to be included. Defaults to None.\nbatch_size (int, optional)\n: Number of vertices in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the vertices.\nDefaults to 1.\nshuffle (bool, optional)\n: Whether to shuffle the vertices before loading data.\nDefaults to False.\nfilter_by (str, optional)\n: A boolean attribute used to indicate which vertices\ncan be included. Defaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader. Only\n\"dataframe\" is supported. Defaults to \"dataframe\".\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nkafka_address (str, optional)\n: Address of the kafka broker. Defaults to None.\nkafka_max_msg_size (int, optional)\n: Maximum size of a Kafka message in bytes.\nDefaults to 104857600.\nkafka_num_partitions (int, optional)\n: Number of partitions for the topic created by this loader.\nDefaults to 1.\nkafka_replica_factor (int, optional)\n: Number of replications for the topic created by this loader.\nDefaults to 1.\nkafka_retention_ms (int, optional)\n: Retention time for messages in the topic created by this\nloader in milliseconds. Defaults to 60000.\nkafka_auto_del_topic (bool, optional)\n: Whether to delete the Kafka topic once the\nloader finishes pulling data. Defaults to True.\nkafka_address_consumer (str, optional)\n: Address of the kafka broker that a consumer\nshould use. Defaults to be the same as\nkafkaAddress\n.\nkafka_address_producer (str, optional)\n: Address of the kafka broker that a producer\nshould use. Defaults to be the same as\nkafkaAddress\n.\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\nSee\nthe ML Workbench tutorial notebook\nfor examples.\ngraphLoader()\ngraphLoader(v_in_feats: Union[list, dict] = None, v_out_labels: Union[list, dict] = None, v_extra_feats: Union[list, dict] = None, e_in_feats: Union[list, dict] = None, e_out_labels: Union[list, dict] = None, e_extra_feats: Union[list, dict] = None, batch_size: int = None, num_batches: int = 1, shuffle: bool = False, filter_by: str = None, output_format: str = \"PyG\", add_self_loop: bool = False, loader_id: str = None, buffer_size: int = 4, kafka_address: str = None, kafka_max_msg_size: int = 104857600, kafka_num_partitions: int = 1, kafka_replica_factor: int = 1, kafka_retention_ms: int = 60000, kafka_auto_del_topic: bool = True, kafka_address_consumer: str = None, kafka_address_producer: str = None, timeout: int = 300000) \u2192 GraphLoader\nReturns a\nGraphLoader`instance.\nA `GraphLoader\ninstance loads all edges from the graph in batches, along with the vertices that are connected with each edge.\nDifferent from NeighborLoader which produces connected subgraphs, this loader\ngenerates (random) batches of edges and vertices attached to those edges.\nWhen you initialize the loader on a graph for the first time,\nthe initialization might take a minute as it installs the corresponding\nquery to the database. However, the query installation only\nneeds to be done once, so it will take no time when you initialize the loader\non the same graph again.\nThere are two ways to use the data loader:\nIt can be used as an iterable, which means you can loop through\nit to get every batch of data. If you load all data at once (\nnum_batches=1\n),\nthere will be only one batch (of all the data) in the iterator.\nYou can access the\ndata\nproperty of the class directly. If there is\nonly one batch of data to load, it will give you the batch directly instead\nof an iterator, which might make more sense in that case. If there are\nmultiple batches of data to load, it will return the loader itself.\nParameters:\nv_in_feats (list, optional)\n: Vertex attributes to be used as input features.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\nv_out_labels (list, optional)\n: Vertex attributes to be used as labels for prediction.\nOnly numeric and boolean attributes are allowed. Defaults to None.\nv_extra_feats (list, optional)\n: Other attributes to get such as indicators of train/test data.\nAll types of attributes are allowed. Defaults to None.\ne_in_feats (list, optional)\n: Edge attributes to be used as input features.\nOnly numeric and boolean attributes are allowed. The type of an attribute\nis automatically determined from the database schema. Defaults to None.\ne_out_labels (list, optional)\n: Edge attributes to be used as labels for\nprediction. Only numeric and boolean attributes are allowed. Defaults to None.\ne_extra_feats (list, optional)\n: Other edge attributes to get such as indicators of\ntrain/test data. All types of attributes are allowed. Defaults to None.\nbatch_size (int, optional)\n: Number of edges in each batch.\nDefaults to None.\nnum_batches (int, optional)\n: Number of batches to split the edges.\nDefaults to 1.\nshuffle (bool, optional)\n: Whether to shuffle the data before loading.\nDefaults to False.\nfilter_by (str, optional)\n: A boolean attribute used to indicate which edges can be included.\nDefaults to None.\noutput_format (str, optional)\n: Format of the output data of the loader.\nOnly \"PyG\", \"DGL\" and \"dataframe\" are supported. Defaults to \"dataframe\".\nadd_self_loop (bool, optional)\n: Whether to add self-loops to the graph. Defaults to False.\nloader_id (str, optional)\n: An identifier of the loader which can be any string. It is\nalso used as the Kafka topic name. If\nNone\n, a random string will be generated\nfor it. Defaults to None.\nbuffer_size (int, optional)\n: Number of data batches to prefetch and store in memory. Defaults to 4.\nkafka_address (str, optional)\n: Address of the kafka broker. Defaults to None.\nkafka_max_msg_size (int, optional)\n: Maximum size of a Kafka message in bytes.\nDefaults to 104857600.\nkafka_num_partitions (int, optional)\n: Number of partitions for the topic created by this loader.\nDefaults to 1.\nkafka_replica_factor (int, optional)\n: Number of replications for the topic created by this\nloader. Defaults to 1.\nkafka_retention_ms (int, optional)\n: Retention time for messages in the topic created by this\nloader in milliseconds. Defaults to 60000.\nkafka_auto_del_topic (bool, optional)\n: Whether to delete the Kafka topic once the\nloader finishes pulling data. Defaults to True.\nkafka_address_consumer (str, optional)\n: Address of the kafka broker that a consumer\nshould use. Defaults to be the same as\nkafkaAddress\n.\nkafka_address_producer (str, optional)\n: Address of the kafka broker that a producer\nshould use. Defaults to be the same as\nkafkaAddress\n.\ntimeout (int, optional)\n: Timeout value for GSQL queries, in ms. Defaults to 300000.\nSee\nthe ML Workbench tutorial notebook for graph loaders\nfor examples.\nfeaturizer()\nfeaturizer() \u2192 Featurizer\nGet a featurizer.\nReturns:\nFeaturizer\nvertexSplitter()\nvertexSplitter(timeout: int = 600000)\nGet a vertex splitter that splits vertices into at most 3 parts randomly.\nThe split results are stored in the provided vertex attributes. Each boolean attribute\nindicates which part a vertex belongs to.\nUsage:\nA random 60% of vertices will have their attribute\nattr_name\nset to True, and\nothers False.\nattr_name\ncan be any attribute that exists in the database (same below).\nExample:\nconn = TigerGraphConnection(...)\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6)\nsplitter.run()\nA random 60% of vertices will have their attribute \"attr_name\" set to True, and a\nrandom 20% of vertices will have their attribute \"attr_name2\" set to True. The two\nparts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6, attr_name2=0.2)\nsplitter.run()\nA random 60% of vertices will have their attribute \"attr_name\" set to True, a\nrandom 20% of vertices will have their attribute \"attr_name2\" set to True, and\nanother random 20% of vertices will have their attribute \"attr_name3\" set to True.\nThe three parts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6, attr_name2=0.2, attr_name3=0.2)\nsplitter.run()\nParameter:\ntimeout (int, optional)\n: Timeout value for the operation. Defaults to 600000.\nedgeSplitter()\nedgeSplitter(timeout: int = 600000)\nGet an edge splitter that splits edges into at most 3 parts randomly.\nThe split results are stored in the provided edge attributes. Each boolean attribute\nindicates which part an edge belongs to.\nUsage:\nA random 60% of edges will have their attribute \"attr_name\" set to True, and\nothers False.\nattr_name\ncan be any attribute that exists in the database (same below).\nExample:\nconn = TigerGraphConnection(...)\nsplitter = conn.gds.edgeSplitter(timeout, attr_name=0.6)\nsplitter.run()\nA random 60% of edges will have their attribute \"attr_name\" set to True, and a\nrandom 20% of edges will have their attribute \"attr_name2\" set to True. The two\nparts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = conn.gds.edgeSplitter(timeout, attr_name=0.6, attr_name2=0.2)\nsplitter.run()\nA random 60% of edges will have their attribute \"attr_name\" set to True, a\nrandom 20% of edges will have their attribute \"attr_name2\" set to True, and\nanother random 20% of edges will have their attribute \"attr_name3\" set to True.\nThe three parts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = conn.gds.edgeSplitter(timeout, attr_name=0.6, attr_name2=0.2, attr_name3=0.2)\nsplitter.run()\nParameter:\ntimeout (int, optional):\nTimeout value for the operation. Defaults to 600000.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/1.1/gds/factory-functions", "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions#_edgeloader", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions#_graphloader", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions#_vertexloader", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/pytigergraph/1/gds/factory-functions", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/1.2/gds/factory-functions", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions#_featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions#_edgesplitter", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions#_neighborloader", "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions#_vertexsplitter", "https://docs.tigergraph.com/pytigergraph/1.3/gds/factory-functions", "https://docs.tigergraph.com/pytigergraph/1.4/gds/factory-functions", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "content": "Edge Functions\nFunctions to upsert, retrieve and delete edges.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\ngetEdgeTypes()\ngetEdgeTypes(force: bool = False) \u2192 list\nReturns the list of edge type names of the graph.\nParameter:\nforce\n: If\nTrue\n, forces the retrieval the schema metadata again, otherwise returns a\ncached copy of edge type metadata (if they were already fetched previously).\nReturns:\nThe list of edge types defined in the current graph.\ngetEdgeType()\ngetEdgeType(edgeType: str, force: bool = False) \u2192 dict\nReturns the details of the edge type.\nParameters:\nedgeType\n: The name of the edge type.\nforce\n: If\nTrue\n, forces the retrieval the schema details again, otherwise returns a cached\ncopy of edge type details (if they were already fetched previously).\nReturns:\nThe metadata of the edge type.\ngetEdgeAttrs()\ngetEdgeAttrs(edgeType: str) \u2192 list\nReturns the names and types of the attributes of the edge type.\nParameter:\nedgeType\n: The name of the edge type.\nReturns:\nA list of (attribute_name, attribute_type) tuples.\nThe format of attribute_type is one of\n- \"scalar_type\"\n- \"complex_type(scalar_type)\"\n- \"map_type(key_type,value_type)\"\nand it is a string.\ngetEdgeSourceVertexType()\ngetEdgeSourceVertexType(edgeType: str) \u2192 Union[str, set]\nReturns the type(s) of the edge type\u2019s source vertex.\nParameter:\nedgeType\n: The name of the edge type.\nReturns:\nA single source vertex type name string if the edge has a single source vertex type.\n\"*\" if the edge can originate from any vertex type (notation used in 2.6.1 and earlier\nversions).\nSee\nthis\nfor more details.\nA set of vertex type name strings (unique values) if the edge has multiple source\nvertex types (notation used in 3.0 and later versions).\nEven if the source vertex types were defined as\n\"*\"\n, the REST API will list them as\npairs (i.e. not as\n\"*\"\nin 2.6.1 and earlier versions), just like as if there were\ndefined one by one (e.g.\nFROM v1, TO v2 | FROM v3, TO v4 | \u2026\n).\nThe returned set contains all source vertex types, but it does not certainly mean that\nthe edge is defined between all source and all target vertex types. You need to look\nat the individual source/target pairs to find out which combinations are\nvalid/defined.\ngetEdgeTargetVertexType()\ngetEdgeTargetVertexType(edgeType: str) \u2192 Union[str, set]\nReturns the type(s) of the edge type\u2019s target vertex.\nParameter:\nedgeType\n: The name of the edge type.\nReturns:\nA single target vertex type name string if the edge has a single target vertex type.\n\"*\" if the edge can end in any vertex type (notation used in 2.6.1 and earlier\nversions).\nSee\nthis\nfor more details.\nA set of vertex type name strings (unique values) if the edge has multiple target\nvertex types (notation used in 3.0 and later versions).\nEven if the target vertex types were defined as \"*\", the REST API will list them as\npairs (i.e. not as \"*\" in 2.6.1 and earlier versions), just like as if there were\ndefined one by one (e.g.\nFROM v1, TO v2 | FROM v3, TO v4 | \u2026\n).\nThe returned set contains all target vertex types, but does not certainly mean that the\nedge is defined between all source and all target vertex types. You need to look at\nthe individual source/target pairs to find out which combinations are valid/defined.\nisDirected()\nisDirected(edgeType: str) \u2192 bool\nIs the specified edge type directed?\nParameter:\nedgeType\n: The name of the edge type.\nReturns:\nTrue\n, if the edge is directed.\ngetReverseEdge()\ngetReverseEdge(edgeType: str) \u2192 str\nReturns the name of the reverse edge of the specified edge type, if applicable.\nParameter:\nedgeType\n: The name of the edge type.\nReturns:\nThe name of the reverse edge, if it was defined.\nisMultiEdge()\nisMultiEdge(edgeType: str) \u2192 bool\nCan the edge have multiple instances between the same pair of vertices?\nParameter:\nedgeType\n: The name of the edge type.\nReturns:\nTrue\n, if the edge can have multiple instances between the same pair of vertices.\ngetDiscriminators()\ngetDiscriminators(edgeType: str) \u2192 list\nReturns the names and types of the discriminators of the edge type.\nParameter:\nedgeType\n: The name of the edge type.\nReturns:\nA list of (attribute_name, attribute_type) tuples.\ngetEdgeCountFrom()\ngetEdgeCountFrom(sourceVertexType: str = \"\", sourceVertexId: Union[str, int] = None, edgeType: str = \"\", targetVertexType: str = \"\", targetVertexId: Union[str, int] = None, where: str = \"\") \u2192 dict\nReturns the number of edges from a specific vertex.\nParameters:\nsourceVertexType\n: The name of the source vertex type.\nsourceVertexId\n: The primary ID value of the source vertex instance.\nedgeType\n: The name of the edge type.\ntargetVertexType\n: The name of the target vertex type.\ntargetVertexId\n: The primary ID value of the target vertex instance.\nwhere\n: A comma separated list of conditions that are all applied on each edge\u2019s attributes.\nThe conditions are in logical conjunction (i.e. they are \"AND\u2019ed\" together).\nReturns:\nA dictionary of\nedge_type: edge_count\npairs.\nUses:\nIf\nedgeType\n= \"*\": edge count of all edge types (no other arguments can be specified\nin this case).\nIf\nedgeType\nis specified only: edge count of the given edge type.\nIf\nsourceVertexType\n,\nedgeType\n,\ntargetVertexType\nare specified: edge count of the\ngiven edge type between source and target vertex types.\nIf\nsourceVertexType\n,\nsourceVertexId\nare specified: edge count of all edge types\nfrom the given vertex instance.\nIf\nsourceVertexType\n,\nsourceVertexId\n,\nedgeType\nare specified: edge count of all\nedge types from the given vertex instance.\nIf\nsourceVertexType\n,\nsourceVertexId\n,\nedgeType\n,\nwhere\nare specified: the edge\ncount of the given edge type after filtered by\nwhere\ncondition.\nIf\ntargetVertexId\nis specified, then\ntargetVertexType\nmust also be specified.\nIf\ntargetVertexType\nis specified, then\nedgeType\nmust also be specified.\nEndpoints:\nGET /graph/{graph_name}/edges/{source_vertex_type}/{source_vertex_id}\nSee\nthis\nfor more details.\nPOST /builtins/{graph_name}\nSee\nthis\nfor more details.\ngetEdgeCount()\ngetEdgeCount(edgeType: str = \"*\", sourceVertexType: str = \"\", targetVertexType: str = \"\") \u2192 dict\nReturns the number of edges of an edge type.\nThis is a simplified version of\ngetEdgeCountFrom()\n, to be used when the total number of\nedges of a given type is needed, regardless which vertex instance they are originated from.\nSee documentation of\ngetEdgeCountFrom\nabove for more details.\nParameters:\nedgeType\n: The name of the edge type.\nsourceVertexType\n: The name of the source vertex type.\ntargetVertexType\n: The name of the target vertex type.\nReturns:\nA dictionary of\nedge_type: edge_count\npairs.\nupsertEdge()\nupsertEdge(sourceVertexType: str, sourceVertexId: str, edgeType: str, targetVertexType: str, targetVertexId: str, attributes: dict = None) \u2192 int\nUpserts an edge.\nData is upserted:\nIf edge is not yet present in graph, it will be created (see special case below).\nIf it\u2019s already in the graph, it is updated with the values specified in the request.\nIf\nvertex_must_exist\nis True then edge will only be created if both vertex exists\nin graph. Otherwise missing vertices are created with the new edge; the newly created\nvertices' attributes (if any) will be created with default values.\nParameters:\nsourceVertexType\n: The name of the source vertex type.\nsourceVertexId\n: The primary ID value of the source vertex instance.\nedgeType\n: The name of the edge type.\ntargetVertexType\n: The name of the target vertex type.\ntargetVertexId\n: The primary ID value of the target vertex instance.\nattributes\n: A dictionary in this format:\n{<attribute_name>, <attribute_value>|(<attribute_name>, <operator>), \u2026}\nExample:\n{\"visits\": (1482, \"+\"), \"max_duration\": (371, \"max\")}\nFor valid values of\n<operator>\nsee\nthis\n.\nReturns:\nA single number of accepted (successfully upserted) edges (0 or 1).\nEndpoint:\nPOST /graph/{graph_name}\nSee\nthis\nfor more details.\nupsertEdges()\nupsertEdges(sourceVertexType: str, edgeType: str, targetVertexType: str, edges: list) \u2192 int\nUpserts multiple edges (of the same type).\nParameters:\nsourceVertexType\n: The name of the source vertex type.\nedgeType\n: The name of the edge type.\ntargetVertexType\n: The name of the target vertex type.\nedges\n: A list in of tuples in this format:\n[\n    (<source_vertex_id>, <target_vertex_id>, {<attribute_name>: <attribute_value>, \u2026}),\n    (<source_vertex_id>, <target_vertex_id>, {<attribute_name>: (<attribute_value>, <operator>), \u2026})\n    \u22ee\n]\nExample:\n[\n    (17, \"home_page\", {\"visits\": (35, \"+\"), \"max_duration\": (93, \"max\")}),\n    (42, \"search\", {\"visits\": (17, \"+\"), \"max_duration\": (41, \"max\")})\n]\nFor valid values of\n<operator>\nsee\nthis\n.\nReturns:\nA single number of accepted (successfully upserted) edges (0 or positive integer).\nEndpoint:\nPOST /graph/{graph_name}\nSee\nthis\nfor more details.\nupsertEdgeDataFrame()\nupsertEdgeDataFrame(df: pd.DataFrame, sourceVertexType: str, edgeType: str, targetVertexType: str, from_id: str = \"\", to_id: str = \"\", attributes: dict = None) \u2192 int\nUpserts edges from a Pandas DataFrame.\nParameters:\ndf\n: The DataFrame to upsert.\nsourceVertexType\n: The type of source vertex for the edge.\nedgeType\n: The type of edge to upsert data to.\ntargetVertexType\n: The type of target vertex for the edge.\nfrom_id\n: The field name where the source vertex primary id is given. If omitted, the\ndataframe index would be used instead.\nto_id\n: The field name where the target vertex primary id is given. If omitted, the\ndataframe index would be used instead.\nattributes\n: A dictionary in the form of\n{target: source}\nwhere source is the column name in\nthe dataframe and target is the attribute name on the edge. When omitted,\nall columns would be upserted with their current names. In this case column names\nmust match the edges\u2019s attribute names.\nReturns:\nThe number of edges upserted.\ngetEdges()\ngetEdges(sourceVertexType: str, sourceVertexId: str, edgeType: str = \"\", targetVertexType: str = \"\", targetVertexId: str = \"\", select: str = \"\", where: str = \"\", limit: Union[int, str] = None, sort: str = \"\", fmt: str = \"py\", withId: bool = True, withType: bool = False, timeout: int = 0) \u2192 Union[dict, str, pd.DataFrame]\nRetrieves edges of the given edge type originating from a specific source vertex.\nOnly\nsourceVertexType\nand\nsourceVertexId\nare required.\nIf\ntargetVertexId\nis specified, then\ntargetVertexType\nmust also be specified.\nIf\ntargetVertexType\nis specified, then\nedgeType\nmust also be specified.\nParameters:\nsourceVertexType\n: The name of the source vertex type.\nsourceVertexId\n: The primary ID value of the source vertex instance.\nedgeType\n: The name of the edge type.\ntargetVertexType\n: The name of the target vertex type.\ntargetVertexId\n: The primary ID value of the target vertex instance.\nselect\n: Comma separated list of edge attributes to be retrieved or omitted.\nwhere\n: Comma separated list of conditions that are all applied on each edge\u2019s attributes.\nThe conditions are in logical conjunction (i.e. they are \"AND\u2019ed\" together).\nsort\n: Comma separated list of attributes the results should be sorted by.\nlimit\n: Maximum number of edge instances to be returned (after sorting).\nfmt\n: Format of the results returned:\n\"py\":   Python objects\n\"json\": JSON document\n\"df\":   pandas DataFrame\nwithId\n: (When the output format is \"df\") Should the source and target vertex types and IDs\nbe included in the dataframe?\nwithType\n: (When the output format is \"df\") Should the edge type be included in the dataframe?\ntimeout\n: Time allowed for successful execution (0 = no time limit, default).\nReturns:\nThe (selected) details of the (matching) edge instances (sorted, limited) as dictionary,\nJSON or pandas DataFrame.\nEndpoint:\nGET /graph/{graph_name}/edges/{source_vertex_type}/{source_vertex_id}\nSee\nthis\nfor more details.\ngetEdgesDataFrame()\ngetEdgesDataFrame(sourceVertexType: str, sourceVertexId: str, edgeType: str = \"\", targetVertexType: str = \"\", targetVertexId: str = \"\", select: str = \"\", where: str = \"\", limit: Union[int, str] = None, sort: str = \"\", timeout: int = 0) \u2192 pd.DataFrame\nRetrieves edges of the given edge type originating from a specific source vertex.\nThis is a shortcut to\ngetEdges(\u2026\u200b, fmt=\"df\", withId=True, withType=False)\n.\nOnly\nsourceVertexType\nand\nsourceVertexId\nare required.\nIf\ntargetVertexId\nis specified, then\ntargetVertexType\nmust also be specified.\nIf\ntargetVertexType\nis specified, then\nedgeType\nmust also be specified.\nParameters:\nsourceVertexType\n: The name of the source vertex type.\nsourceVertexId\n: The primary ID value of the source vertex instance.\nedgeType\n: The name of the edge type.\ntargetVertexType\n: The name of the target vertex type.\ntargetVertexId\n: The primary ID value of the target vertex instance.\nselect\n: Comma separated list of edge attributes to be retrieved or omitted.\nwhere\n: Comma separated list of conditions that are all applied on each edge\u2019s attributes.\nThe conditions are in logical conjunction (i.e. they are \"AND\u2019ed\" together).\nsort\n: Comma separated list of attributes the results should be sorted by.\nlimit\n: Maximum number of edge instances to be returned (after sorting).\ntimeout\n: Time allowed for successful execution (0 = no limit, default).\nReturns:\nThe (selected) details of the (matching) edge instances (sorted, limited) as dictionary,\nJSON or pandas DataFrame.\ngetEdgesDataframe()\ngetEdgesDataframe(sourceVertexType: str, sourceVertexId: str, edgeType: str = \"\", targetVertexType: str = \"\", targetVertexId: str = \"\", select: str = \"\", where: str = \"\", limit: Union[int, str] = None, sort: str = \"\", timeout: int = 0) \u2192 pd.DataFrame\nDEPRECATED\nUse\ngetEdgesDataFrame()\ninstead.\ngetEdgesByType()\ngetEdgesByType(edgeType: str, fmt: str = \"py\", withId: bool = True, withType: bool = False) \u2192 Union[dict, str, pd.DataFrame]\nRetrieves edges of the given edge type regardless the source vertex.\nParameters:\nedgeType\n: The name of the edge type.\nfmt\n: Format of the results returned:\n\"py\":   Python objects\n\"json\": JSON document\n\"df\":   pandas DataFrame\nwithId\n: (When the output format is \"df\") Should the source and target vertex types and IDs\nbe included in the dataframe?\nwithType\n: (When the output format is \"df\") should the edge type be included in the dataframe?\nReturns:\nThe details of the edge instances of the given edge type as dictionary, JSON or pandas\nDataFrame.\ngetEdgeStats()\ngetEdgeStats(edgeTypes: Union[str, list], skipNA: bool = False) \u2192 dict\nReturns edge attribute statistics.\nParameters:\nedgeTypes\n: A single edge type name or a list of edges types names or '*' for all edges types.\nskipNA\n: Skip those edges that do not have attributes or none of their attributes have\nstatistics gathered.\nReturns:\nAttribute statistics of edges; a dictionary of dictionaries.\nEndpoint:\nPOST /builtins/{graph_name}\nSee\nthis\nfor more details.\ndelEdges()\ndelEdges(sourceVertexType: str, sourceVertexId: str, edgeType: str = \"\", targetVertexType: str = \"\", targetVertexId: str = \"\", where: str = \"\", limit: str = \"\", sort: str = \"\", timeout: int = 0) \u2192 dict\nDeletes edges from the graph.\nOnly\nsourceVertexType\nand\nsourceVertexId\nare required.\nIf\ntargetVertexId\nis specified, then\ntargetVertexType\nmust also be specified.\nIf\ntargetVertexType\nis specified, then\nedgeType\nmust also be specified.\nParameters:\nsourceVertexType\n: The name of the source vertex type.\nsourceVertexId\n: The primary ID value of the source vertex instance.\nedgeType\n: The name of the edge type.\ntargetVertexType\n: The name of the target vertex type.\ntargetVertexId\n: The primary ID value of the target vertex instance.\nwhere\n: Comma separated list of conditions that are all applied on each edge\u2019s attributes.\nThe conditions are in logical conjunction (they are connected as if with an\nAND\nstatement).\nlimit\n: Maximum number of edge instances to be returned after sorting.\nsort\n: Comma-separated list of attributes the results should be sorted by.\ntimeout\n: Time allowed for successful execution. The default is\n0\n, or no limit.\nReturns:\nA dictionary of\nedge_type: deleted_edge_count\npairs.\nEndpoint:\nDELETE /graph/{graph_name}/edges/{source_vertex_type}/{source_vertex_id}/{edge_type}/{target_vertex_type}/{target_vertex_id}\nSee\nthis\nfor more details.\nedgeSetToDataFrame()\nedgeSetToDataFrame(edgeSet: list, withId: bool = True, withType: bool = False) \u2192 pd.DataFrame\nConverts an edge set to Pandas DataFrame\nEdge sets contain instances of the same edge type. Edge sets are not generated \"naturally\"\nlike vertex sets. Instead, you need to collect edges in (global) accumulators, like when you\nwant to visualize them in GraphStudio or by other tools.\nFor example:\nSetAccum<EDGE> @@edges;\n\nstart = {country.*};\n\nresult =\n    SELECT trg\n    FROM   start:src -(city_in_country:e)- city:trg\n    ACCUM  @@edges += e;\n\nPRINT start, result, @@edges;\nThe\n@@edges\nis an edge set.\nIt contains, for each edge instance, the source and target vertex type and ID, the edge type,\na directedness indicator and the (optional) attributes.\nstart\nand\nresult\nare vertex sets.\nAn edge set has this structure (when serialised as JSON):\n[\n{\n\"e_type\": <edge_type_name>,\n\"from_type\": <source_vertex_type_name>,\n\"from_id\": <source_vertex_id>,\n\"to_type\": <target_vertex_type_name>,\n\"to_id\": <targe_vertex_id>,\n\"directed\": <true_or_false>,\n\"attributes\":\n{\n\"attr1\": <value1>,\n\"attr2\": <value2>,\n\u22ee\n}\n},\n\u22ee\n]\nParameters:\nedgeSet\n: A JSON array containing an edge set in the format returned by queries (see below).\nwithId\n: Whether to include the type and primary ID of source and target vertices as a column. Default is\nTrue\n.\nwithType\n: Whether to include edge type info as a column. Default is\nFalse\n.\nReturns:\nA pandas DataFrame containing the edge attributes and optionally the type and primary\nID or source and target vertices, and the edge type.", "links": ["https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_edgesettodataframe", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgecount", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/dev/restpp-api/built-in-endpoints#delete-an-edge", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgeattrs", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgetargetvertextype", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_upsertedges", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgesourcevertextype", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgesbytype", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/edge", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_list_edges_of_a_vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgestats", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_ismultiedge", "https://docs.tigergraph.com/dev/restpp-api/built-in-endpoints#list-edges-of-a-vertex", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgetypes", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgesdataframe_2", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/dev/restpp-api/built-in-endpoints#upsert-data-to-graph", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_isdirected", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getreverseedge", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgetype", "https://docs.tigergraph.com/dev/restpp-api/built-in-endpoints#run-built-in-functions-on-graph", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_run_built_in_functions_on_graph", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_deledges", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgecountfrom", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedgesdataframe", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_upsertedgedataframe", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_upsertedge", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getdiscriminators", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/1/core-functions/edge", "https://docs.tigergraph.com/dev/restpp-api/built-in-endpoints#operation-codes", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge#_getedges", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "content": "Installing pyTigerGraph\nThis page walks you through installing pyTigerGraph on your machine.\nPrerequisites\nPython 3.0 or higher.\nIf you are installing\npyTigerGraph[gds]\n, make sure\ntorch\nis installed\nin your Python environment.\nInstall\npyTigerGraph\nTo download\npyTigerGraph\n, run the following command in the command line or use the appropriate tool of your development environment (anaconda, PyCharm, etc.).:\npip3 install pyTigerGraph\nInstall\npyTigerGraph[gds]\nTo utilize\npyTigerGraph\u2019s Graph Data Science (GDS) functionality\n, run the following command to install\npyTigerGraph[gds]\n.\npip3 install 'pyTigerGraph[gds]'\nCertain GDS classes, such as\ndata loaders\n, can produce output in PyTorch Geometric (PyG) or Deep Graph Library (DGL) formats.\nTo support those formats, you need to have installed the respective packages in your Python environment:\nInstall Deep Graph Library\n.\nInstall pyTorch Geometric\n.\nIt is optional to install either of the aforementioned packages.\nIf you don\u2019t install either of the packages, you can still use the GDS functions, and output results in panda frames.\nImport\npyTigerGraph\nOnce the package is installed, you can import it like any other Python package:\nimport pyTigerGraph as tg", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install#_install_pytigergraphgds", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install#_import_pytigergraph", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/1.2/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/1.4/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/1.3/getting-started/install", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install#_install_pytigergraph", "https://docs.tigergraph.com/pytigergraph/1/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install#_prerequisites", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/1.1/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "content": "NodePiece Transforms\nNodePieceMLPTransform\nThe NodePieceMLPTransform converts a batch of data from the NodePieceLoader into a format that can be used in a MLP implemented in PyTorch.\n_init_\n()\ninit\n(label: str, features: list, target_type: str = None)\nInstantiate a NodePieceMLPTransform.\nParameters:\nlabel (str):\nThe attribute name that corresponds with the label being predicted. Supports numerical datatypes (INT, FLOAT, DOUBLE).\n*\nfeatures (list of str, optional)\n: List of attributes to use as features into the model. Supports numerical datatypes (INT, FLOAT, DOUBLE).\n*\ntarget_type (str, optional)\n: The type of vertex to perform predictions on.\ncall\n()\ncall\n(data)\nPerform the transform.\nParameter:\ndata (pd.DataFrame)\n: Batch of data produced by the NodePiece Loader.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms#_nodepiecemlptransform", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms#_init", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.4/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms#_call", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "content": "Data Ingestion Functions\nIngest stock datasets into a TigerGraph database.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\ningestDataset()\ningestDataset(dataset: Datasets, cleanup: bool = True, getToken: bool = False) \u2192 None\nIngest a stock dataset to a TigerGraph database.\nParameters:\ndataset (Datasets)\n: A Datasets object as\npyTigerGraph.datasets.Datasets\n.\ncleanup (bool, optional)\n: Whether or not to remove local artifacts downloaded by\nDatasets\nafter ingestion is done. Defaults to True.\ngetToken (bool, optional)\n: Whether or not to get auth token from the database. This is required\nwhen auth token is enabled for the database. Defaults to False.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.4/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets#_ingestdataset", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/1.2/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/1.3/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "content": "pyTigerGraph 101\nThis video tutorial walks you through performing all core features of pyTigerGraph, including the following.\nConnecting to TigerGraph\nPerforming CRUD operations on your TigerGraph database through pyTigergraph\nAll core functions and their use cases\nBefore you begin\nInstall pyTigerGraph in your environment\nEnsure you have access to a running TigerGraph instance\nTutorial video\nJupyter notebook\nNotebook URL:\nhttps://colab.research.google.com/drive/1fJpcv-q0NLfHj3X1k6Lbwddp8gVVcfES#scrollTo=kCaZh0DO3HNP", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/1.2/getting-started/101", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/1/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.1/getting-started/101", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101#_before_you_begin", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101#_jupyter_notebook", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101#_tutorial_video", "https://docs.tigergraph.com/pytigergraph/1.3/getting-started/101", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.4/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "content": "Path Finding Functions\nThe functions on this page find paths between vertices within the graph.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\nshortestPath()\nshortestPath(sourceVertices: Union[dict, tuple, list], targetVertices: Union[dict, tuple, list], maxLength: int = None, vertexFilters: Union[list, dict] = None, edgeFilters: Union[list, dict] = None, allShortestPaths: bool = False) \u2192 dict\nFinds the shortest path (or all shortest paths) between the source and target vertex sets.\nA vertex set is a set of dictionaries that each has three top-level keys:\nv_type\n,\nv_id\n,\nand\nattributes\n(also a dictionary).\nParameters:\nsourceVertices\n: A vertex set (a list of vertices) or a list of\n(vertexType, vertexID)\ntuples;\nthe source vertices of the shortest paths sought.\ntargetVertices\n: A vertex set (a list of vertices) or a list of\n(vertexType, vertexID)\ntuples;\nthe target vertices of the shortest paths sought.\nmaxLength\n: The maximum length of a shortest path. Optional, default is 6.\nvertexFilters\n: An optional list of\n(vertexType, condition)\ntuples or\n{\"type\": <str>, \"condition\": <str>}\ndictionaries.\nedgeFilters\n: An optional list of\n(edgeType, condition)\ntuples or\n{\"type\": <str>, \"condition\": <str>}\ndictionaries.\nallShortestPaths\n: If\nTrue\n, the endpoint will return all shortest paths between the source and target.\nDefault is\nFalse\n, meaning that the endpoint will return only one path.\nReturns:\nThe shortest path between the source and the target.\nThe returned value is a subgraph: all vertices and edges that are part of the path(s);\ni.e. not a (list of individual) path(s).\nExamples:\npath = conn.shortestPath((\"account\", 10), (\"person\", 50), maxLength=3)\n\npath = conn.shortestPath((\"account\", 10), (\"person\", 50), allShortestPaths=True,\nvertexFilters=(\"transfer\", \"amount>950\"), edgeFilters=(\"receive\", \"type=4\"))\nEndpoint:\nPOST /shortestpath/{graphName}\nSee\nFind the shortest path\n.\nallPaths()\nallPaths(sourceVertices: Union[dict, tuple, list], targetVertices: Union[dict, tuple, list], maxLength: int, vertexFilters: Union[list, dict] = None, edgeFilters: Union[list, dict] = None) \u2192 dict\nFind all possible paths up to a given maximum path length between the source and target\nvertex sets.\nA vertex set is a dict that has three top-level keys: v_type, v_id, attributes (a dict).\nParameters:\nsourceVertices\n: A vertex set (a list of vertices) or a list of\n(vertexType, vertexID)\ntuples;\nthe source vertices of the shortest paths sought.\ntargetVertices\n: A vertex set (a list of vertices) or a list of\n(vertexType, vertexID)\ntuples;\nthe target vertices of the shortest paths sought.\nmaxLength\n: The maximum length of the paths.\nvertexFilters\n: An optional list of\n(vertexType, condition)\ntuples or\n{\"type\": <str>, \"condition\": <str>}\ndictionaries.\nedgeFilters\n: An optional list of\n(edgeType, condition)\ntuples or\n{\"type\": <str>, \"condition\": <str>}\ndictionaries.\nReturns:\nAll paths between a source vertex (or vertex set) and target vertex (or vertex set).\nThe returned value is a subgraph: all vertices and edges that are part of the path(s);\ni.e. not a (list of individual) path(s).\nExample:\npath = conn.allPaths((\"account\", 10), (\"person\", 50), allShortestPaths=True,\nvertexFilters=(\"transfer\", \"amount>950\"), edgeFilters=(\"receive\", \"type=4\"))\nEndpoint:\nPOST /allpaths/{graphName}\nSee\nFind all paths", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path#_shortestpath", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/path", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/path", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/1/core-functions/path", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_find_all_paths", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_find_shortest_path", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path#_allpaths", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/path", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/path", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "content": "User Defined Tuple (UDT) Functions\nThe functions on this page retrieve information about user-defined tuples (UDT) for the graph.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\ngetUDTs()\ngetUDTs() \u2192 list\nReturns the list of User-Defined Tuples (names only).\nFor information on UDTs see\nUser-Defined Tuple\nReturns:\nThe list of names of UDTs (defined in the global scope, i.e. not in queries).\ngetUDT()\ngetUDT(udtName: str) \u2192 list\nReturns the details of a specific User-Defined Tuple (defined in the global scope).\nFor information on UDTs see\nUser-Defined Tuple\nParameter:\nudtName\n: The name of the User-Defined Tuple.\nReturns:\nThe metadata (the details of the fields) of the UDT.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt#_getudts", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/1/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/udt", "https://docs.tigergraph.com/gsql-ref/current/basics/system-and-language-basics#typedef-tuple", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt#_getudt", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_fetch_2", "content": "Data Loaders\nData loaders are classes in the pyTigerGraph Graph Data Science (GDS) module.\nYou can define an instance of each data loader class through a\nfactory function\n.\nRequires\nquerywriters\nuser permissions for full functionality.\nNeighborLoader\nA data loader that performs neighbor sampling.\nYou can declare a\nNeighborLoader\ninstance with the factory function\nneighborLoader()\n.\nA neighbor loader is an iterable.\nWhen you loop through a neighbor loader instance, it loads one batch of data from the graph to which you established a connection.\nIn every iteration, it first chooses a specified number of vertices as seeds,\nthen picks a specified number of neighbors of each seed at random,\nthen the same number of neighbors of each neighbor, and repeat for a specified number of hops.\nIt loads both the vertices and the edges connecting them to their neighbors.\nThe vertices sampled this way along with their edges form one subgraph and is contained in one batch.\nYou can iterate on the instance until every vertex has been picked as seed.\nExamples:\nThe following example iterates over a neighbor loader instance.\nfor i, batch in enumerate(neighbor_loader):\nprint(\"----Batch {}----\".format(i))\nprint(batch)\nSee\nthe ML Workbench tutorial notebook\nfor examples.\nSee more details about the specific sampling method in\nInductive Representation Learning on Large Graphs\n.\ndata\ndata \u2192 Any\nA property of the instance.\nThe\ndata\nproperty stores all data if all data is loaded in a single batch.\nIf there are multiple batches of data, the\ndata\nproperty returns the instance itself\nfetch()\nfetch(vertices: list) \u2192 None\nFetch neighborhood subgraphs for specific vertices.\nParameter:\nvertices (list of dict)\n: Vertices to fetch with their neighborhood subgraphs.\nEach vertex corresponds to a dict with two mandatory keys\n{\"primary_id\": \u2026\u200b, \"type\": \u2026\u200b}\nEdgeLoader\nData loader that loads all edges from the graph in batches.\nYou can define an edge loader using the\nedgeLoader()\nfactory function.\nAn edge loader instance is an iterable.\nWhen you loop through an edge loader instance, it loads one batch of data from the graph to which you established a connection in each iteration.\nThe size and total number of batches are specified when you define the edge loader instance.\nThe boolean attribute provided to\nfilter_by\nindicates which edges are included.\nIf you need random batches, set\nshuffle\nto True.\nExamples:\nThe following for loop prints every edge in batches.\nInput\nOutput\nedge_loader = conn.gds.edgeLoader(\nnum_batches=10,\nattributes=[\"time\", \"is_train\"],\nshuffle=True,\nfilter_by=None\n)\nfor i, batch in enumerate(edge_loader):\nprint(\"----Batch {}: Shape {}----\".format(i, batch.shape))\nprint(batch.head(1))\n----Batch 0: Shape (1129, 4)----\nsource    target  time  is_train\n0  3145728  22020185     0         1\n----Batch 1: Shape (1002, 4)----\nsource    target  time  is_train\n0  1048577  20971586     0         1\n----Batch 2: Shape (1124, 4)----\nsource   target  time  is_train\n0       4  9437199     0         1\n----Batch 3: Shape (1071, 4)----\nsource    target  time  is_train\n0  11534340  32505859     0         1\n----Batch 4: Shape (978, 4)----\nsource    target  time  is_train\n0  11534341  16777293     0         1\n----Batch 5: Shape (1149, 4)----\nsource   target  time  is_train\n0  5242882  2097158     0         1\n----Batch 6: Shape (1013, 4)----\nsource    target  time  is_train\n0  4194305  23068698     0         1\n----Batch 7: Shape (1037, 4)----\nsource   target  time  is_train\n0  7340035  4194337     0         0\n----Batch 8: Shape (1067, 4)----\nsource   target  time  is_train\n0       3  1048595     0         1\n----Batch 9: Shape (986, 4)----\nsource    target  time  is_train\n0  9437185  13631508     0         1\nSee\nthe ML Workbench edge loader tutorial notebook\nfor examples.\ndata\ndata \u2192 Any\nA property of the instance.\nThe\ndata\nproperty stores all edges if all data is loaded in a single batch.\nIf there are multiple batches of data, the\ndata\nproperty returns the instance itself.\nVertexLoader\nData loader that loads all vertices from the graph in batches.\nA vertex loader instance is an iterable.\nWhen you loop through a vertex loader instance, it loads one batch of data from the graph to which you established a connection in each iteration.\nThe size and total number of batches are specified when you define the vertex loader instance.\nThe boolean attribute provided to\nfilter_by\nindicates which vertices are included.\nIf you need random batches, set\nshuffle\nto True.\nExamples:\nThe following for loop loads all vertices in the graph and prints one from each batch:\nInput\nOutput\nvertex_loader = conn.gds.vertexLoader(\nnum_batches=10,\nattributes=[\"time\", \"is_train\"],\nshuffle=True,\nfilter_by=None\n)\n\nfor i, batch in enumerate(edge_loader):\nprint(\"----Batch {}: Shape {}----\".format(i, batch.shape))\nprint(batch.head(1))\n(1)\n1\nSince the example does not provide an output format, the output format defaults to panda frames, have access to the methods of panda frame instances.\n----Batch 0: Shape (1129, 4)----\nsource    target  time  is_train\n0  3145728  22020185     0         1\n----Batch 1: Shape (1002, 4)----\nsource    target  time  is_train\n0  1048577  20971586     0         1\n----Batch 2: Shape (1124, 4)----\nsource   target  time  is_train\n0       4  9437199     0         1\n----Batch 3: Shape (1071, 4)----\nsource    target  time  is_train\n0  11534340  32505859     0         1\n----Batch 4: Shape (978, 4)----\nsource    target  time  is_train\n0  11534341  16777293     0         1\n----Batch 5: Shape (1149, 4)----\nsource   target  time  is_train\n0  5242882  2097158     0         1\n----Batch 6: Shape (1013, 4)----\nsource    target  time  is_train\n0  4194305  23068698     0         1\n----Batch 7: Shape (1037, 4)----\nsource   target  time  is_train\n0  7340035  4194337     0         0\n----Batch 8: Shape (1067, 4)----\nsource   target  time  is_train\n0       3  1048595     0         1\n----Batch 9: Shape (986, 4)----\nsource    target  time  is_train\n0  9437185  13631508     0         1\nSee\nthe ML Workbench tutorial notebook\nfor more examples.\ndata\ndata \u2192 Any\nA property of the instance.\nThe\ndata\nproperty stores all data if all data is loaded in a single batch.\nIf there are multiple batches of data, the\ndata\nproperty returns the instance itself.\nGraphLoader\nData loader that loads all edges from the graph in batches, along with the vertices that are connected with each edge.\nDifferent from NeighborLoader which produces connected subgraphs, this loader\nloads all edges by batches and vertices attached to those edges.\nThere are two ways to use the data loader:\nIt can be used as an iterable, which means you can loop through\nit to get every batch of data. If you load all data at once (\nnum_batches=1\n),\nthere will be only one batch (of all the data) in the iterator.\nYou can access the\ndata\nproperty of the class directly. If there is\nonly one batch of data to load, it will give you the batch directly instead\nof an iterator, which might make more sense in that case. If there are\nmultiple batches of data to load, it will return the loader itself.\nExamples:\nThe following for loop prints all edges and their connected vertices in batches.\nThe output format is\nPyG\n:\nInput\nOutput\ngraph_loader = conn.gds.graphLoader(\nnum_batches=10,\nv_in_feats = [\"x\"],\nv_out_labels = [\"y\"],\nv_extra_feats = [\"train_mask\", \"val_mask\", \"test_mask\"],\ne_in_feats=[\"time\"],\ne_out_labels=[],\ne_extra_feats=[\"is_train\", \"is_val\"],\noutput_format = \"PyG\",\nshuffle=True,\nfilter_by=None\n)\nfor i, batch in enumerate(graph_loader):\nprint(\"----Batch {}----\".format(i))\nprint(batch)\n----Batch 0----\nData(edge_index=[2, 1128], edge_feat=[1128], is_train=[1128], is_val=[1128], x=[1061, 1433], y=[1061], train_mask=[1061], val_mask=[1061], test_mask=[1061])\n----Batch 1----\nData(edge_index=[2, 997], edge_feat=[997], is_train=[997], is_val=[997], x=[1207, 1433], y=[1207], train_mask=[1207], val_mask=[1207], test_mask=[1207])\n----Batch 2----\nData(edge_index=[2, 1040], edge_feat=[1040], is_train=[1040], is_val=[1040], x=[1218, 1433], y=[1218], train_mask=[1218], val_mask=[1218], test_mask=[1218])\n----Batch 3----\nData(edge_index=[2, 1071], edge_feat=[1071], is_train=[1071], is_val=[1071], x=[1261, 1433], y=[1261], train_mask=[1261], val_mask=[1261], test_mask=[1261])\n----Batch 4----\nData(edge_index=[2, 1091], edge_feat=[1091], is_train=[1091], is_val=[1091], x=[1163, 1433], y=[1163], train_mask=[1163], val_mask=[1163], test_mask=[1163])\n----Batch 5----\nData(edge_index=[2, 1076], edge_feat=[1076], is_train=[1076], is_val=[1076], x=[1018, 1433], y=[1018], train_mask=[1018], val_mask=[1018], test_mask=[1018])\n----Batch 6----\nData(edge_index=[2, 1054], edge_feat=[1054], is_train=[1054], is_val=[1054], x=[1249, 1433], y=[1249], train_mask=[1249], val_mask=[1249], test_mask=[1249])\n----Batch 7----\nData(edge_index=[2, 1006], edge_feat=[1006], is_train=[1006], is_val=[1006], x=[1185, 1433], y=[1185], train_mask=[1185], val_mask=[1185], test_mask=[1185])\n----Batch 8----\nData(edge_index=[2, 1061], edge_feat=[1061], is_train=[1061], is_val=[1061], x=[1250, 1433], y=[1250], train_mask=[1250], val_mask=[1250], test_mask=[1250])\n----Batch 9----\nData(edge_index=[2, 1032], edge_feat=[1032], is_train=[1032], is_val=[1032], x=[1125, 1433], y=[1125], train_mask=[1125], val_mask=[1125], test_mask=[1125])\nSee\nthe ML Workbench tutorial notebook for graph loaders\nfor examples.\ndata\ndata \u2192 Any\nA property of the instance.\nThe\ndata\nproperty stores all data if all data is loaded in a single batch.\nIf there are multiple batches of data, the\ndata\nproperty returns the instance itself\nEdgeNeighborLoader\nA data loader that performs neighbor sampling from seed edges.\nYou can declare a\nEdgeNeighborLoader\ninstance with the factory function\nedgeNeighborLoader()\n.\nAn edge neighbor loader is an iterable.\nWhen you loop through a loader instance, it loads one batch of data from the graph to which you established a connection.\nIn every iteration, it first chooses a specified number of edges as seeds,\nthen starting from the vertices attached to those seed edges, it\npicks a specified number of neighbors of each vertex at random,\nthen the same number of neighbors of each neighbor, and repeat for a specified number of hops.\nIt loads both the vertices and the edges connecting them to their neighbors.\nThe edges and vertices sampled this way form one subgraph and is contained in one batch.\nYou can iterate on the instance until every edge has been picked as seed.\nExamples:\nThe following example iterates over an edge neighbor loader instance.\nfor i, batch in enumerate(edge_neighbor_loader):\nprint(\"----Batch {}----\".format(i))\nprint(batch)\nSee\nthe ML Workbench tutorial notebook\nfor examples.\ndata\ndata \u2192 Any\nA property of the instance.\nThe\ndata\nproperty stores all data if all data is loaded in a single batch.\nIf there are multiple batches of data, the\ndata\nproperty returns the instance itself\nNodePieceLoader\nA data loader that performs NodePiece sampling from the graph.\nYou can declare a\nNodePieceLoader\ninstance with the factory function\nnodePieceLoader()\n.\nA NodePiece loader is an iterable.\nWhen you loop through a loader instance, it loads one batch of data from the graph to which you established a connection.\nIn every iteration, the NodePiece loader selects a group of seed vertices of size batch size.\nFor each vertex in the batch, it will produce a set of the k closest \"anchor\" vertices in the graph,\nas well as up to j edge types. For more information on the NodePiece data loading scheme, the\nblog article\nand\npaper\nare good places to start.\nYou can iterate on the instance until every vertex has been picked as seed.\nExamples:\nThe following example iterates over an NodePiece loader instance.\nfor i, batch in enumerate(node_piece_loader):\nprint(\"----Batch {}----\".format(i))\nprint(batch)\nsaveTokens()\nsaveTokens(filename) \u2192 None\nSave tokens to pickle file\nParameter:\nfilename (str)\n: Filename to save the tokens to.\nreinstall_query()\nreinstall_query() \u2192 str\nReinstall the dataloader query.\nReturns:\nThe name of the query installed (str)\ndata\ndata \u2192 Any\nA property of the instance.\nThe\ndata\nproperty stores all data if all data is loaded in a single batch.\nIf there are multiple batches of data, the\ndata\nproperty returns the instance itself.\nfetch()\nfetch(vertices: list) \u2192 None\nFetch NodePiece results (anchors, distances, and relational context) for specific vertices.\nParameter:\nvertices (list of dict)\n: Vertices to fetch with their NodePiece results.\nEach vertex corresponds to a dict with two mandatory keys\n{\"primary_id\": \u2026\u200b, \"type\": \u2026\u200b}\nprecompute()\nprecompute() \u2192 None\nCompute NodePiece results (anchors and their distances) to cache attribute.\nHGTLoader\nA data loader that performs stratified neighbor sampling as in\nHeterogeneous Graph Transformer\n.\nYou can declare a\nHGTLoader\ninstance with the factory function\nhgtLoader()\n.\nA HGT loader is an iterable.\nWhen you loop through a HGT loader instance, it loads one batch of data at a time from the graph.\nIn every iteration, it first chooses a specified number of vertices as seeds,\nthen picks a specified number of neighbors of each type at random,\nthen the specified number of neighbors of every type of each neighbor, and repeat for a specified number of hops.\nIt loads both the vertices and the edges connecting them to their neighbors.\nThe vertices sampled this way along with their edges form one subgraph and is contained in one batch.\nYou can iterate on the instance until every vertex has been picked as seed.\nExamples:\nThe following example iterates over a HGT loader instance.\nfor i, batch in enumerate(hgt_loader):\nprint(\"----Batch {}----\".format(i))\nprint(batch)\nSee more details about the specific sampling method in\nHeterogeneous Graph Transformer\n.\ndata\ndata \u2192 Any\nA property of the instance.\nThe\ndata\nproperty stores all data if all data is loaded in a single batch.\nIf there are multiple batches of data, the\ndata\nproperty returns the instance itself\nfetch()\nfetch(vertices: list) \u2192 None\nFetch neighborhood subgraphs for specific vertices.\nParameter:\nvertices (list of dict)\n: Vertices to fetch with their neighborhood subgraphs.\nEach vertex corresponds to a dict with two mandatory keys\n{\"primary_id\": \u2026\u200b, \"type\": \u2026\u200b}", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_data_4", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_edgeneighborloader", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_reinstall_query", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_data_3", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_neighborloader", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_graphloader", "https://docs.tigergraph.com/pytigergraph/1.2/gds/dataloaders", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/1.1/gds/dataloaders", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_data_6", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_data_2", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_edgeloader", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_data_7", "https://docs.tigergraph.com/pytigergraph/1.4/gds/dataloaders", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_data", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_savetokens", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_fetch_3", "https://docs.tigergraph.com/pytigergraph/1.3/gds/dataloaders", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_nodepieceloader", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_fetch_2", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_hgtloader", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_data_5", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_fetch", "https://docs.tigergraph.com/pytigergraph/current/gds/factory-functions", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_precompute", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders#_vertexloader", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/1/gds/dataloaders", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/intro/", "content": "pyTigerGraph\npyTigerGraph is a Python package for connecting to TigerGraph databases.\nAlready familiar with pyTigerGraph?\nJoin the\npyTigerGraph Community\n, else, get to know pyTigerGraph below.\nGet to Know pyTigerGraph\nGet Started\nStep-by-step guides to help you get up and running.\nGet Started |\npyTiger 101\nCore Functions\nCore Functions\nallow you to use the  core features of the TigerGraph database through pyTigerGraph.\nGDS Functions\nGraph Data Science\n(GDS) Functions\nperform machine learning tasks.\nDatasets\nData Ingestion Functions\ningest stock datasets into a TigerGraph database.\nVisualizations\nUse\nVisualizations\nto visualize graphs.\nObject-Oriented Schema\nThe\nObject-Oriented Schema\nfunctionality allows users to manipulate schema elements in the database in an object-oriented approach in Python.\nContribute\nCheckout the\nContributing\nsection for instructions on how to contribute.\nRelease Notes\nSee\nRelease Notes\nfor the most up-to-date news on pyTigerGraph.\npyTigerGraph Community\nThere are many community resources that you can use for help and support using pyTigerGraph:\nTigerGraph Community Forum\nTigerGraph Community Discord\npyTigerGraph GitHub Issues\npyTigerGraph vs. pyTigerGraph[gds]\nWe offer two versions of the package:\npyTigerGraph\nand\npyTigerGraph[gds]\n.\npyTigerGraph\nis the default version and contains the core functionality of pyTigerGraph, including the following:\nData manipulation functions:inserting, updating, upserting, deleting, and retrieving vertices and edges.\nQuery functions: running and managing\nqueries\ninside the TigerGraph\ndatabase\nMetadata functions: fetching details of graphs/schemas, vertex and edge types, and other\nschema objects and object types\nAuthentication and authorization functions\nMiscellaneous utility functions\nThe\npyTigerGraph[gds]\nversion of pyTigerGraph is a drop-in replacement for\npyTigerGraph\n,\nbut adds support for Graph Data Science and Graph machine learning capabilities.\nThis includes:\nGraph feature engineering using algorithms from the\nGSQL Graph Data Science Library\n.\nData loaders for training and inference of Graph Neural Network (GNN) models using PyTorch Geometric and DGL.\nMachine learning utilities for splitting vertices into training, validation, and testing sets.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/intro/#_pytigergraph_community", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/intro/#graph-ml:intro:", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/1.4/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/intro/#_get_to_know_pytigergraph", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/pytigergraph/current/intro/#_pytigergraph_vs_pytigergraphgds", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/querying/query-operations", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "content": "Legacy Version Documentation\nThis page lists all LTS (Long-Term Support) and previous versions of pyTigerGraph.\nLTS Versions\n1.5\nOther Versions\n1.4\n1.3\n1.2\n1.1\n1.0", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions#_lts_versions", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/1.4/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions#_other_versions", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/contributing/", "content": "Contributing to pyTigerGraph\nDownload the Repository\nYou can download the repository from GitHub by:\ngit clone https://github.com/tigergraph/pyTigerGraph.git\nInstall the Local Version of the Package\nOnce downloaded, you can install the local version of the package (without GDS support) by:\npip install '.'\nWithin the\npyTigerGraph\ndirectory, you can run the following command to install the GDS version of the package:\npip install '.[gds]'\nMake Changes\nMake the changes you want to make to the package. Make sure to document your changes in the code with docstrings and comments. The docstrings should be formatted as follows:\ndef getVertexType(self, vertexType: str, force: bool = False) -> dict:\n    \"\"\"Returns the details of the specified vertex type.\n\n    Args:\n        vertexType:\n            The name of of the vertex type.\n        force:\n            If `True`, forces the retrieval the schema metadata again, otherwise returns a\n            cached copy of vertex type details (if they were already fetched previously).\n\n    Returns:\n        The metadata of the vertex type.\n    \"\"\"\nAdditionally, all function definitions should have type hinting for both the arguments and the return value.\nFinally, unit tests should be written to test the funcitonality of the change. See the\ntesting documentation\nfor more information.\nSubmit a Pull Request\nOnce you have made the changes you want to make, you can submit a pull request to the repository. The pull request will be evaluated by our team and must have three parts:\n1) Unit tests written in the\ntests\ndirectory.\n2) Documentation in the form of docstrings and comments in the code.\n3) A short writeup of the changes you are making and why (this is what will be displayed on the pull request page).\nAfter that, we may reach out with further changes or suggestions to improve your pull request. Once your pull request is accepted, it will be merged into the master branch for deployment in the next release of the package. Steps 1 and 2 may be skipped when making changes such as fixing typos or improving documentation, although existing unittests will be ran against your changes to ensure they pass.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/1/contributing/", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/contributing/#_submit_a_pull_request", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/contributing/#_download_the_repository", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/1.3/contributing/", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/1.4/contributing/", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/contributing/#_install_the_local_version_of_the_package", "https://docs.tigergraph.com/pytigergraph/current/contributing/tests", "https://docs.tigergraph.com/pytigergraph/current/contributing/#_make_changes", "https://docs.tigergraph.com/pytigergraph/1.2/contributing/", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/1.1/contributing/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "content": "NodePiece Models\nNodePieceMLPForVertexClassification\nThis model is for training an multi-layer perceptron (MLP) on batches produced by NodePiece dataloaders, and transformed by the\nNodePieceMLPTransform\n.\nThe architecture is for a vertex classification task, and assumes the label of each vertex is in a batch attribute called\n\"y\"\n, such as what is produced by the\nNodePieceMLPTransform\n.\nBy default, this model collects\nClassficiationMetrics\n, and uses cross entropy as its loss function.\n_init_\n()\ninit\n(num_layers: int, out_dim: int, hidden_dim: int, vocab_size: int, sequence_length: int, embedding_dim = 768, dropout = 0.0, class_weights = None)\nInitialize a NodePieceMLPForVertexClassification.\nInitializes the model.\nParameters:\nnum_layers (int)\n: The total number of layers in your model.\nout_dim (int)\n: The output dimension of the model, a.k.a. the number of classes in the classification task.\nhidden_dim (int)\n: The hidden dimension of your model.\nvocab_size (int)\n: The number of tokens produced by NodePiece. Can be accessed via the dataloader using\nloader.num_tokens\n.\nsequence_length (int)\n: The number of tokens used to represent a single data instance. Is the sum of\nmax_anchors\nand\nmax_relational_context\ndefined in the dataloader.\nembedding_dim (int)\n: The dimension to embed the tokens in.\ndropout (float)\n: The percentage of dropout to be applied after every layer of the model (excluding the output layer).\nclass_weights (torch.Tensor)\n: Weight the importance of each class in the classification task when computing loss. Helpful in imbalanced classification tasks.\nforward()\nforward(batch, get_probs = False)\nMake a forward pass.\nParameters:\nbatch\n: The batch of data, in the same format as the data produced by\nNodePieceMLPTransform\nget_probs (bool, optional)\n: Return the softmax scores of the raw logits, which can be interpreted as probabilities. Defaults to false.\ncompute_loss()\ncompute_loss(logits, batch, loss_fn = None)\nCompute loss.\nParameters:\nlogits (torch.Tensor)\n: The output of the model.\nbatch\n: The batch of data, in the same format as the data produced by\nNodePieceMLPTransform\nloss_fn\n: A PyTorch-compatible function to produce the loss of the model, which takes in logits, the labels, and optionally the class_weights.\nDefaults to Cross Entropy.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece#_forward", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece#_init", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece#_nodepiecemlpforvertexclassification", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece#_compute_loss", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/1.4/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "content": "Connecting to TigerGraph\nHaving installed pyTigerGraph, the next step is to connect to a running TigerGraph instance to access and make changes to your graph data.\nTigerGraph Cloud instances and non-Cloud instances require different credentials.\nThis page covers both connections to Cloud and non-Cloud instances.\n1. Prerequisites\npyTigerGraph is installed on your machine.\nYou have access to a running TigerGraph instance.\nYou have created a graph on your TigerGraph instance.\nIf your TigerGraph instance has authentication enabled, you have created a graph, and generated a\nsecret\n.\nSee\nManaging Credentials\nfor how to create a secret.\n2. Connect to a graph on a non-Cloud TigerGraph instance\nTo access a graph on a non-Cloud TigerGraph instance, you need to provide the following information:\nHostname or IP address of the instance\nName of the graph you are connecting to\nYour\ndatabase username and password\nSecret associated with your database user and graph\n2.1. Initiate connection\nUse the\nTigerGraphConnection\nfunction to initiate a connection to your TigerGraph instance:\nconn = tg.TigerGraphConnection(host=\"<hostname>\", graphname=\"<graph_name>\", username=\"<username>\", password=\"<password>\")\n(1)\nconn.getToken(<secret>)\n(2)\n1\nThe username and password are provided via the constructor of\nthe\nTigerGraphConnection\nclass\n.\n2\nSecrets are unique strings that serve as a user\u2019s credentials when generating authentication tokens for REST API endpoints.\nThe graph in this context is a logical container that consists of object type definitions (vertex and edge types, user-defined types (UDTs), data sources, etc.)  and the instances of these object types.\nA TigerGraph instance can contain multiple graphs, so you need to specify which one you want to use.\n2.2. Generate authentication token\nIf the instance has user authentication enabled, you also need to provide a\nsecret\n, which is a unique string that serve as a user\u2019s credential when creating authentication tokens for TigerGraph\u2019s REST API endpoints.\nRun the following function to generate an authentication.\nAfter running the function, the token is saved to the\nTigerGraphConnection\nobject, and you can now use its methods to access and modify graph data.\nconn.getToken(<secret>)\n2.3. Example\nIn this command, the user is connecting to the\n127.0.0.1\nhost and accessing the\nGoodsDelivery\ngraph, providing the username\nhsolo\nand corresponding password\nf4lc0n\nas well as the secret for the bearer token authentication scheme.\nfrom pyTigerGraph import TigerGraphConnection\n\nconn = TigerGraphConnection(host=\"127.0.0.1\", graphname=\"GoodsDelivery\", username=\"hsolo\", password=\"f4lc0n\")\nconn.getToken('oodvd1upqbj96vq22jof21o8nl8cjkd5')\n(1)\n1\nThe string in the\ngetToken()\nargument is a secret.\nSee\ntigergraph-server:user-access:managing-credentials.adoc#_create_a_secret\nfor how to create a secret.\n3. Connect to a graph on a TigerGraph Cloud instance\nThis process applies to TigerGraph Cloud solutions created after July 5th, 2022.\nIf your solution was created before that date, follow\nthe procedure for non-Cloud instances\ninstead to connect to your solution.\nTo connect to a TigerGraph Cloud instance, you no longer need to provide a username-password pair.\nYou only need to provide the following information:\nHostname or IP address of the instance\nName of the graph you are connecting to\nSecret associated with your database user and graph.\nTo create a secret on TigerGraph Cloud, you need to use Admin Portal interface and click the plus sign on the\nMy Profile page to create a secret for your user\n.\n3.1. Establish initial connection\nUse the\nTigerGraphConnection\nconstructor function to declare a\nTigerGraphConnection\nobject:\nfrom pyTigerGraph import TigerGraphConnection\n\nconn = TigerGraphConnection(\n    host=<hostname>,\n    graphname=<graph_name>,\n    gsqlSecret=<secret>,\n)\n3.2. Generate authentication token\nCloud instances all have authentication enabled.\nBefore you can access graph data, you need to run\ngetToken()\nfunction to generate a authentication token.\nYou need to provide your secret again in this function call:\nconn.getToken(<secret>)\n3.3. Example\nIn this command, the user is connecting to the\nr_alliance.i.tgcloud.io\ncloud instance and accessing the\nGoodsDelivery\ngraph, providing the secret for the bearer token authentication scheme.\nfrom pyTigerGraph import TigerGraphConnection\n\nconn = TigerGraphConnection(host=\"r_alliance.i.tgcloud.io\", graphname=\"GoodsDelivery\", gsqlSecret=\"oodvd1upqbj96vq22jof21o8nl8cjkd5\")\n(1)\nconn.getToken('oodvd1upqbj96vq22jof21o8nl8cjkd5')\n(1)\n1\nThe string in the\ngetToken()\nargument is a secret.\nSee\nManaging Credentials\nfor how to create a secret.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/gui/current/admin-portal/management/user-management#_my_profile", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/1/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/1.1/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection#_connect_to_a_graph_on_a_tigergraph_cloud_instance", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection#_example_2", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection#_establish_initial_connection", "https://docs.tigergraph.com/tigergraph-server/current/user-access/user-credentials#_create_a_secret", "https://docs.tigergraph.com/tigergraph-server/current/user-access/#_users_and_credentials", "https://docs.tigergraph.com/pytigergraph/1.3/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection#_generate_authentication_token", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection#_initiate_connection", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection#_generate_authentication_token_2", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/1.4/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/tigergraph-server/current/user-access/user-credentials#_secrets", "https://docs.tigergraph.com/pytigergraph/1.2/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection#_example", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection#_connect_to_a_graph_on_a_non_cloud_tigergraph_instance", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection#_prerequisites", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "content": "Core Functions\nCore functions allow you to use the following core features of the TigerGraph database through pyTigerGraph:\nManaging secrets and securing your connection to TigerGraph instances\nRetrieving graph schema\nRun loading jobs\nUpserting vertices and edges\nInstalling and running queries\nExecuting GSQL code\nRetrieve version and license information\nCore functions are divided into the following categories:\nAuthentication Functions\nSchema Functions\nLoading Job Functions\nVertex Functions\nEdge Functions\nQuery Functions\nUser Defined Tuple (UDT) Functions\nGSQL Interface\nUtility Functions\nPath Finding Functions", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/1/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_get_eval_metrics", "content": "Model Trainer and Callbacks\nTrain Graph Machine Learning models (such as GraphSAGE and NodePiece) in a concise way.\npyTigerGraph offers built-in models that can be used with the Trainer, consuming\npyTigerGraph dataloaders.\nCallbacks are classes that perform arbitrary operations at various stages of the\ntraining process. Inherit from the\nBaseCallback\nclass to create compatible operations.\nBaseCallback\nThe\nBaseCallback\nclass is an abstract class that all other trainer\ncallbacks inherit from. It contains a series of functions that are executed\nduring that point in time of the trainer\u2019s execution, such as the beginning\nor end of an epoch. Inherit from this class if a custom callback implementation is desired.\non_init_end()\non_init_end(trainer)\nRun operations after the initialization of the trainer.\nParameter:\ntrainer (pyTigerGraph Trainer)\n: Takes in the trainer in order to perform operations on it.\non_epoch_start()\non_epoch_start(trainer)\nRun operations at the start of a training epoch.\nParameter:\ntrainer (pyTigerGraph Trainer)\n: Takes in the trainer in order to perform operations on it.\non_train_step_start()\non_train_step_start(trainer)\nRun operations at the start of a training step.\nParameter:\ntrainer (pyTigerGraph Trainer)\n: Takes in the trainer in order to perform operations on it.\non_train_step_end()\non_train_step_end(trainer)\nRun operations at the end of a training step.\nParameter:\ntrainer (pyTigerGraph Trainer)\n: Takes in the trainer in order to perform operations on it.\non_epoch_end()\non_epoch_end(trainer)\nRun operations at the end of an epoch.\nParameter:\ntrainer (pyTigerGraph Trainer)\n: Takes in the trainer in order to perform operations on it.\non_eval_start()\non_eval_start(trainer)\nRun operations at the start of the evaulation process.\nParameter:\ntrainer (pyTigerGraph Trainer)\n: Takes in the trainer in order to perform operations on it.\non_eval_step_start()\non_eval_step_start(trainer)\nRun operations at the start of an evaluation batch.\nParameter:\ntrainer (pyTigerGraph Trainer)\n: Takes in the trainer in order to perform operations on it.\non_eval_step_end()\non_eval_step_end(trainer)\nRun operations at the end of an evaluation batch.\nParameter:\ntrainer (pyTigerGraph Trainer)\n: Takes in the trainer in order to perform operations on it.\non_eval_end()\non_eval_end(trainer)\nRun operations at the end of the evaluation process.\nParameter:\ntrainer (pyTigerGraph Trainer)\n: Takes in the trainer in order to perform operations on it.\nPrinterCallback\nTo use, import the class and pass it to the Trainer\u2019s callback argument.\nfrom pyTigerGraph.gds.trainer import Trainer, PrinterCallback\n\ntrainer = Trainer(model, training_dataloader, eval_dataloader, callbacks=[PrinterCallback])\nDefaultCallback\nThe\nDefaultCallback\nclass logs metrics and updates progress bars during the training process.\nThe Trainer\ncallbacks\nparameter is populated with this callback.\nIf you define other callbacks with that parameter, you will have to pass\nDefaultCallback\nagain in your list of callbacks.\n_init_\n()\ninit\n(output_dir = \"./logs\", use_tqdm = True)\nInstantiate the Default Callback.\nParameters:\noutput_dir (str, optional)\n: Path to output directory to log metrics to. Defaults to\n./logs\nuse_tqdm (bool, optional)\n: Whether to use tqdm for progress bars. Defaults to True.\nInstall the\ntqdm\npackage if the progress bar is desired.\nTrainer\nTrain graph machine learning models that comply with the\nBaseModel\nobject in pyTigerGraph.\nPerforms training and evaluation loops and automatically collects metrics for the given task.\nPyTorch is required to use the Trainer.\n_init_\n()\ninit\n(model, training_dataloader: BaseLoader, eval_dataloader: BaseLoader, callbacks, metrics = None, target_type = None, loss_fn = None, optimizer = None, optimizer_kwargs)\nInstantiate a Trainer.\nCreate a Trainer object to train graph machine learning models.\nParameters:\nmodel (pyTigerGraph.gds.models.base_model.BaseModel)\n: A graph machine learning model that inherits from the BaseModel class.\ntraining_dataloader (pyTigerGraph.gds.dataloaders.BaseLoader)\n: A pyTigerGraph dataloader to iterate through training batches.\neval_dataloader (pyTigerGraph.gds.dataloaders.BaseLoader)\n: A pyTigerGraph dataloader to iterate through evaluation batches.\ncallbacks (List[pyTigerGraph.gds.trainer.BaseCallback], optional)\n: A list of\nBaseCallback\nobjects. Defaults to\n[DefaultCallback]\nmetrics (List[pyTigerGraph.gds.metrics.BaseMetrics] or pyTigerGraph.gds.metrics.BaseMetrics, optional)\n: A list or object of type\nBaseMetrics\n. If not specified, will use the metrics corresponding to the built-in model.\ntarget_type (string or tuple, optional)\n: If using heterogenous graphs, specify the schema element to compute loss and metrics on.\nIf using vertices, specify it with a string.\nIf using an edge type, use the form\n(\"src_vertex_type\", \"edge_type\", \"dest_vertex_type\")\nloss_fn (torch.nn._Loss, optional)\n: A function that computes the loss of the model. If not specified, the default loss function of the model type will be used.\noptimizer (torch.optim.Optimizer, optional)\n: Specify the optimizer to be used during the training process. Defaults to Adam.\noptimizer_kwargs (dict, optional)\n: Dictionary of optimizer arguments, such as learning rate. Defaults to optimizer\u2019s default values.\nupdate_train_step_metrics()\nupdate_train_step_metrics(metrics)\nUpdate the metrics for a training step.\nParameter:\nmetrics (dict)\n: Dictionary of calculated metrics.\nget_train_step_metrics()\nget_train_step_metrics()\nGet the metrics for a training step.\nReturns:\nDictionary of training metrics results.\nreset_train_step_metrics()\nreset_train_step_metrics()\nReset training step metrics.\nupdate_eval_metrics()\nupdate_eval_metrics(metrics)\nUpdate the metrics of an evaluation loop.\nParameter:\nmetrics (dict)\n: Dictionary of calculated metrics.\nget_eval_metrics()\nget_eval_metrics()\nGet the metrics for an evaluation loop.\nReturns:\nDictionary of evaluation loop metrics results.\nreset_eval_metrics()\nreset_eval_metrics()\nReset evaluation loop metrics.\ntrain()\ntrain(num_epochs = None, max_num_steps = None)\nTrain a model.\nParameters:\nnum_epochs (int, optional)\n: Number of epochs to train for. Defaults to 1 full iteration through the\ntraining_dataloader\n.\nmax_num_steps (int, optional)\n: Number of training steps to perform.\nnum_epochs\ntakes priority over this parameter.\nDefaults to the length of the\ntraining_dataloader\neval()\neval(loader = None)\nEvaluate a model.\nParameter:\nloader (pyTigerGraph.gds.dataloaders.BaseLoader, optional)\n: A dataloader to iterate through.\nIf not defined, defaults to the\neval_dataloader\nspecified in the Trainer instantiation.\npredict()\npredict(batch)\nPredict a batch.\nParameter:\nbatch (any)\n: Data object that is compatible with the model being trained.\nMake predictions on the batch passed in.\nReturns:\nReturns a tuple of\n(model output, evaluation metrics)", "links": ["https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_basecallback", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_reset_eval_metrics", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_on_init_end", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_printercallback", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_on_eval_end", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_predict", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_reset_train_step_metrics", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_eval", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_update_eval_metrics", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_on_epoch_start", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_init", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_on_train_step_end", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_on_eval_step_start", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_init_2", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_on_eval_step_end", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_defaultcallback", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_on_epoch_end", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_on_eval_start", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_trainer", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_train", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_update_train_step_metrics", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_get_train_step_metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_get_eval_metrics", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer#_on_train_step_start", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/1.4/gds/trainer", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "content": "Data Transforms\nThere are currently two sub-modules,\nnodepiece_transforms\n, and\npyg_transforms\n. The NodePiece transforms help convert batches produced by NodePiece dataloaders into a format used by PyTorch models. The PyG transforms help convert batches of PyTorch Geometric objects (produced by loader such as the NeighborLoader and HGTLoader).\nAll transforms can be called by passing the batch into the instantiated object, for example:\nfrom pyTigerGraph.gds.transforms.pyg_transforms import TemporalPyGTransform\n#instantiate connection here...\ntransform = TemporalPyGTransform(vertex_start_attrs=vertex_start_attrs,\n                                        vertex_end_attrs=vertex_end_attrs,\n                                        edge_start_attrs=edge_start_attrs,\n                                        edge_end_attrs=edge_end_attrs,\n                                        start_dt=0,\n                                        end_dt=6,\n                                        feature_transforms=feature_transforms)\ntrain_loader = conn.gds.neighborLoader(params here, callback_fn = lambda x: transform(x))", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/1.4/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "content": "Authentication Functions\nThe functions on this page authenticate connections and manage TigerGraph credentials.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\ngetSecrets()\ngetSecrets() \u2192 dict\nIssues a\nSHOW SECRET\nGSQL statement and returns the secret generated by that\nstatement.\nSecrets are unique strings that serve as credentials when generating authentication tokens.\nReturns:\nA dictionary of\nalias: secret_string\npairs.\nNotes:\nThis function returns the masked version of the secret. The original value of the secret cannot\nbe retrieved after creation.\nshowSecrets()\nshowSecrets() \u2192 dict\nDEPRECATED\nUse\ngetSecrets()\ninstead.\ncreateSecret()\ncreateSecret(alias: str = \"\", withAlias: bool = False) \u2192 Union[str, dict]\nIssues a\nCREATE SECRET\nGSQL statement and returns the secret generated by that statement.\nSecrets are unique strings that serve as credentials when generating authentication tokens.\nParameters:\nalias\n: The alias of the secret.\nThe system will generate a random alias for the secret if the user does not provide\nan alias for that secret. Randomly generated aliases begin with\nAUTO_GENERATED_ALIAS_\nand include a random 7-character string.\nwithAlias\n: Return the new secret as an\n{\"alias\": \"secret\"}\ndictionary. This can be useful if\nan alias was not provided, for example if it is auto-generated).\nReturns:\nThe secret string.\nNotes:\nGenerally, secrets are generated by the database administrator and\nused to generate a token. If you use this function, please consider reviewing your\ninternal processes of granting access to TigerGraph instances. Normally, this function\nshould not be necessary and should not be executable by generic users.\ndropSecret()\ndropSecret(alias: Union[str, list], ignoreErrors: bool = True) \u2192 str\nDrops a secret.\nSee\nthis\nfor more details.\nParameters:\nalias\n: One or more alias(es) of secret(s).\nignoreErrors\n: Ignore errors arising from trying to drop non-existent secrets.\nRaises:\nTigerGraphException\nif a non-existent secret is attempted to be dropped (unless\nignoreErrors\nis\nTrue\n). Re-raises other exceptions.\ngetToken()\ngetToken(secret: str, setToken: bool = True, lifetime: int = None) \u2192 tuple\nRequests an authorization token.\nThis function returns a token only if REST++ authentication is enabled. If not, an exception\nwill be raised.\nSee\nthis\nfor more details.\nParameters:\nsecret\n: The secret (string) generated in GSQL using\nCREATE SECRET\n.\nSee\nthis\nfor more details.\nsetToken\n: Set the connection\u2019s API token to the new value (default:\nTrue\n).\nlifetime\n: Duration of token validity (in seconds, default 30 days = 2,592,000 seconds).\nReturns:\nA tuple of\n(<token>, <expiration_timestamp_unixtime>, <expiration_timestamp_ISO8601>)\n.\nThe return value can be ignored.\nThe expiration timestamp\u2019s time zone might be different from your computer\u2019s local time\nzone.\nRaises:\nTigerGraphException\nif REST++ authentication is not enabled or if an authentication\nerror occurred.\nEndpoint:\nPOST /requesttoken\nSee\nthis\nfor more details.\nrefreshToken()\nrefreshToken(secret: str, token: str = \"\", lifetime: int = None) \u2192 tuple\nExtends a token\u2019s lifetime.\nThis function works only if REST++ authentication is enabled. If not, an exception will be\nraised.\nSee\nthis\nfor more details.\nParameters:\nsecret\n: The secret (string) generated in GSQL using\nCREATE SECRET\n.\nSee\nthis\nfor more details.\ntoken\n: The token requested earlier. If not specified, refreshes current connection\u2019s token.\nlifetime\n: Duration of token validity (in seconds, default 30 days = 2,592,000 seconds) from\ncurrent system timestamp.\nReturns:\nA tuple of\n(<token>, <expiration_timestamp_unixtime>, <expiration_timestamp_ISO8601>)\n.\nThe return value can be ignored.\nNew expiration timestamp will be now + lifetime seconds,\nnot\ncurrent expiration\ntimestamp + lifetime seconds.\nThe expiration timestamp\u2019s time zone might be different from your computer\u2019s local time\nzone.\nRaises:\nTigerGraphException\nif REST++ authentication is not enabled or if an authentication error\noccurs.\nNote:\nEndpoint:\nPUT /requesttoken\nSee\nthis\nfor more details.\ndeleteToken()\ndeleteToken(secret, token = None, skipNA = True) \u2192 bool\nDeletes a token.\nThis function works only if REST++ authentication is enabled. If not, an exception will be\nraised.\nSee\nthis\nfor more details.\nParameters:\nsecret\n: The secret (string) generated in GSQL using\nCREATE SECRET\n.\nSee\nthis\nfor more details.\ntoken\n: The token requested earlier. If not specified, deletes current connection\u2019s token,\nso be careful.\nskipNA\n: Don\u2019t raise an exception if the specified token does not exist.\nReturns:\nTrue\n, if deletion was successful, or if the token did not exist but\nskipNA\nwas\nTrue\n.\nRaises:\nTigerGraphException\nif REST++ authentication is not enabled or an authentication error\noccurred, for example if the specified token does not exist.\nEndpoint:\nDELETE /requesttoken\nSee\nthis\nfor more details.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_request_a_token", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/auth", "https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_refresh_a_token", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth#_dropsecret", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_delete_a_token", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/tigergraph-server/current/user-access/managing-credentials#_create_a_secret", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth#_deletetoken", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/pytigergraph/1/core-functions/auth", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/tigergraph-server/current/user-access/managing-credentials#_drop_a_secret", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth#_gettoken", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/admin/admin-guide/user-access-management/user-privileges-and-authentication#rest-authentication", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth#_showsecrets", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth#_refreshtoken", "https://docs.tigergraph.com/tigergraph-server/current/user-access/enabling-user-authentication#_enable_restpp_authentication", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth#_getsecrets", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth#_createsecret", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "content": "TigerGraphConnection\nA TigerGraphConnection object provides the HTTP(S) communication used by all other modules.\n_init_\n()\ninit\n(host: str = \"http://127.0.0.1\", graphname: str = \"MyGraph\", gsqlSecret: str = \"\", username: str = \"tigergraph\", password: str = \"tigergraph\", tgCloud: bool = False, restppPort: Union[int, str] = \"9000\", gsPort: Union[int, str] = \"14240\", gsqlVersion: str = \"\", version: str = \"\", apiToken: str = \"\", useCert: bool = None, certPath: str = None, debug: bool = None, sslPort: Union[int, str] = \"443\", gcp: bool = False)\nInitiate a connection object.\nParameters:\nhost\n: The host name or IP address of the TigerGraph server. Make sure to include the\nprotocol (http:// or https://). If\ncertPath\nis\nNone\nand the protocol is https,\na self-signed certificate will be used.\ngraphname\n: The default graph for running queries.\ngsqlSecret\n: The secret key for GSQL.\nSee\nthis\nfor more details.\nusername\n: The username on the TigerGraph server.\npassword\n: The password for that user.\ntgCloud\n: Set to\nTrue\nif using TigerGraph Cloud. If your hostname contains\ntgcloud\n, then\nthis is automatically set to\nTrue\n, and you do not need to set this argument.\nrestppPort\n: The port for REST++ queries.\ngsPort\n: The port for gsql server.\ngsqlVersion\n: The version of the GSQL client to be used. Effectively the version of the database\nbeing connected to.\nversion\n: DEPRECATED; use\ngsqlVersion\n.\napiToken\n: DEPRECATED; use\ngetToken()\nwith a secret to get a session token.\nuseCert\n: DEPRECATED; the need for a CA certificate is now determined by URL scheme.\ncertPath\n: The filesystem path to the CA certificate. Required in case of https connections.\ndebug\n: DEPRECATED; configure standard logging in your app.\nsslPort\n: Port for fetching SSL certificate in case of firewall.\ngcp\n: DEPRECATED. Previously used for connecting to databases provisioned on GCP in TigerGraph Cloud.\nRaises:\nTigerGraphException: In case on invalid URL scheme.\ncustomizeHeader()\ncustomizeHeader(timeout: int = 16000, responseSize: int = 32000000.0)\nMethod to configure the request header.\nParameters:\ntiemout (int, optional)\n: The timeout value desired in milliseconds. Defaults to 16,000 ms (16 sec)\nresponseSize\n: The size of the response in bytes. Defaults to 3.2E7 bytes (32 MB).\nReturns:\nNothing. Sets\nresponseConfigHeader\nclass attribute.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/base", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base#_init", "https://docs.tigergraph.com/tigergraph-server/current/user-access/managing-credentials#_secrets.", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/1/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base#_customizeheader", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_runalgorithm", "content": "Featurizer\nThe Featurizer class provides methods for installing and running Graph Data Science Algorithms onto a TigerGraph server.\nAsyncFeaturizerResult\nObject to keep track of featurizer algorithms being ran in asynchronous mode. (\nrunAsync=True\n).\nwait()\nwait(refresh: float = 1)\nFunction call to block all execution if called until algorithm result is returned.\nParameter:\nrefresh (float)\n: How often to check for results. Defaults to 1 time every second.\nReturns:\nAlgorithm results when they become available.\nalgorithmComplete()\nalgorithmComplete()\nFunction to check if the algorithm has completed execution.\nReturns:\nTrue if algorithm has completed, False if the algorithm is still running.\nRaises:\nTigerGraphException if the algorithm was aborted or timed out.\nresult()\nresult()\nProperty to get the results of an algorithm\u2019s execution.\nIf the results are available, returns them.\nIf the results are not available yet, returns the string 'Algorithm Results not Available Yet'\nFeaturizer\nThe Featurizer pulls the most up-to-date version of the algorithm available in our public GitHub repository that is\ncompatible with your database version.\nNote: In environments not connected to the public internet, you can download the repository manually and use the featurizer\nlike this:\nimport pyTigerGraph as tg\nfrom pyTigerGraph.gds.featurizer import Featurizer\n\nconn = tg.TigerGraphConnection(host=\"HOSTNAME_HERE\", username=\"USERNAME_HERE\", password=\"PASSWORD_HERE\", graphname=\"GRAPHNAME_HERE\")\nconn.getToken(conn.createSecret())\nfeat = Featurizer(conn, repo=\"PATH/TO/MANUALLY_DOWNLOADED_REPOSITORY\")\n\nres = feat.runAlgorithm(\"tg_pagerank\", params={\"v_type\": \"Paper\", \"e_type\": \"CITES\"})\n\nprint(res)\nlistAlgorithms()\nlistAlgorithms(category: str = None) \u2192 None\nPrint the list of available algorithms in GDS.\nParameter:\ncategory (str)\n: the category of algorithms to print, if it is None then a summary will be printed.\ninstallAlgorithm()\ninstallAlgorithm(query_name: str, query_path: str = None, global_change: bool = False, distributed_query: bool = False) \u2192 str\nChecks if the query is already installed.\nIf the query is not installed, it installs the query and changes the schema if an attribute needs to be added.\nParameters:\nquery_name (str)\n: The name of query to be installed.\nquery_path (str, optional)\n: If using a custom query, the path to the\n.gsql\nfile that contains the query.\nNote: you must have the\nquery_name\nparameter match the name of the query in the file.\nglobal_change (bool, optional)\n: False by default. Set to true if you want to run\nGLOBAL SCHEMA_CHANGE JOB\n. For algorithms that are not schema free we need to specify this argument.\nSee\nthis\nfor more details.\ndistributed_query (bool, optional)\n: False by default.\nReturns:\nString of query name installed.\ngetParams()\ngetParams(query_name: str, printout: bool = True) \u2192 dict\nGet paramters for an algorithm.\nParameters:\nquery_name (str)\n: Name of the algorithm.\nprintout (bool, optional)\n: Whether to print out the parameters. Defaults to True.\nReturns:\nParameter dict the algorithm takes as input.\nrunAlgorithm()\nrunAlgorithm(query_name: str, params: dict = None, runAsync: bool = False, threadLimit: int = None, memoryLimit: int = None, feat_name: str = None, feat_type: str = None, custom_query: bool = False, schema_name: list = None, global_schema: bool = False, timeout: int = 2147480, sizeLimit: int = None, templateQuery: bool = False, distributed_query: bool = False) \u2192 Any\nRuns a TigerGraph Graph Data Science Algorithm. If a built-in algorithm is not installed, it will automatically install before execution.\nCustom algorithms will have to be installed using the\ninstallAlgorithm()\nmethod.\nIf the query accepts input parameters and the parameters have not been provided, calling this function runs the query with the default values for the parameters.\nIf the there isn\u2019t a default value in the query definition and no parameters are provided, the function raises a\nValueError\n.\nParameters:\nquery_name (str)\n: The name of the query to be executed.\nparams (dict)\n: Query parameters. A dictionary that corresponds to the algorithm parameters.\nIf specifying vertices as sources or destinations, must use the following form:\n{\"id\": \"vertex_id\", \"type\": \"vertex_type\"}\n, such as\nparams = {\"source\": {\"id\": \"Bob\", \"type\": \"Person\"}}\nrunAsync (bool, optional)\n: If True, runs the algorithm in asynchronous mode and returns a\nAsyncFeaturizerResult\nobject. Defaults to False.\nthreadLimit\n: Specify a limit of the number of threads the query is allowed to use on each node of the TigerGraph cluster.\nSee\nThread limit\nmemoryLimit\n: Specify a limit to the amount of memory consumed by the query (in MB). If the limit is exceeded, the query will abort automatically.\nSupported in database versions >= 3.8.\nSee\nMemory limit\nfeat_name (str, optional)\n: An attribute name that needs to be added to the vertex/edge. If the result attribute parameter is specified in the parameters, that will be used.\nfeat_type (str, optional)\n: Type of attribute that needs to be added to the vertex/edge. Only needed if\ncustom_query\nis set to\nTrue\n.\ncustom_query (bool, optional)\n: If the query is a custom query. Defaults to False.\nschema_name (list, optional)\n: List of Vertices/Edges that the attr_name need to added to them.\nIf the algorithm contains the parameters of\nv_type\nand\ne_type\nor\nv_type_set\nand\ne_type_set\n, these will be used automatically.\nglobal_schema (bool, optional)\n: False by default. Set to true if you want to run\nGLOBAL SCHEMA_CHANGE JOB\n.\nSee\nthis\nfor more details.\ntimeout (int, optional)\n: Maximum duration for successful query execution (in milliseconds).\nsizeLimit (int, optional)\n: Maximum size of response (in bytes).\ntemplateQuery (bool, optional)\n: Whether to call packaged template query.\nSee\nthis\nfor more details. for more details.\nNote that currently not every algorithm supports template query. More will be added in the future.\nDefault: False.\ndistributed_query (bool, optional)\n: Whether to run the query in distributed mode. Defaults to False.\nReturns:\nThe output of the query, a list of output elements (vertex sets, edge sets, variables,\naccumulators, etc.)", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/1.2/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_featurizer", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/1/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graph-ml/current/using-an-algorithm/#_packaged_template_queries", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_getparams", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/1.4/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_asyncfeaturizerresult", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_listalgorithms", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_installalgorithm", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_result", "https://docs.tigergraph.com/gsql-ref/current/ddl-and-loading/modifying-a-graph-schema#_global_vs_local_schema_changes.", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_specify_thread_limit", "https://docs.tigergraph.com/tigergraph-server/current/system-management/memory-management#_by_http_header", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_algorithmcomplete", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/1.1/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/1.3/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_runalgorithm", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer#_wait", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "content": "GSQL Interface\nUse GSQL within pyTigerGraph.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\ngsql()\ngsql(query: str, graphname: str = None, options = None) \u2192 Union[str, dict]\nRuns a GSQL query and processes the output.\nParameters:\nquery\n: The text of the query to run as one string. The query is one or more GSQL statement.\ngraphname\n: The name of the graph to attach to. If not specified, the graph name provided at the\ntime of establishing the connection will be used.\noptions\n: DEPRECATED\nReturns:\nThe output of the statement(s) executed.\ninstallUDF()\ninstallUDF(ExprFunctions: str = \"\", ExprUtil: str = \"\") \u2192 None\nInstall user defined functions (UDF) to the database.\nSee\nthis\nfor more details. for details on UDFs.\nParameters:\nExprFunctions (str, optional)\n: Path or URL to the file for ExprFunctions. Defaults to '' (a blank path/URL).\nExprUtil (str, optional)\n: Path or URL to the file for ExprUtil. Defaults to '' (a blank path/URL).\nReturns:\nStatus of the installation.\ngetUDF()\ngetUDF(ExprFunctions: bool = True, ExprUtil: bool = True) \u2192 Union[str, Tuple[str, str]]\nGet user defined functions (UDF) installed in the database.\nSee\nthis\nfor more details. for details on UDFs.\nParameters:\nExprFunctions (bool, optional)\n: Whether to get ExprFunctions. Defaults to True.\nExprUtil (bool, optional)\n: Whether to get ExprUtil. Defaults to True.\nReturns:\nstr: If only one of\nExprFunctions\nor\nExprUtil\nis True, return of the content of that file.\nTuple[str, str]: content of ExprFunctions and content of ExprUtil.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/gsql", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql#_getudf", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/1/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/gsql-ref/current/querying/func/query-user-defined-functions", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/gsql", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql#_installudf", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql#_gsql", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "content": "Visualization Functions\nContains functions to visualize graphs.\ndrawSchema()\ndrawSchema(schema: dict, style: list)\nVisualize a graph schema.\nParameter:\nschema (dict)\n: A dictionary that describes a graph schema. This can be obtained by running\nconn.getSchema()\nstyle (list, optional)\n: A list of styles that complies with ipycytoscape standards.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization#_drawschema", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/1.2/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.4/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/1.3/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "content": "Object-Oriented Schema\nThe Object-Oriented Schema functionality allows users to manipulate schema elements in the database in an object-oriented approach in Python.\nTo add an AccountHolder vertex and a HOLDS_ACCOUNT edge to the Ethereum dataset, simply:\nfrom pyTigerGraph import TigerGraphConnection\nfrom pyTigerGraph.schema import Graph, Vertex, Edge\n\nfrom datetime import datetime\nfrom typing import List, Dict, Optional, Union\nfrom dataclasses import dataclass, fields\n\nconn = TigerGraphConnection(host=\"http://YOUR_HOSTNAME_HERE\", graphname=\"Ethereum\")\n\ng = Graph(conn)\n\n\n@dataclass\nclass AccountHolder(Vertex):\n    name: str\n    address: str\n    accounts: List[str]\n    dob: datetime\n    some_map: Dict[str, int]\n    some_double: \"DOUBLE\"\n    primary_id: str = \"name\"  # always of type string, corresponds to the desired primary ID attribute.\n    primary_id_as_attribute: bool = True\n\n@dataclass\nclass HOLDS_ACCOUNT(Edge):\n    opened_on: datetime\n    from_vertex: Union[AccountHolder, g.vertex_types[\"Account\"]]\n    to_vertex: g.vertex_types[\"Account\"]\n    is_directed: bool = True\n    reverse_edge: str = \"ACCOUNT_HELD_BY\"\n    discriminator: str = \"opened_on\"\n\ng.add_vertex_type(AccountHolder)\n\ng.add_edge_type(HOLDS_ACCOUNT)\n\ng.commit_changes()\nUsers can define an entire graph schema in the approach below. Using the Cora dataset example, the schema would look something like this:\nfrom pyTigerGraph import TigerGraphConnection\nfrom pyTigerGraph.schema import Graph, Vertex, Edge\n\nconn = TigerGraphConnection(\"http://YOUR_HOSTNAME_HERE\")\n\ng = Graph()\n\n@dataclass\nclass Paper(Vertex):\n    id: int\n    y: int\n    x: List[int]\n    primary_id: str = \"id\"\n    primary_id_as_attribute: bool = True\n\n@dataclass\nclass CITES(Edge):\n    from_vertex: Paper\n    to_vertex: Paper\n    is_directed: bool = True\n    reverse_edge: str = \"R_CITES\"\n\ng.add_vertex_type(Paper)\ng.add_edge_type(CITES)\n\ng.commit_changes(conn)\nVertex\nAbstract parent class for other types of vertices to be inherited from.\nContains class methods to edit the attributes associated with the vertex type.\nWhen defining new vertex types, make sure to include the\nprimary_id\nand\nprimary_id_as_attribute\nclass attributes, as these are necessary to define the vertex in TigerGraph.\nFor example, to define an AccountHolder vertex type, use:\n@dataclass\nclass AccountHolder(Vertex):\n    name: str\n    address: str\n    accounts: List[str]\n    dob: datetime\n    some_map: Dict[str, int]\n    some_double: \"DOUBLE\"\n    primary_id: str = \"name\"\n    primary_id_as_attribute: bool = True\nadd_attribute()\nadd_attribute(attribute_name: str, attribute_type, default_value = None)\nFunction to add an attribute to the given vertex type.\nParameters:\nattribute_name (str)\n: The name of the attribute to add\nattribute_type (Python type)\n: The Python type of the attribute to add.\nFor types that are not supported in Python but are in GSQL, wrap them in quotes; e.g. \"DOUBLE\"\ndefault_value (type of attribute, default None)\n: The desired default value of the attribute. Defaults to None.\nremove_attribute()\nremove_attribute(attribute_name)\nFunction to remove an attribute from the given vertex type.\nParameter:\nattribute_name (str)\n: The name of the attribute to remove from the vertex.\nattributes()\nattributes()\nClass attribute to view the attributes and types of the vertex.\nEdge\nAbstract parent class for other types of edges to be inherited from.\nContains class methods to edit the attributes associated with the edge type.\nWhen defining new vertex types, make sure to include the required\nfrom_vertex\n,\nto_vertex\n,\nreverse_edge\n,\nis_directed\nattributes and optionally the\ndiscriminator\nattribute, as these are necessary to define the vertex in TigerGraph.\nFor example, to define an HOLDS_ACCOUNT edge type, use:\n@dataclass\nclass HOLDS_ACCOUNT(Edge):\n    opened_on: datetime\n    from_vertex: Union[AccountHolder, g.vertex_types[\"Account\"]]\n    to_vertex: g.vertex_types[\"Account\"]\n    is_directed: bool = True\n    reverse_edge: str = \"ACCOUNT_HELD_BY\"\n    discriminator: str = \"opened_on\"\nadd_attribute()\nadd_attribute(attribute_name, attribute_type, default_value = None)\nFunction to add an attribute to the given edge type.\nParameters:\nattribute_name (str)\n: The name of the attribute to add.\nattribute_type (Python type)\n: The Python type of the attribute to add.\nFor types that are not supported in Python but are in GSQL, wrap them in quotes; e.g. \"DOUBLE\"\ndefault_value (type of attribute, default None)\n: The desired default value of the attribute. Defaults to None.\nremove_attribute()\nremove_attribute(attribute_name)\nFunction to remove an attribute from the given edge type.\nParameter:\nattribute_name (str)\n: The name of the attribute to remove from the edge.\nattributes()\nattributes()\nClass attribute to view the attributes and types of the vertex.\nGraph\nThe graph object can be used in conjunction with a TigerGraphConnection to retrieve the schema of the connected graph.\nServes as the way to collect the definitions of Vertex and Edge types.\nTo instantiate the graph object with a connection to an existing graph, use:\nfrom pyTigerGraph.schema import Graph\n\ng = Graph(conn)\n_init_\n()\ninit\n(conn: TigerGraphConnection = None)\nGraph class for schema representation.\nParameter:\nconn (TigerGraphConnection, optional)\n: Connection to a TigerGraph database. Defaults to None.\nadd_vertex_type()\nadd_vertex_type(vertex: Vertex, outdegree_stats = True)\nAdd a vertex type to the list of changes to commit to the graph.\nParameters:\nvertex (Vertex)\n: The vertex type definition to add to the addition cache.\noutdegree_stats (bool, optional)\n: Whether or not to include \"WITH OUTEGREE_STATS=TRUE\" in the schema definition.\nUsed for caching outdegree, defaults to True.\nadd_edge_type()\nadd_edge_type(edge: Edge)\nAdd an edge type to the list of changes to commit to the graph.\nParameter:\nedge (Edge)\n: The edge type definition to add to the addition cache.\nremove_vertex_type()\nremove_vertex_type(vertex: Vertex)\nAdd a vertex type to the list of changes to remove from the graph.\nParameter:\nvertex (Vertex)\n: The vertex type definition to add to the removal cache.\nremove_edge_type()\nremove_edge_type(edge: Edge)\nAdd an edge type to the list of changes to remove from the graph.\nParameter:\nedge (Edge)\n: The edge type definition to add to the removal cache.\ncommit_changes()\ncommit_changes(conn: TigerGraphConnection = None)\nCommit schema changes to the graph.\nParameter:\nconn (TigerGraphConnection, optional)\n: Connection to the database to edit the schema of.\nNot required if the Graph was instantiated with a connection object.\nvertex_types()\nvertex_types()\nVertex types property.\nedge_types()\nedge_types()\nEdge types property.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_graph", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_edge", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_edge_types", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_init", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_attributes", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_add_attribute_2", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_add_attribute", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/1.4/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_remove_attribute", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_vertex", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_add_vertex_type", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_add_edge_type", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_attributes_2", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_remove_attribute_2", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/1/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/1.1/intro/", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_vertex_types", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_remove_vertex_type", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_remove_edge_type", "https://docs.tigergraph.com/pytigergraph/1.3/intro/", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/1.2/intro/", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def#_commit_changes", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "content": "Loading Job Functions\nThe functions on this page run loading jobs on the TigerGraph server.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\nrunLoadingJobWithFile()\nrunLoadingJobWithFile(filePath: str, fileTag: str, jobName: str, sep: str = None, eol: str = None, timeout: int = 16000, sizeLimit: int = 128000000) \u2192 Union[dict, None]\nExecute a loading job with the referenced file.\nThe file will first be uploaded to the TigerGraph server and the value of the appropriate\nFILENAME definition will be updated to point to the freshly uploaded file.\nThe argument\nUSING HEADER=\"true\"\nin the GSQL loading job may not be enough to\nload the file correctly. Remove the header from the data file before using this function.\nParameters:\nfilePath\n: File variable name or file path for the file containing the data.\nfileTag\n: The name of file variable in the loading job (DEFINE FILENAME <fileTag>).\njobName\n: The name of the loading job.\nsep\n: Data value separator. If your data is JSON, you do not need to specify this\nparameter. The default separator is a comma\n,\n.\neol\n: End-of-line character. Only one or two characters are allowed, except for the\nspecial case\n\\r\\n\n. The default value is\n\\n\ntimeout\n: Timeout in seconds. If set to\n0\n, use the system-wide endpoint timeout setting.\nsizeLimit\n: Maximum size for input file in bytes.\nEndpoint:\nPOST /ddl/{graph_name}\nSee\nRun a loading job\nuploadFile()\nuploadFile(filePath, fileTag, jobName = \"\", sep = None, eol = None, timeout = 16000, sizeLimit = 128000000) \u2192 dict\nDEPRECATED\nUse\nrunLoadingJobWithFile()\ninstead.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading#_uploadfile", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/loading", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading#_runloadingjobwithfile", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1/core-functions/loading", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/loading", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_run_a_loading_job", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getqueryperformance", "content": "Utility Functions\nUtility functions for pyTigerGraph.\nAll functions in this module are called as methods on a\nTigerGraphConnection\nobject\n.\necho()\necho(usePost: bool = False) \u2192 str\nPings the database.\nParameter:\nusePost\n: Use POST instead of GET\nReturns:\n\"Hello GSQL\" if everything was OK.\nEndpoint:\nGET /echo\nPOST /echo\nSee\nEcho\ngetVersion()\ngetVersion(raw: bool = False) \u2192 Union[str, list]\nRetrieves the git versions of all components of the system.\nParameter:\nraw\n: Return unprocessed version info string, or extract version info for each component\ninto a list.\nReturns:\nEither an unprocessed string containing the version info details, or a list with version\ninfo for each component.\nEndpoint:\nGET /version\nSee\nShow component versions\ngetVer()\ngetVer(component: str = \"product\", full: bool = False) \u2192 str\nGets the version information of a specific component.\nGet the full list of components using\ngetVersion()\n.\nParameters:\ncomponent\n: One of TigerGraph\u2019s components (e.g. product, gpe, gse).\nfull\n: Return the full version string (with timestamp, etc.) or just X.Y.Z.\nReturns:\nVersion info for specified component.\nRaises:\nTigerGraphException\nif invalid/non-existent component is specified.\ngetLicenseInfo()\ngetLicenseInfo() \u2192 dict\nReturns the expiration date and remaining days of the license.\nReturns:\nReturns license details. For an evaluation/trial deployment, returns an information message and -1 remaining days.\nping()\nping() \u2192 dict\nPublic health check endpoint.\nReturns:\nReturns a JSON object with a key of \"message\" and a value of \"pong\"\ngetSystemMetrics()\ngetSystemMetrics(from_ts: int = None, to_ts: int = None, latest: int = None, what: str = None, who: str = None, where: str = None)\nMonitor system usage metrics.\nParameters:\nfrom_ts (int, optional)\n: The epoch timestamp that indicates the start of the time filter.\nto_ts (int, optional)\n: The epoch timestamp that indicates the end of the time filter.\nlatest (int, optional)\n: Number of datapoints to return. If provided,\nfrom_ts\nand\nto_ts\nwill be ignored.\nwhat (str, optional)\n: Name of the metric to filter for. Possible choices are:\n\"cpu\": Percentage of CPU usage by component\n\"mem\": Memory usage in megabytes by component\n\"diskspace\": Disk usage in megabytes by directory\n\"network\": Network traffic in bytes since the service started\n\"qps\": Number of requests per second by endpoint\n\"servicestate\": The state of the service, either online 1 or offline 0\n\"connection\": Number of open TCP connections\nwho (str, optional)\n: Name of the component that reported the datapoint.\nwhere (str, optional)\n: Name of the node that reported the datapoint.\nReturns:\nJSON object of datapoints collected.\ngetQueryPerformance()\ngetQueryPerformance(seconds: int = None)\nReturns real-time query performance statistics over the given time period, as specified by the seconds parameter.\nParameter:\nseconds (int, optional)\n: Seconds are measured up to 60, so the seconds parameter must be a positive integer less than or equal to 60.\ngetServiceStatus()\ngetServiceStatus(request_body: dict)\nReturns the status of the TigerGraph services specified in the request.\nSupported on databases versions 3.4 and above.\nParameter:\nrequest_body (dict)\n: Must be formatted as specified here:\nhttps://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_show_service_status\nrebuildGraph()\nrebuildGraph(threadnum: int = None, vertextype: str = \"\", segid: str = \"\", path: str = \"\", force: bool = False)\nRebuilds the graph engine immediately.\nSee\nthis\nfor more details. for more information.\nParameters:\nthreadnum (int, optional):\nNumber of threads to execute the rebuild.\n*\nvertextype (str, optional)\n: Vertex type to perform the rebuild for. Will perform for all vertex types if not specified.\n*\nsegid (str, optional)\n: Segment ID of the segments to rebuild. If not provided, all segments will be rebuilt.\nIn general, it is recommneded not to provide this parameter and rebuild all segments.\n*\npath (str, optional)\n: Path to save the summary of the rebuild to. If not provided, the default path is \"/tmp/rebuildnow\".\n*\nforce (bool, optional)\n: Boolean value that indicates whether to perform rebuilds for segments for which there are no records of new data.\nNormally, a rebuild would skip such segments, but if force is set true, the segments will not be skipped.\nReturns:\nJSON response with message containing the path to the summary file.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getqueryperformance", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getservicestatus", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getversion", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_rebuildgraph", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/1.1/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/1/core-functions/utils", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/1.4/core-functions/utils", "https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_rebuild_graph_engine", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_show_service_status", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_echo", "https://docs.tigergraph.com/pytigergraph/1.2/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_ping", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/1.3/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getsystemmetrics", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/tigergraph-server/current/API/built-in-endpoints#_show_component_versions", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_echo", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getlicenseinfo", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getver", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "content": "Release Notes\n[1.5] - 2023-09-25\nRelease of pyTigerGraph version 1.5.\nAdded:\nObject-oriented schema definition and modifcation\n. Define graph schemas in native Python, without knowing GSQL.\ngsql()\nhandles some common error cases and raises an exception if they occur.\nChanged:\nDataloaders that experience a parsing error due to missing/dirty data handle the error more gracefully.\nRemoved the use of pyTigerDriver for GSQL operations.\nVarious bug fixes.\n[1.4] - 2023-05-16\nRelease of pyTigerGraph version 1.4.\nNote:\nif you are using the Graph Data Science dataloaders, you must upgrade both the ML Workbench and pyTigerGraph to 1.4 at the same time.\nThere is a incompatibility between v1.3 and v1.4 of pyTigerGraph and the corresponding ML Workbench versions.\nAdded:\nAdditional Query Management Support\nshowQuery()\nreturns the GSQL of a given query.\ngetQueryMetadata()\nreturns the metadata details about a query, such as input parameters and what is returned in\nPRINT\nstatements.\ngetRunningQueries()\nshows the statistics of queries currently running on the graph.\nabortQuery()\naborts a selected query by ID or all queries on the graph.\nAdditional System Management Support\nping()\nis a public API to check the health of the TigerGraph server.\ngetSystemMetrics()\nmonitors system metrics such as CPU and RAM usage.\ngetQueryPerformance()\nreturns real-time query performance statistics over a given period.\ngetServiceStatus()\nreturns the status of TigerGraph services specified in the request.\nrebuildGraph()\nrebuilds\nthe graph immediately.\nBuilt in Graph ML models and Trainer\nVarious GraphSAGE models\nfor vertex classification and regression, as well as link prediction.\nNodePiece MLP model\nfor vertex classification.\nGeneral purpose trainer\nto enable training of Graph ML models in a concise fashion.\nTransforms\nPyGTemporalTransform\nto create a sequence of subgraphs for a given batch of data, in a temporal manner.\nNodePieceMLPTransform\nto transform a batch produced by a NodePiece dataloader into a batch that can be fed into a PyTorch multilayer perceptron.\nAdditional Dataloader Support\nSSL Support: two-way SSL encryption via Kerberos.\nCollaborative dataloaders: use dataloaders on multiple machines to pull batches from the same Kafka queue. Helpful for data distributed model training.\nDatetime support in dataloaders: Output\nDATETIME\nattributes from the database using the dataloaders. Exports as UNIX epoch timestamps.\nOptional\ndistributed_query\nparameter in dataloaders if running on distributed database clusters. If set to True, installs the dataloader using the\nDISTRIBUTED\nkeyword in the query heading. Useful for distributed database clusters.\nstop()\nfunction in dataloaders: Kill the query producing batches for the dataloader immediately. Helpful for stopping the production of batches sent to Kafka after breaking out of a training loop.\nChanged:\nDataloader factory produces multiple dataloaders if\nfilter_by\nis a list of different filters.\nImproved the scalability of the NodePiece dataloader.\n[1.3] - 2023-02-01\nRelease of pyTigerGraph version 1.3.\nAdded:\nTwo new dataloaders: HGTLoader and NodePiece\nThe HGTLoader is a data loader that performs stratified neighbor sampling\nHeterogeneous Graph Transformer\n.\nNodePiece is a scalable graph embedding approach introduced in\nNodePiece: Compositional and Parameter-Efficient Representations of Large Knowledge Graphs\nCallback functions to all dataloaders: write functions to process the batch in a background thread before it is passed into the training loop.\nChanged:\nAdded better error messaging when REST requests are incorrect.\nTemplate query support in the featurizer (requires TigerGraph Database 3.9+)\nData splitters automatically perform a schema change if needed to add attributes to the database.\nFixed:\nFixed how custom SSL certificates were handled when instantiating the GSQL client.\n[1.2] - 2022-11-09\nRelease of pyTigerGraph version 1.2.\nAdded:\nThe\nDatasets\nclass, a way to easily import standard datasets into a database instance.\nThe\nvisualizeSchema\nfunction to visualize graph schemas.\nProper deprecation warnings.\nLogging capabilities using native Python logging tools.\nAbility to run asynchronous queries from\nrunInstalledQuery()\nChanged:\nMany changes to the\nfeaturizer\ncapability, including:\nAutomatically selecting the correct version of a graph data science algorithm given your version of the database.\nAutomatically creating the schema change necessary to run the algorithm and store the results to an attribute.\nIf the algorithm is not already installed at runtime, and is included in the TigerGraph Graph Data Science Library, the algorithm will be installed automatically.\nAdding more supported algorithms, in categories such as similarity and topological link prediction.\n[1.1] - 2022-09-06\nRelease of pyTigerGraph version 1.1.\nAdded:\nTensorFlow support for homogeneous GNNs via the Spektral library.\nHeterogeneous Graph Dataloading support for DGL.\nSupport of lists of strings in dataloaders.\nChanged:\nFixed KeyError when creating a data loader on a graph where PrimaryIdAsAttribute is False.\nError catch if Kafka dataloader doesn\u2019t run in async mode.\nRefresh schema during dataloader instantiation and featurizer attribute addition.\nReduce connection instantiation time.\nReinstall query if it is disabled.\nConfirm Kafka topic is created before subscription.\nMore efficient use of Kafka resources.\nAllow multiple consumers on the same data.\nImproved deprecation warnings.\n[1.0] - 2022-07-11\nRelease of pyTigerGraph version 1.0, in conjunction with version 1.0 of the\nTigerGraph Machine Learning Workbench\n.\nAdded:\nKafka authentication support for ML Workbench enterprise users.\nCustom query support for Featurizer, allowing developers to generate their own graph-based features as well as use our\nbuilt-in Graph Data Science algorithms\n.\nChanged:\nAdditional testing of GDS functionality\nMore demos and tutorials for TigerGraph ML Workbench, found\nhere\n.\nVarious bug fixes.\n[0.9.1] - 2022-06-21\nAdded new parameter,\ntgCloud\nfor when connecting to a TigerGraph Cloud instance. Set to\nTrue\nif using a new TigerGraph Cloud\nChanged:\nDeprecated\ngcp\nparameter, as\ntgCloud\nsupercedes this. Existing code will be compatible.\n[0.9] - 2022-05-16\nWe are excited to announce the pyTigerGraph v0.9 release!\nThis release adds many new features for graph machine learning and graph data science, a refactoring of core code, and more robust testing.\nAdditionally, we have officially \u201cgraduated\u201d it to an official TigerGraph product. This means brand-new documentation, a new GitHub repository, and future feature enhancements.\nWe are committed to keeping pyTigerGraph true to its roots as an open-source project.\nCheck out the\nContributing\npage and our\nGitHub Issues page\nif you want to help with pyTigerGraph\u2019s development.\npyTigerGraph 0.9 was released on May 16th, 2022.\nNew Features\nGraph Data Science Capability\nMany new capabilities added for graph data science and graph machine learning.\nData loaders for training Graph Neural Networks in DGL and PyTorch Geometric\nA \"featurizer\" to generate graph-based features\nMetric trackers for precision, recall, and accuracy\nVertex and edge splitters for generation of train/validation/testing splits.\nOther Changes\nDocumentation\nWe have moved the documentation to the\nofficial TigerGraph Documentation site\nand updated many of the contents with type hints and more descriptive parameter explanations.\nTesting\nThere is now well-defined testing for every function in the package.\nA more defined testing framework is coming soon.\nCode Structure\nA major refactor of the codebase was performed. No breaking changes were made to accomplish this.", "links": ["https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/pytigergraph/1/release-notes/", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_1_5_2023_09_25", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_ping", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_abortquery", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_changed_3", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_getquerymetadata", "https://docs.tigergraph.com/pytigergraph/1.2/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_changed_5", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_added_4", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_0_9_2022_05_16", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getqueryperformance", "https://docs.tigergraph.com/pytigergraph/1.1/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_rebuildgraph", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_1_4_2023_05_16", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/ml-workbench/current/overview/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_changed_6", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_getrunningqueries", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_changed_2", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_new_features", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getservicestatus", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_added_3", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_1_0_2022_07_11", "https://docs.tigergraph.com/pytigergraph/1.3/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_added_6", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_changed_7", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_1_1_2022_09_06", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_changed_4", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_fixed", "https://docs.tigergraph.com/pytigergraph/1.4/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_added_5", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_testing", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_0_9_1_2022_06_21", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils#_getsystemmetrics", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_other_changes", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_documentation", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_1_3_2023_02_01", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_added_2", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_graph_data_science_capability", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_1_2_2022_11_09", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query#_showquery", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/tigergraph-server/3.9/API/built-in-endpoints#_rebuild_graph_engine", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_code_structure", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_added", "https://docs.tigergraph.com/pytigergraph/current/release-notes/#_changed", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
{"url": "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "content": "Data Splitting Functions\nThis class contains functions for data splitting.\nMake sure to create the appropriate attributes in the graph before using these functions.\nRandomVertexSplitter\nThe split results are stored in the provided vertex attributes. Each boolean attribute\nindicates which part a vertex belongs to.\nUsage:\nA random 60% of vertices will have their attribute \"attr_name\" set to True, and\nothers False.\nattr_name\ncan be any attribute that exists in the database (same below).\nExample:\nconn = TigerGraphConnection(...)\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6)\nsplitter.run()\nA random 60% of vertices will have their attribute \"attr_name\" set to True, and a\nrandom 20% of vertices will have their attribute \"attr_name2\" set to True. The two\nparts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6, attr_name2=0.2)\nsplitter.run()\nA random 60% of vertices will have their attribute \"attr_name\" set to True, a\nrandom 20% of vertices will have their attribute \"attr_name2\" set to True, and\nanother random 20% of vertices will have their attribute \"attr_name3\" set to True.\nThe three parts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6, attr_name2=0.2, attr_name3=0.2)\nsplitter.run()\nParameters:\nconn (TigerGraphConnection)\n: Connection to TigerGraph database.\nv_types (List[str], optional)\n: List of vertex types to split. If not provided, all vertex types are used.\ntimeout (int, optional)\n: Timeout value for the operation. Defaults to 600000.\nrun()\nrun() \u2192 None\nPerform the split.\nThe split ratios set in initialization can be overridden here.\nFor example:\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6);\nsplitter.run(attr_name=0.3)\nThe spliter above uses the ratio 0.3 instead of 0.6.\nRandomEdgeSplitter\nThe split results are stored in the provided edge attributes. Each boolean attribute\nindicates which part an edge belongs to.\nUsage:\nA random 60% of edges will have their attribute \"attr_name\" set to True, and\nothers False.\nattr_name\ncan be any attribute that exists in the database (same below).\nExample:\nconn = TigerGraphConnection(...)\nsplitter = conn.gds.edgeSplitter(timeout, attr_name=0.6)\nsplitter.run()\nA random 60% of edges will have their attribute \"attr_name\" set to True, and a\nrandom 20% of edges will have their attribute \"attr_name2\" set to True. The two\nparts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = conn.gds.edgeSplitter(timeout, attr_name=0.6, attr_name2=0.2)\nsplitter.run()\nA random 60% of edges will have their attribute \"attr_name\" set to True, a\nrandom 20% of edges will have their attribute \"attr_name2\" set to True, and\nanother random 20% of edges will have their attribute \"attr_name3\" set to True.\nThe three parts are disjoint. Example:\nconn = TigerGraphConnection(...)\nsplitter = conn.gds.edgeSplitter(timeout, attr_name=0.6, attr_name2=0.2, attr_name3=0.2)\nsplitter.run()\nParameters:\nconn (TigerGraphConnection)\n: Connection to TigerGraph database.\ne_types (List[str], optional)\n: List of edge types to split. If not provided, all edge types are used.\ntimeout (int, optional)\n: Timeout value for the operation. Defaults to 600000.\nrun()\nrun() \u2192 None\nPerform the split.\nThe split ratios set in initialization can be overridden here.\nFor example:\nsplitter = RandomVertexSplitter(conn, timeout, attr_name=0.6);\nsplitter.run(attr_name=0.3)\nThe splitter above uses the ratio 0.3 instead of 0.6.", "links": ["https://docs.tigergraph.com/pytigergraph/current/contributing/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/getting-started/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/connection", "https://docs.tigergraph.com/pytigergraph/1.3/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/core-functions/edge", "https://docs.tigergraph.com/tigergraph-server/current/gsql-shell/web", "https://docs.tigergraph.com/pytigergraph/current/core-functions/gsql", "https://docs.tigergraph.com/pytigergraph/current/core-functions/schema", "https://docs.tigergraph.com/pytigergraph/current/core-functions/vertex", "https://docs.tigergraph.com/pytigergraph/current/core-functions/path", "https://docs.tigergraph.com/gui/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/release-notes/legacy-tg-versions", "https://docs.tigergraph.com/tigergraph-server/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/getting-started/install", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets_object", "https://docs.tigergraph.com/insights/current/intro/", "https://docs.tigergraph.com/ml-workbench/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/udt", "https://docs.tigergraph.com/pytigergraph/1.4/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/gds/pyg_transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/graphsage", "https://docs.tigergraph.com/pytigergraph/current/gds/transforms", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece", "https://docs.tigergraph.com/cloud/start/overview", "https://docs.tigergraph.com/pytigergraph/current/release-notes/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/base", "https://docs.tigergraph.com/pytigergraph/current/getting-started/101", "https://docs.tigergraph.com/home", "https://docs.tigergraph.com/pytigergraph/current/object_oriented_schema/schema-def", "https://docs.tigergraph.com/pytigergraph/current/core-functions/query", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters#_randomvertexsplitter", "https://docs.tigergraph.com/pytigergraph/1.1/gds/splitters", "https://docs.tigergraph.com/pytigergraph/1.2/gds/splitters", "https://docs.tigergraph.com/graphql/current/", "https://docs.tigergraph.com/pytigergraph/current/core-functions/auth", "https://docs.tigergraph.com/pytigergraph/current/gds/models", "https://docs.tigergraph.com/sitemap.xml", "https://docs.tigergraph.com/pytigergraph/current/gds/gds", "https://docs.tigergraph.com/", "https://docs.tigergraph.com/pytigergraph/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/visualization/visualization", "https://docs.tigergraph.com/pytigergraph/current/core-functions/", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters#_run_2", "https://docs.tigergraph.com/pytigergraph/current/gds/nodepiece_transforms", "https://docs.tigergraph.com/pytigergraph/current/core-functions/loading", "https://docs.tigergraph.com/pytigergraph/current/gds/dataloaders", "https://docs.tigergraph.com/home/", "https://docs.tigergraph.com/pytigergraph/current/gds/featurizer", "https://docs.tigergraph.com/pytigergraph/current/gds/trainer", "https://docs.tigergraph.com/pytigergraph/current/gds/metrics", "https://docs.tigergraph.com/pytigergraph/current/core-functions/utils", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters#_run", "https://docs.tigergraph.com/pytigergraph/current/gds/splitters#_randomedgesplitter", "https://docs.tigergraph.com/pytigergraph/1/gds/splitters", "https://docs.tigergraph.com/pytigergraph/current/datasets/datasets", "https://docs.tigergraph.com/gsql-ref/current/intro/", "https://docs.tigergraph.com/pytigergraph/current/gds/", "https://docs.tigergraph.com/graph-ml/current/intro/"]}
