CREATE OR REPLACE DISTRIBUTED QUERY first_shortest_path(
  VERTEX v_source, 
  VERTEX v_target, 
  INT depth =8,
  BOOL print_results = TRUE ) { 
  /*This algorithm is to find and return only the first full path between two vertex
  
  Parameters:
  v_source: source vertex                 
  v_target: target vertex  
  depth: maxmium path length
  print_results: print JSON output    
  
  */
    
  OrAccum @end_point, @visited, @@hit;
  ListAccum<VERTEX> @path_list; // the first list of vertices out of many paths
  ListAccum<VERTEX> @@first_full_path;

  // 1. mark the target node as true  
  endset = {v_target};
  endset = SELECT s
          From endset:s
          POST-ACCUM s.@end_point = true;
    
  // 2. start from the initial node, save the node to the patt_list, and find all nodes connected through the given name
  Source = {v_source};
  Source = SELECT s 
           FROM Source:s
           POST-ACCUM s.@path_list = s, s.@visited = true; 
    
 WHILE Source.size() > 0 AND NOT @@hit LIMIT depth DO 
       Source = SELECT t 
                 FROM Source:s -(:e)- :t
                 WHERE t.@visited == false
                 ACCUM    
                   t.@path_list = s.@path_list
                 POST-ACCUM s.@path_list.clear() 
                 POST-ACCUM t.@path_list += t,
                             t.@visited = true,  
                    IF t.@end_point ==TRUE THEN 
                      @@first_full_path += t.@path_list,
                      @@hit += TRUE
                    END;
                  
         
  END;
    
 // 3. return the final result
  IF print_results THEN
      PRINT @@first_full_path as path;
  END;  
}